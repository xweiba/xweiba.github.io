{"total":166,"pageSize":12,"pageCount":14,"data":[{"title":"设计模式-适配器模式","uid":"27aab0825c321448b30acc595fc9bf6c","slug":"设计模式-适配器模式","date":"2025-05-01T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-适配器模式.json","keywords":null,"cover":null,"text":"模式定义适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。适配器模式让那些接口不兼容的类可以...","permalink":"/post/设计模式-适配器模式","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"适配器模式","slug":"适配器模式","count":1,"path":"api/tags/适配器模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-原型模式","uid":"ba36f7fdf24221629f84d123d60f7a05","slug":"设计模式-原型模式","date":"2025-04-30T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-原型模式.json","keywords":null,"cover":null,"text":"模式定义原型模式（Prototype Pattern）是一种创建型设计模式，它允许你复制已有对象，而无需使代码依赖它们所属的类。该模式通过克隆现有对象来创建新对...","permalink":"/post/设计模式-原型模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"原型模式","slug":"原型模式","count":1,"path":"api/tags/原型模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Mysql-事务与MVCC","uid":"3ea889d0200adbef6f577008a7289f16","slug":"Mysql-事务与MVCC","date":"2025-04-30T04:20:26.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Mysql-事务与MVCC.json","keywords":null,"cover":null,"text":"Mysql ACID 特性 原子性: 事务是最小的执行单位，不允许分割。要么全部成功，要么全部失败。 一致性: 执行事务前后，数据保持一致，例如转账业务中，无论...","permalink":"/post/Mysql-事务与MVCC","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"},{"name":"事务","slug":"事务","count":2,"path":"api/tags/事务.json"},{"name":"MVCC","slug":"MVCC","count":1,"path":"api/tags/MVCC.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-桥接模式","uid":"8a95a847ba41df9a0cdac0faf9ed7ebe","slug":"设计模式-桥接模式","date":"2025-04-29T14:11:58.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-桥接模式.json","keywords":null,"cover":null,"text":"模式定义桥接模式（Bridge Pattern）是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们都可以独立地变化。这种模式通过组合的方式，将类的抽象与...","permalink":"/post/设计模式-桥接模式","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"桥接模式","slug":"桥接模式","count":1,"path":"api/tags/桥接模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-建造者模式","uid":"c6662e642ba385f9913bf17f12cb4f9e","slug":"设计模式-建造者模式","date":"2025-04-29T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-建造者模式.json","keywords":null,"cover":null,"text":"模式定义建造者模式(Builder Pattern)是一种创建型设计模式，它允许你分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。1...","permalink":"/post/设计模式-建造者模式","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"建造者模式","slug":"建造者模式","count":1,"path":"api/tags/建造者模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-抽象工厂模式","uid":"3e408f42174f172f57057703c67ff561","slug":"设计模式-抽象工厂模式","date":"2025-04-29T13:40:04.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-抽象工厂模式.json","keywords":null,"cover":null,"text":"模式定义抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的...","permalink":"/post/设计模式-抽象工厂模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"抽象工厂模式","slug":"抽象工厂模式","count":1,"path":"api/tags/抽象工厂模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-工厂方法模式","uid":"4bfc1f23a5ea4d5b4830c87f58680be5","slug":"设计模式-工厂方法模式","date":"2025-04-29T13:40:03.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-工厂方法模式.json","keywords":null,"cover":null,"text":"模式定义工厂方法模式(Factory Method Pattern)是一种创建型设计模式，它定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方...","permalink":"/post/设计模式-工厂方法模式","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"工厂方法模式","slug":"工厂方法模式","count":1,"path":"api/tags/工厂方法模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-单例模式","uid":"073020299d8408617f662c6184305f2a","slug":"设计模式-单例模式","date":"2025-04-29T13:40:02.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-单例模式.json","keywords":null,"cover":null,"text":"模式定义单例模式（Singleton Pattern）是一种创建型设计模式，它保证一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。3 应用场景单例模...","permalink":"/post/设计模式-单例模式","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"单例模式","slug":"单例模式","count":1,"path":"api/tags/单例模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"设计模式-概述","uid":"2a65e05f182b95ab6109ed82fd948943","slug":"设计模式-概述","date":"2025-04-29T13:35:19.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-概述.json","keywords":null,"cover":null,"text":" DesignPattern 观察者模式主题 Subject 维护订阅者 内部维护一个订阅者列表 List<Observer> observers regist...","permalink":"/post/设计模式-概述","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"软件架构","slug":"软件架构","count":1,"path":"api/tags/软件架构.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Js-Web转PDf框架的设计与实现","uid":"16e3b72ab86bdd03c61cdf559c2dc7de","slug":"Js-Web转PDf框架的设计与实现","date":"2025-04-29T09:38:40.000Z","updated":"2025-04-30T08:11:18.860Z","comments":true,"path":"api/articles/Js-Web转PDf框架的设计与实现.json","keywords":null,"cover":null,"text":" 设计开发了一个输出标准A3、A4等指定大小的PDF前端js框架，支持实时预览和字符级自适应分页，实时获取业务dom的精准坐标信息，所见即所得。后端使用Egg....","permalink":"/post/Js-Web转PDf框架的设计与实现","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Js，NodeJs,PDF,Js框架","slug":"Js，NodeJs-PDF-Js框架","count":1,"path":"api/tags/Js，NodeJs-PDF-Js框架.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Java-基于Redis的高性能任务队列设计与实现","uid":"6456b03f672a87198a79af9e60f25dff","slug":"Java-基于Redis的高性能任务队列设计与实现","date":"2025-04-29T09:19:39.000Z","updated":"2025-04-30T08:11:18.852Z","comments":true,"path":"api/articles/Java-基于Redis的高性能任务队列设计与实现.json","keywords":null,"cover":null,"text":"我们早期2.0系统交卷是同步提交，交一笔写一笔，还要做各种逻辑处理，通知其他服务修改活动状态，在班级考试里还能用，只是慢，qps不超50, 后来需要支持年级考试...","permalink":"/post/Java-基于Redis的高性能任务队列设计与实现","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"请求合并","slug":"请求合并","count":1,"path":"api/tags/请求合并.json"},{"name":"Redis阻塞队列","slug":"Redis阻塞队列","count":1,"path":"api/tags/Redis阻塞队列.json"},{"name":"任务队列","slug":"任务队列","count":1,"path":"api/tags/任务队列.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-5-JVM性能优化","uid":"74b4ce53d861aece862753ca4c35dd9e","slug":"Java-高级-Day-5-JVM性能优化","date":"2025-04-27T08:23:22.000Z","updated":"2025-04-30T08:11:18.860Z","comments":true,"path":"api/articles/Java-高级-Day-5-JVM性能优化.json","keywords":null,"cover":[],"text":"核心点 所有优化都要根据实际服务的具体业务场景做优化配置，没有通用的配置。 GC 优化目标：降低 full gc 产生的 STW ,让短期存活的对象尽量都留在 ...","permalink":"/post/Java-高级-Day-5-JVM性能优化","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}