{"total":166,"pageSize":12,"pageCount":14,"data":[{"title":"Java-高级-Day-4-GC垃圾收集算法","uid":"55e262e45820c6fc0e5602715c3359d4","slug":"Java-高级-Day-4-GC垃圾收集算法","date":"2025-04-24T05:26:47.000Z","updated":"2025-04-30T08:11:18.858Z","comments":true,"path":"api/articles/Java-高级-Day-4-GC垃圾收集算法.json","keywords":null,"cover":[],"text":"核心点分代收集理论 新升代：复制算法，每次收集都会有大量对象(近99%)死去，所以可以选择复制算法 老年代：“标记-清除”或“标记-整理”算法，对象存活几率是比...","permalink":"/post/Java-高级-Day-4-GC垃圾收集算法","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-3-GC垃圾回收","uid":"8034d4b46da16be185cdc304107292a3","slug":"Java-高级-Day-3-GC垃圾回收","date":"2025-04-24T01:33:20.000Z","updated":"2025-04-30T08:11:18.857Z","comments":true,"path":"api/articles/Java-高级-Day-3-GC垃圾回收.json","keywords":null,"cover":[],"text":"核心点堆内存分配比 老年代:新生代 2:1 新生代 Eden区:Survivor0区:Survivor1区 占比 8:1:1 分配策略 对象在分配时使用CAS算...","permalink":"/post/Java-高级-Day-3-GC垃圾回收","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-2-JVM 内存分配","uid":"8f3910e39f3a3511dc34dd9ac8d25e0b","slug":"Java-高级-Day-2-JVM内存分配","date":"2025-04-23T03:13:38.000Z","updated":"2025-04-30T08:11:18.854Z","comments":true,"path":"api/articles/Java-高级-Day-2-JVM内存分配.json","keywords":null,"cover":[],"text":"核心点图示：颜色相同的都为一个类型 线程 程序计数器：记录当前线程正在执行的字节码指令的地址，是每个线程私有的，它的大小是4 个字节，固定的，不会随着操作系统的...","permalink":"/post/Java-高级-Day-2-JVM内存分配","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-1-Java类加载机制","uid":"13d951f30d32eed0580b85046fce3923","slug":"Java-高级-Day-1-Java类加载机制","date":"2025-04-14T03:14:36.000Z","updated":"2025-04-30T08:11:18.852Z","comments":true,"path":"api/articles/Java-高级-Day-1-Java类加载机制.json","keywords":null,"cover":[],"text":"核心点类加载器 引导类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如 rt.jar 、charsets.jar 等 扩展类加载器：负责...","permalink":"/post/Java-高级-Day-1-Java类加载机制","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"RocketMQ找不到Broker节点","uid":"b90ec19b312a987f799746f7eb908d56","slug":"RocketMQ找不到Broker节点","date":"2023-05-12T16:32:35.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/RocketMQ找不到Broker节点.json","keywords":null,"cover":null,"text":"RocketMQ找不到Broker节点1234567vim /app/rocketmq/4.9.1/conf/broker.conf# 添加ip信息namesr...","permalink":"/post/RocketMQ找不到Broker节点","photos":[],"count_time":{"symbolsCount":285,"symbolsTime":"1 mins."},"categories":[{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/categories/RocketMQ.json"}],"tags":[{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/tags/RocketMQ.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Redis Cluster 修复","uid":"2e7be242cc84fa54c7118f5a7aeacc49","slug":"Redis Cluster修复","date":"2023-05-12T16:32:15.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Redis Cluster修复.json","keywords":null,"cover":null,"text":"Redis Cluster 修复节点fair，没有可用槽位123456789redis-cli -a xxx -c -h 192.168.186.xx -p x...","permalink":"/post/Redis Cluster修复","photos":[],"count_time":{"symbolsCount":221,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":3,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redis","slug":"Redis","count":5,"path":"api/tags/Redis.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Mysql 8.0 开启外网访问","uid":"03b0b502502bb68757a4ab4dec18ea0c","slug":"Mysql8.0开启外网访问","date":"2023-01-01T02:27:17.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Mysql8.0开启外网访问.json","keywords":null,"cover":null,"text":"Mysql 8.0 开启外网访问配置修改1234# vim /etc/mysql/mysql.conf.d/mysqld.cnf# 注释掉这两行#bind-ad...","permalink":"/post/Mysql8.0开启外网访问","photos":[],"count_time":{"symbolsCount":507,"symbolsTime":"1 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":4,"path":"api/categories/Mysql.json"}],"tags":[{"name":"配置","slug":"配置","count":8,"path":"api/tags/配置.json"},{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM-垃圾收集算法解析","uid":"347757ce9e70573368e0803b807e225c","slug":"JVM-垃圾收集算法解析","date":"2022-12-30T02:27:17.000Z","updated":"2025-04-30T08:11:18.848Z","comments":true,"path":"api/articles/JVM-垃圾收集算法解析.json","keywords":null,"cover":[],"text":"垃圾收集算法 分代收集理论当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是通过对象存活周期的不同将内存分为几块。一般将JAVA堆分为新生代...","permalink":"/post/JVM-垃圾收集算法解析","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"GC","slug":"GC","count":1,"path":"api/categories/GC.json"}],"tags":[{"name":"JVM","slug":"JVM","count":1,"path":"api/tags/JVM.json"},{"name":"GC","slug":"GC","count":1,"path":"api/tags/GC.json"},{"name":"CMS","slug":"CMS","count":1,"path":"api/tags/CMS.json"},{"name":"ParNew","slug":"ParNew","count":1,"path":"api/tags/ParNew.json"},{"name":"三色标记","slug":"三色标记","count":1,"path":"api/tags/三色标记.json"},{"name":"内存屏障","slug":"内存屏障","count":1,"path":"api/tags/内存屏障.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JVM类加载机制","uid":"696f58cc973f75c60837976660da7ceb","slug":"JVM类加载机制","date":"2022-12-29T05:17:00.000Z","updated":"2025-04-30T08:11:18.849Z","comments":true,"path":"api/articles/JVM类加载机制.json","keywords":null,"cover":[],"text":"类加载全过程当我们使用Java命令启动一个类的main()方法时，首先需要通过类加载器将主类加载到JVM中。 1234567891011121314151617...","permalink":"/post/JVM类加载机制","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"JVM","slug":"JVM","count":1,"path":"api/categories/JVM.json"}],"tags":[{"name":"原理","slug":"原理","count":1,"path":"api/tags/原理.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"注册中心服务真实IP获取脚本","uid":"b6c44ddff928c2bc54e5fe634d621a85","slug":"注册中心服务真实IP获取脚本","date":"2022-12-26T05:58:09.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/注册中心服务真实IP获取脚本.json","keywords":null,"cover":null,"text":"由于部分同事在测试环境启服务时常常不改服务名称且ip直接配置成localhost，导致很多服务调用时会连接异常，但又找不到人，为此我写了一个脚本来定位服务的真实...","permalink":"/post/注册中心服务真实IP获取脚本","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Shell","slug":"Shell","count":2,"path":"api/categories/Shell.json"}],"tags":[{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Docker-创建Hexo环境","uid":"0cc92406a47f2ec432fad59606c76747","slug":"Docker-创建Hexo环境","date":"2022-12-23T15:14:30.000Z","updated":"2025-04-30T08:11:18.833Z","comments":true,"path":"api/articles/Docker-创建Hexo环境.json","keywords":null,"cover":[],"text":" GitHub 访问速度不佳, 在Nas上部署一套Hexo 编写DockerFile本来是打算看看有没有合适的镜像的, 不是太大, 就是配置太麻烦, 干脆自己自...","permalink":"/post/Docker-创建Hexo环境","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Docker","slug":"Docker","count":7,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":3,"path":"api/tags/Docker.json"},{"name":"Hexo","slug":"Hexo","count":5,"path":"api/tags/Hexo.json"},{"name":"nodejs","slug":"nodejs","count":1,"path":"api/tags/nodejs.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Puppeteer 配置记录","uid":"c50e1df99d9d47827851c22dac23fe21","slug":"Puppeteer配置记录","date":"2022-12-23T07:02:52.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Puppeteer配置记录.json","keywords":null,"cover":null,"text":"Puppeteer项目配置注意事项： CentOS 7 以下不支持 Puppeteer Puppeteer 服务需能够访问被打印的页面 请先确保字体安装成功，否...","permalink":"/post/Puppeteer配置记录","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Puppeteer","slug":"Puppeteer","count":1,"path":"api/categories/Puppeteer.json"}],"tags":[{"name":"配置","slug":"配置","count":8,"path":"api/tags/配置.json"},{"name":"Puppeteer","slug":"Puppeteer","count":1,"path":"api/tags/Puppeteer.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}