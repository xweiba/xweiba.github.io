{"name":"Java-Day","slug":"Java-Day","count":5,"postlist":[{"title":"Java-高级-Day-5-JVM性能优化","uid":"74b4ce53d861aece862753ca4c35dd9e","slug":"Java-高级-Day-5-JVM性能优化","date":"2025-04-27T08:23:22.000Z","updated":"2025-04-30T08:11:18.860Z","comments":true,"path":"api/articles/Java-高级-Day-5-JVM性能优化.json","keywords":null,"cover":[],"text":"核心点 所有优化都要根据实际服务的具体业务场景做优化配置，没有通用的配置。 GC 优化目标：降低 full gc 产生的 STW ,让短期存活的对象尽量都留在 ...","permalink":"/post/Java-高级-Day-5-JVM性能优化","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-4-GC垃圾收集算法","uid":"55e262e45820c6fc0e5602715c3359d4","slug":"Java-高级-Day-4-GC垃圾收集算法","date":"2025-04-24T05:26:47.000Z","updated":"2025-04-30T08:11:18.858Z","comments":true,"path":"api/articles/Java-高级-Day-4-GC垃圾收集算法.json","keywords":null,"cover":[],"text":"核心点分代收集理论 新升代：复制算法，每次收集都会有大量对象(近99%)死去，所以可以选择复制算法 老年代：“标记-清除”或“标记-整理”算法，对象存活几率是比...","permalink":"/post/Java-高级-Day-4-GC垃圾收集算法","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-3-GC垃圾回收","uid":"8034d4b46da16be185cdc304107292a3","slug":"Java-高级-Day-3-GC垃圾回收","date":"2025-04-24T01:33:20.000Z","updated":"2025-04-30T08:11:18.857Z","comments":true,"path":"api/articles/Java-高级-Day-3-GC垃圾回收.json","keywords":null,"cover":[],"text":"核心点堆内存分配比 老年代:新生代 2:1 新生代 Eden区:Survivor0区:Survivor1区 占比 8:1:1 分配策略 对象在分配时使用CAS算...","permalink":"/post/Java-高级-Day-3-GC垃圾回收","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-2-JVM 内存分配","uid":"8f3910e39f3a3511dc34dd9ac8d25e0b","slug":"Java-高级-Day-2-JVM内存分配","date":"2025-04-23T03:13:38.000Z","updated":"2025-04-30T08:11:18.854Z","comments":true,"path":"api/articles/Java-高级-Day-2-JVM内存分配.json","keywords":null,"cover":[],"text":"核心点图示：颜色相同的都为一个类型 线程 程序计数器：记录当前线程正在执行的字节码指令的地址，是每个线程私有的，它的大小是4 个字节，固定的，不会随着操作系统的...","permalink":"/post/Java-高级-Day-2-JVM内存分配","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Java-高级-Day-1-Java类加载机制","uid":"13d951f30d32eed0580b85046fce3923","slug":"Java-高级-Day-1-Java类加载机制","date":"2025-04-14T03:14:36.000Z","updated":"2025-04-30T08:11:18.852Z","comments":true,"path":"api/articles/Java-高级-Day-1-Java类加载机制.json","keywords":null,"cover":[],"text":"核心点类加载器 引导类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如 rt.jar 、charsets.jar 等 扩展类加载器：负责...","permalink":"/post/Java-高级-Day-1-Java类加载机制","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}