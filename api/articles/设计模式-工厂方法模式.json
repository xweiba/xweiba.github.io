{"title":"设计模式-工厂方法模式","uid":"4bfc1f23a5ea4d5b4830c87f58680be5","slug":"设计模式-工厂方法模式","date":"2025-04-29T13:40:03.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-工厂方法模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>工厂方法模式(Factory Method Pattern)是一种创建型设计模式，它定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法模式把类实例化的过程推迟到子类。<mcreference link=\"https://github.com/youlookwhat/DesignPattern\" index=\"1\">1</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>工厂方法模式适用于以下场景：</p>\n<ol>\n<li>当一个类不知道它所需要的对象的类时</li>\n<li>当一个类希望由其子类来指定它所创建的对象时</li>\n<li>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化时</li>\n</ol>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p>工厂方法模式包含以下角色：</p>\n<ol>\n<li>Factory（抽象工厂）：声明工厂方法，返回一个产品对象</li>\n<li>ConcreteFactory（具体工厂）：实现工厂方法，创建具体产品</li>\n<li>Product（抽象产品）：定义产品的接口</li>\n<li>ConcreteProduct（具体产品）：实现产品接口 <mcreference link=\"https://github.com/bytesfly/blog/blob/master/DesignPattern/factory-pattern.md\" index=\"2\">2</mcreference></li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是一个简单的工厂方法模式示例，通过不同的工厂创建不同品牌的手机：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象产品</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OppoPhone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;OPPO手机开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VivoPhone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;VIVO手机开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象工厂</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PhoneFactory</span> &#123;</span><br><span class=\"line\">    Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OppoFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PhoneFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OppoPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VivoFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PhoneFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VivoPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">oppoPhone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OppoFactory</span>().createPhone();</span><br><span class=\"line\">        oppoPhone.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">vivoPhone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VivoFactory</span>().createPhone();</span><br><span class=\"line\">        vivoPhone.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>符合开闭原则，新增产品时只需添加具体工厂和产品类</li>\n<li>符合单一职责原则，每个具体工厂只负责创建对应的产品</li>\n<li>可以让代码更加灵活，避免创建对象和使用对象的代码耦合</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>需要创建多个工厂类，增加了系统的复杂度</li>\n<li>增加新产品时需要同时添加新的具体产品类和对应的具体工厂类</li>\n</ol>\n<h2 id=\"与简单工厂的区别\"><a href=\"#与简单工厂的区别\" class=\"headerlink\" title=\"与简单工厂的区别\"></a>与简单工厂的区别</h2><p>工厂方法模式与简单工厂模式的主要区别：</p>\n<ol>\n<li>简单工厂模式只有一个工厂类，工厂方法模式有多个工厂类</li>\n<li>简单工厂模式不满足开闭原则，而工厂方法模式符合开闭原则</li>\n<li>工厂方法模式更加灵活，但也更加复杂 <mcreference link=\"https://www.runoob.com/design-pattern/factory-pattern.html\" index=\"3\">3</mcreference></li>\n</ol>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>工厂方法模式在Java开发中应用广泛，例如：</p>\n<ol>\n<li>Collection接口的iterator()方法</li>\n<li>Spring框架中的BeanFactory</li>\n<li>日志框架中的LoggerFactory</li>\n</ol>\n","feature":true,"text":"模式定义工厂方法模式(Factory Method Pattern)是一种创建型设计模式，它定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方...","permalink":"/post/设计模式-工厂方法模式","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"工厂方法模式","slug":"工厂方法模式","count":1,"path":"api/tags/工厂方法模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">模式结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与简单工厂的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">实际应用</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"设计模式-抽象工厂模式","uid":"3e408f42174f172f57057703c67ff561","slug":"设计模式-抽象工厂模式","date":"2025-04-29T13:40:04.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-抽象工厂模式.json","keywords":null,"cover":null,"text":"模式定义抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的...","permalink":"/post/设计模式-抽象工厂模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"抽象工厂模式","slug":"抽象工厂模式","count":1,"path":"api/tags/抽象工厂模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"设计模式-单例模式","uid":"073020299d8408617f662c6184305f2a","slug":"设计模式-单例模式","date":"2025-04-29T13:40:02.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-单例模式.json","keywords":null,"cover":null,"text":"模式定义单例模式（Singleton Pattern）是一种创建型设计模式，它保证一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例。3 应用场景单例模...","permalink":"/post/设计模式-单例模式","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"单例模式","slug":"单例模式","count":1,"path":"api/tags/单例模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}