{"title":"Angular中的路由","uid":"916332084fd7dc942b98c22c9189dcf4","slug":"Angular中的路由","date":"2020-11-23T06:00:04.000Z","updated":"2025-04-30T08:11:18.831Z","comments":true,"path":"api/articles/Angular中的路由.json","keywords":null,"cover":null,"content":"<h2 id=\"7-Angular中的路由\"><a href=\"#7-Angular中的路由\" class=\"headerlink\" title=\"7.Angular中的路由\"></a><center>7.Angular中的路由</center></h2><h4 id=\"1-路由\"><a href=\"#1-路由\" class=\"headerlink\" title=\"1. 路由\"></a>1. 路由</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 路由: 即根据不同的url地址,动态的让根组件挂载其他组件,来实现一个单页面应用程序</span><br><span class=\"line\"></span><br><span class=\"line\">- 带路由模块的项目比起不带路由项目中:</span><br><span class=\"line\">    1. 在app目录下多一个app-routing.modules.ts,即路由的配置文件</span><br><span class=\"line\">    2. 在app.modules.ts中引入了路由模块,并注入</span><br><span class=\"line\">        import &#123;AppRoutingModule&#125; from &#x27;./app-routing.module&#x27;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        @NgModule(&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            imports:[</span><br><span class=\"line\">                BrowserModule,</span><br><span class=\"line\">                AppRoutingModule</span><br><span class=\"line\">            ]</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    3.在根组件的html中新增了标签</span><br><span class=\"line\">        &lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-路由的使用\"><a href=\"#2-路由的使用\" class=\"headerlink\" title=\"2. 路由的使用\"></a>2. 路由的使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 需要在路由的配置文件app-routing.modules.ts中,引入使用路由的组件</span><br><span class=\"line\">    import &#123;xxxComponent&#125; from &#x27;../components/xxx&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">2. 配置路由</span><br><span class=\"line\">    const routes: Routes = [</span><br><span class=\"line\">        &#123;path:&#x27;xxx&#x27;,component:xxxComponenet&#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;path:&#x27;**&#x27;,redirectTo:&#x27;xxxPath&#x27; | component:xxxComponenet&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    path: url地址</span><br><span class=\"line\">    component: 访问对应path,需要挂载的组件</span><br><span class=\"line\">    </span><br><span class=\"line\">    path:&#x27;**&#x27;,即任意路由,一般用于匹配其他值或默认值(类似switch中的default)</span><br><span class=\"line\">    redirectTo: 跳转的路由(也可配置component,挂载对应的路由,一般还是跳转)</span><br><span class=\"line\">    </span><br><span class=\"line\">3. 组件模板中使用路由(使用routerLink),并配置router-outlet来显示动态加载的路由组件视图</span><br><span class=\"line\">    // routerLink即路由path,可配置为动态(即使用 [] ),也可为静态</span><br><span class=\"line\">    &lt;a [routeLink]=&#x27;/home&#x27;&gt;首页&lt;/a&gt;</span><br><span class=\"line\">    &lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">4. 路由选中状态</span><br><span class=\"line\">    //给路由的标签加上routerLinkActive属性,属性值即class名,在css样式文件中设置样式即可</span><br><span class=\"line\">    &lt;a [routeLink]=&#x27;/home&#x27; routerLinkActive=&quot;active&quot;&gt;首页&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-路由跳转传值\"><a href=\"#3-路由跳转传值\" class=\"headerlink\" title=\"3. 路由跳转传值\"></a>3. 路由跳转传值</h4><ul>\n<li><p>路由get传值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如 url=/xxx?aid=123</span><br><span class=\"line\">1. 组件html中(前端)</span><br><span class=\"line\">&lt;a [routeLink]=[&#x27;/home&#x27;] [queryParams]=&quot;&#123;aid:123,xxx:xxx,...&#125;&quot;&gt;首页&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 组件后台获取get传值</span><br><span class=\"line\">//首先需要在组件后台引入ActivatedRoute</span><br><span class=\"line\">import &#123;ActivatedRoute&#125; from &#x27;@angular/router&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export class xxx implements OnInit&#123;</span><br><span class=\"line\">    constructor( public route:ActivatedRoute)&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ngOnInit()&#123;</span><br><span class=\"line\">        //因为 this.route.queryParams 是一个RxJs对象,因此要通过subscribe()来获取</span><br><span class=\"line\">        this.route.queryParams.subscribe((data)=&gt;&#123;</span><br><span class=\"line\">            console.log(data.aid);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 例如 url=/xxx/123</span><br><span class=\"line\">1. 需要修改路由的配置文件</span><br><span class=\"line\">//其中:aid为动态值,类似于java中的pathParam</span><br><span class=\"line\">const routes: Routes = [</span><br><span class=\"line\">    &#123;path:&#x27;xxx/:aid&#x27;,component:xxxComponenet&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">2. 组件html中(前端)</span><br><span class=\"line\">//直接在routeLink中传递参数 </span><br><span class=\"line\">&lt;a [routeLink]=[&#x27;/home&#x27;,data]&gt;首页&lt;/a&gt;   </span><br><span class=\"line\"></span><br><span class=\"line\">3. 组件后台获取值</span><br><span class=\"line\">//首先需要在组件后台引入ActivatedRoute</span><br><span class=\"line\">import &#123;ActivatedRoute&#125; from &#x27;@angular/router&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export class xxx implements OnInit&#123;</span><br><span class=\"line\">    constructor( public route:ActivatedRoute)&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ngOnInit()&#123;</span><br><span class=\"line\">        //因为 this.route.params也是一个RxJs对象,因此同样通过subscribe()来获取</span><br><span class=\"line\">        this.route.params.subscribe((data)=&gt;&#123;</span><br><span class=\"line\">            console.log(data.aid);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过js跳转路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">同样分为2种,动态路由js跳转,以及路由getJs跳转</span><br><span class=\"line\"></span><br><span class=\"line\">1. js-动态路由跳转</span><br><span class=\"line\">    - 需要引入Route模块</span><br><span class=\"line\">    import &#123;Route&#125; from &#x27;@angular/router&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - 注入route,通过route.navigate()进行跳转</span><br><span class=\"line\">    export class xxx implements OnInit&#123;</span><br><span class=\"line\">        constructor( public route:Route)&#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ngOnInit()&#123;&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        goDetail()&#123;</span><br><span class=\"line\">            this.route.navigate([&#x27;url&#x27;,param]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">2. js-get传值跳转</span><br><span class=\"line\">    - 需要引入NavigationExtras模块</span><br><span class=\"line\">    import &#123;Route,NavigationExtras&#125; from &#x27;@angular/router&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - 定义queryParams</span><br><span class=\"line\">    let queryParams:NavigationExtras = &#123;</span><br><span class=\"line\">        queryParams:&#123;&#x27;aid&#x27;:&#x27;xxx&#x27;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    this.route.navigate([&#x27;url&#x27;],queryParams);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //注意,动态路由,传值写在[]内,get传值,写在[]外</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-父子路由-嵌套路由\"><a href=\"#4-父子路由-嵌套路由\" class=\"headerlink\" title=\"4. 父子路由(嵌套路由)\"></a>4. 父子路由(嵌套路由)</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只需要修改路由的配置文件,新增children属性</span><br><span class=\"line\">const routes: Routes = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path:&#x27;xxx&#x27;,component:xxxComponenet</span><br><span class=\"line\">            children:[</span><br><span class=\"line\">                &#123;path:&#x27;xxx/children1&#x27;,component:xxxComponenet1&#125;,</span><br><span class=\"line\">                &#123;path:&#x27;xxx/children2&#x27;,component:xxxComponenet2&#125;,</span><br><span class=\"line\">                &#123;path:&#x27;xxx/**&#x27;,redirectTo:&#x27;xxx/children1&#x27;&#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;path:&#x27;**&#x27;,redirectTo:&#x27;xxxPath&#x27; | component:xxxComponenet&#125;</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>","text":"7.Angular中的路由1. 路由123456789101112131415161718- 路由: 即根据不同的url地址,动态的让根组件挂载其他组件,来实现...","permalink":"/post/Angular中的路由","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"路由","slug":"路由","count":1,"path":"api/tags/路由.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-Angular%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">7.Angular中的路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">1. 路由</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 路由的使用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">3. 路由跳转传值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%88%B6%E5%AD%90%E8%B7%AF%E7%94%B1-%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">4. 父子路由(嵌套路由)</span></a></li></ol></li></ol></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Angular中的模块","uid":"426c2df2123a8c9ebb620e7b7f9b2ec7","slug":"Angular中的模块","date":"2020-11-23T06:00:40.000Z","updated":"2025-04-30T08:11:18.830Z","comments":true,"path":"api/articles/Angular中的模块.json","keywords":null,"cover":null,"text":"8.Angular中的模块1. 创建自定义模块1234ng g module 路径创建带路由的模块ng g module 路径 --routing 2. 使用自...","permalink":"/post/Angular中的模块","photos":[],"count_time":{"symbolsCount":963,"symbolsTime":"1 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"模块","slug":"模块","count":1,"path":"api/tags/模块.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Angular中的生命周期函数","uid":"21cec739d9353f83b2ea3174a0c5b537","slug":"Angular中的生命周期函数","date":"2020-11-23T05:58:53.000Z","updated":"2025-04-30T08:11:18.831Z","comments":true,"path":"api/articles/Angular中的生命周期函数.json","keywords":null,"cover":null,"text":"5.Angular中的生命周期函数1. Angular中的生命周期函数1234567891011121314151617生命周期函数执行顺序,从上到下1. ng...","permalink":"/post/Angular中的生命周期函数","photos":[],"count_time":{"symbolsCount":462,"symbolsTime":"1 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"生命周期","slug":"生命周期","count":1,"path":"api/tags/生命周期.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}