{"title":"设计模式-建造者模式","uid":"c6662e642ba385f9913bf17f12cb4f9e","slug":"设计模式-建造者模式","date":"2025-04-29T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-建造者模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>建造者模式(Builder Pattern)是一种创建型设计模式，它允许你分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。<mcreference link=\"https://refactoringguru.cn/design-patterns/builder\" index=\"1\">1</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>建造者模式适用于以下场景：</p>\n<ol>\n<li>需要创建的对象有复杂的内部结构（包含多个成员属性）</li>\n<li>需要生成的对象内部属性之间的建造顺序有依赖关系</li>\n<li>对象的创建过程独立于创建该对象的类</li>\n<li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品</li>\n</ol>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p>建造者模式包含以下角色：</p>\n<ol>\n<li>Builder（抽象建造者）：规范产品的组建，一般由抽象类或接口实现</li>\n<li>ConcreteBuilder（具体建造者）：实现抽象建造者定义的方法，并返回一个组建好的对象</li>\n<li>Director（指挥者）：负责安排已有模块的顺序，然后告诉建造者开始建造</li>\n<li>Product（产品）：要创建的复杂对象</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是一个简单的建造者模式示例，通过建造者模式来创建不同类型的计算机：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Computer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String ram;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String storage;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gpu;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCpu</span><span class=\"params\">(String cpu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu = cpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRam</span><span class=\"params\">(String ram)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ram = ram;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStorage</span><span class=\"params\">(String storage)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.storage = storage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGpu</span><span class=\"params\">(String gpu)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.gpu = gpu;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Computer&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;cpu=&#x27;&quot;</span> + cpu + <span class=\"string\">&quot;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"string\">                &quot;</span>, ram=<span class=\"string\">&#x27;&quot; + ram + &quot;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, storage=&#x27;&quot;</span> + storage + <span class=\"string\">&quot;\\&#x27;&#x27; +</span></span><br><span class=\"line\"><span class=\"string\">                &quot;</span>, gpu=<span class=\"string\">&#x27;&quot; + gpu + &quot;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象建造者</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ComputerBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildCpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildRam</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildStorage</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildGpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Computer <span class=\"title function_\">getResult</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体建造者 - 游戏电脑</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GamingComputerBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ComputerBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildCpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setCpu(<span class=\"string\">&quot;高性能游戏CPU&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildRam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setRam(<span class=\"string\">&quot;32GB高速内存&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildStorage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setStorage(<span class=\"string\">&quot;2TB NVMe SSD&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setGpu(<span class=\"string\">&quot;顶级游戏显卡&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Computer <span class=\"title function_\">getResult</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> computer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体建造者 - 办公电脑</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OfficeComputerBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ComputerBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Computer</span> <span class=\"variable\">computer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Computer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildCpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setCpu(<span class=\"string\">&quot;标准办公CPU&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildRam</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setRam(<span class=\"string\">&quot;8GB内存&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildStorage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setStorage(<span class=\"string\">&quot;256GB SSD&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildGpu</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        computer.setGpu(<span class=\"string\">&quot;集成显卡&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Computer <span class=\"title function_\">getResult</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> computer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指挥者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Director</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">construct</span><span class=\"params\">(ComputerBuilder builder)</span> &#123;</span><br><span class=\"line\">        builder.buildCpu();</span><br><span class=\"line\">        builder.buildRam();</span><br><span class=\"line\">        builder.buildStorage();</span><br><span class=\"line\">        builder.buildGpu();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Director</span> <span class=\"variable\">director</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Director</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">ComputerBuilder</span> <span class=\"variable\">gamingBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GamingComputerBuilder</span>();</span><br><span class=\"line\">        director.construct(gamingBuilder);</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">gamingComputer</span> <span class=\"operator\">=</span> gamingBuilder.getResult();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;游戏电脑配置：&quot;</span> + gamingComputer);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">ComputerBuilder</span> <span class=\"variable\">officeBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OfficeComputerBuilder</span>();</span><br><span class=\"line\">        director.construct(officeBuilder);</span><br><span class=\"line\">        <span class=\"type\">Computer</span> <span class=\"variable\">officeComputer</span> <span class=\"operator\">=</span> officeBuilder.getResult();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;办公电脑配置：&quot;</span> + officeComputer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>将一个复杂对象的创建过程封装在一个对象中</li>\n<li>允许对象通过多个步骤来创建，并且可以改变过程（这是与工厂模式最大的不同）</li>\n<li>向客户端隐藏产品内部的表示，使得产品的内部结构可以独立地变化</li>\n<li>可以更好地控制创建过程</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>产品必须有共同点，范围有限制</li>\n<li>如果产品内部变化复杂，可能会导致需要定义很多具体建造者类</li>\n</ol>\n<h2 id=\"与抽象工厂模式的区别\"><a href=\"#与抽象工厂模式的区别\" class=\"headerlink\" title=\"与抽象工厂模式的区别\"></a>与抽象工厂模式的区别</h2><p>建造者模式与抽象工厂模式的主要区别：</p>\n<ol>\n<li>建造者模式更注重方法的调用顺序，而抽象工厂模式注重产品族的创建</li>\n<li>建造者模式可以更精细地控制产品的创建过程，而抽象工厂模式一般用来创建一系列相关的对象</li>\n<li>建造者模式通常需要更多的代码量，但是会有更好的灵活性</li>\n</ol>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>建造者模式在Java开发中的应用：</p>\n<ol>\n<li>StringBuilder类的实现</li>\n<li>Lombok的@Builder注解</li>\n<li>Spring框架中的BeanDefinitionBuilder</li>\n<li>MyBatis框架中的SqlSessionFactoryBuilder</li>\n</ol>\n","feature":true,"text":"模式定义建造者模式(Builder Pattern)是一种创建型设计模式，它允许你分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。1...","permalink":"/post/设计模式-建造者模式","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"建造者模式","slug":"建造者模式","count":1,"path":"api/tags/建造者模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">模式结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与抽象工厂模式的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">实际应用</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"设计模式-桥接模式","uid":"8a95a847ba41df9a0cdac0faf9ed7ebe","slug":"设计模式-桥接模式","date":"2025-04-29T14:11:58.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-桥接模式.json","keywords":null,"cover":null,"text":"模式定义桥接模式（Bridge Pattern）是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们都可以独立地变化。这种模式通过组合的方式，将类的抽象与...","permalink":"/post/设计模式-桥接模式","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"桥接模式","slug":"桥接模式","count":1,"path":"api/tags/桥接模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"设计模式-抽象工厂模式","uid":"3e408f42174f172f57057703c67ff561","slug":"设计模式-抽象工厂模式","date":"2025-04-29T13:40:04.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-抽象工厂模式.json","keywords":null,"cover":null,"text":"模式定义抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的...","permalink":"/post/设计模式-抽象工厂模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"抽象工厂模式","slug":"抽象工厂模式","count":1,"path":"api/tags/抽象工厂模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}