{"title":"设计模式-适配器模式","uid":"27aab0825c321448b30acc595fc9bf6c","slug":"设计模式-适配器模式","date":"2025-05-01T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-适配器模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。<mcreference link=\"https://refactoringguru.cn/design-patterns/adapter\" index=\"1\">1</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>适配器模式适用于以下场景：</p>\n<ol>\n<li>当需要使用一个已存在的类，但其接口与你的需求不匹配时</li>\n<li>当需要创建一个可复用的类，该类可以与其他不相关或不可预见的类协同工作</li>\n<li>当需要使用一些已存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口时</li>\n<li>当对象适配器需要适配多个被适配类时</li>\n</ol>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p>适配器模式包含以下角色：</p>\n<ol>\n<li>Target（目标接口）：客户端所期望的接口</li>\n<li>Adaptee（被适配者）：需要被适配的类或接口</li>\n<li>Adapter（适配器）：将被适配者的接口转换为目标接口</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是一个简单的适配器模式示例，通过适配器模式来适配不同的支付方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Payment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">pay</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被适配者 - 支付宝支付（假设这是一个已存在的类，我们无法修改）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AliPay</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aliPayment</span><span class=\"params\">(<span class=\"type\">double</span> money)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用支付宝支付：&quot;</span> + money + <span class=\"string\">&quot;元&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 被适配者 - 微信支付（假设这是一个已存在的类，我们无法修改）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeChatPay</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wechatPay</span><span class=\"params\">(<span class=\"type\">double</span> fee)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用微信支付：&quot;</span> + fee + <span class=\"string\">&quot;元&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 适配器 - 支付宝支付适配器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AliPayAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Payment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AliPay aliPay;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AliPayAdapter</span><span class=\"params\">(AliPay aliPay)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.aliPay = aliPay;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pay</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">        aliPay.aliPayment(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 适配器 - 微信支付适配器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeChatPayAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Payment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WeChatPay weChatPay;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeChatPayAdapter</span><span class=\"params\">(WeChatPay weChatPay)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.weChatPay = weChatPay;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pay</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> &#123;</span><br><span class=\"line\">        weChatPay.wechatPay(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建被适配者对象</span></span><br><span class=\"line\">        <span class=\"type\">AliPay</span> <span class=\"variable\">aliPay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliPay</span>();</span><br><span class=\"line\">        <span class=\"type\">WeChatPay</span> <span class=\"variable\">weChatPay</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeChatPay</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建适配器对象</span></span><br><span class=\"line\">        <span class=\"type\">Payment</span> <span class=\"variable\">aliPayAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AliPayAdapter</span>(aliPay);</span><br><span class=\"line\">        <span class=\"type\">Payment</span> <span class=\"variable\">weChatPayAdapter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeChatPayAdapter</span>(weChatPay);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用适配器进行支付</span></span><br><span class=\"line\">        aliPayAdapter.pay(<span class=\"number\">100</span>);</span><br><span class=\"line\">        weChatPayAdapter.pay(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类</li>\n<li>增加了类的透明性和复用性</li>\n<li>提高了代码的可扩展性和灵活性</li>\n<li>符合开闭原则</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>适配器模式可能会增加系统的复杂性</li>\n<li>使用对象适配器时，需要额外的引用来适配被适配者</li>\n<li>过多使用适配器会使系统变得凌乱</li>\n</ol>\n<h2 id=\"适配器模式的两种实现方式\"><a href=\"#适配器模式的两种实现方式\" class=\"headerlink\" title=\"适配器模式的两种实现方式\"></a>适配器模式的两种实现方式</h2><p>在Java中，适配器模式有两种实现方式：</p>\n<ol>\n<li><p>类适配器（Class Adapter）：</p>\n<ul>\n<li>通过继承被适配者来实现适配</li>\n<li>使用Java的继承机制</li>\n<li>只能适配一个被适配者类</li>\n<li>可以重写被适配者的方法</li>\n</ul>\n</li>\n<li><p>对象适配器（Object Adapter）：</p>\n<ul>\n<li>通过组合的方式来实现适配</li>\n<li>使用Java的对象组合</li>\n<li>可以适配多个被适配者类</li>\n<li>只能使用被适配者的公有方法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>适配器模式在Java开发中的应用：</p>\n<ol>\n<li>Java IO中的InputStreamReader和OutputStreamWriter</li>\n<li>Spring AOP中的AdvisorAdapter接口</li>\n<li>Spring MVC中的HandlerAdapter接口</li>\n<li>JDBC中的数据库驱动适配</li>\n</ol>\n","feature":true,"text":"模式定义适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。适配器模式让那些接口不兼容的类可以...","permalink":"/post/设计模式-适配器模式","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"适配器模式","slug":"适配器模式","count":1,"path":"api/tags/适配器模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">模式结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">适配器模式的两种实现方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">实际应用</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"设计模式-原型模式","uid":"ba36f7fdf24221629f84d123d60f7a05","slug":"设计模式-原型模式","date":"2025-04-30T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-原型模式.json","keywords":null,"cover":null,"text":"模式定义原型模式（Prototype Pattern）是一种创建型设计模式，它允许你复制已有对象，而无需使代码依赖它们所属的类。该模式通过克隆现有对象来创建新对...","permalink":"/post/设计模式-原型模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"原型模式","slug":"原型模式","count":1,"path":"api/tags/原型模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}