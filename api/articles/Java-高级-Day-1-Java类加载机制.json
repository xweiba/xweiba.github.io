{"title":"Java-高级-Day-1-Java类加载机制","uid":"13d951f30d32eed0580b85046fce3923","slug":"Java-高级-Day-1-Java类加载机制","date":"2025-04-14T03:14:36.000Z","updated":"2025-04-30T08:11:18.852Z","comments":true,"path":"api/articles/Java-高级-Day-1-Java类加载机制.json","keywords":null,"cover":[],"content":"<h1 id=\"核心点\"><a href=\"#核心点\" class=\"headerlink\" title=\"核心点\"></a>核心点</h1><h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li><p>引导类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如 <code>rt.jar</code> 、<code>charsets.jar</code> 等</p>\n</li>\n<li><p>扩展类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的 <code>ext</code> 扩展目录中的JAR类包</p>\n</li>\n<li><p>应用程序类加载器：负责加载 <code>ClassPath</code> 路径下的类包，主要就是加载你自己写的那些类</p>\n</li>\n<li><p>自定义加载器：负责加载用户自定义路径下的类包</p>\n</li>\n</ul>\n<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><ol>\n<li>双亲委派机制：<strong>先找父类的类加载器加载，找不到再有自己加载</strong>。<ul>\n<li>沙箱安全机制，自己写的 <code>java.lang.String.class</code> 类不会被加载，这样便可以防止核心API库被随意篡改。</li>\n<li>避免类的重复加载：当父亲已经加载了该类时，就没有必要子 <code>ClassLoader</code> 再加载一次，保证<strong>被加载类的唯一性</strong>。</li>\n</ul>\n</li>\n<li>全盘负责委托机制：当一个 <code>ClassLoder</code> 装载一个类时，除非显示的使用另外一个 <code>ClassLoder</code> ，该类所依赖及引用的类也由这个 <code>ClassLoder</code> 载入。</li>\n<li>自定义类加载器：只需要继承 <code>java.lang.ClassLoader</code> 类，该类有两个方法：<ul>\n<li><code>loadClass(String, boolean)</code> 默认实现了双亲委派，打破双亲委派就需要重写它。</li>\n<li><code>findClass(String name)</code> 默认空，可自定义它来实现网络加载或其他方式加载类。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Tomcat-类加载\"><a href=\"#Tomcat-类加载\" class=\"headerlink\" title=\"Tomcat 类加载\"></a>Tomcat 类加载</h2><ol>\n<li>打破双亲委派机制，实现不同web容器的类库资源隔离。</li>\n<li>tomcat的几个主要类加载器：<ul>\n<li><code>commonLoader</code>: Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个<code>Webapp</code>访问。</li>\n<li><code>catalinaLoader</code>: Tomcat容器私有的类加载器，加载路径中的class对于 <code>Webapp</code> 不可见。</li>\n<li><code>sharedLoader</code>: 各个 <code>Webapp</code> 共享的类加载器，加载路径中的class对于所有 <code>Webapp</code> 可见，但是对于Tomcat容器不可见。</li>\n<li><code>WebappClassLoader</code>: 各个 <code>Webapp</code>私有的类加载器，加载路径中的class只对当前 <code>Webapp</code> 可见，比如加载war包里相关的类，每个war包应用都有自己的 <code>WebappClassLoader</code>，实现相互隔离，比如不同war包应用引入了不同的spring版本，这样实现就能加载各自的spring版本。</li>\n<li><strong>Tomcat 7</strong> 以后合并了 <code>commonLoader</code> <code>catalinaLoader</code> <code>sharedLoader</code> 这三个类加载器，实际这三个类加载器都是同一个实例。</li>\n</ul>\n</li>\n<li>JSP 加载原理：后台启动线程监听 <code>JSP文件</code> 变化，如果变化了找到该 <code>JSP文件</code> 对应的 <code>servlet类</code>的加载器引用(<code>gcroot</code>)，重新生成新的 <code>JasperLoader</code> 加载器赋值给引用，然后加载新的<code>JSP文件</code>对应的servlet类，之前的那个加载器因为没有 <code>gcroot</code> 引用了，下一次 <code>gc</code> 的时候会被销毁。</li>\n</ol>\n<h2 id=\"类加载核心\"><a href=\"#类加载核心\" class=\"headerlink\" title=\"类加载核心\"></a>类加载核心</h2><ol>\n<li>加载：在调用类的方法，new对象时，通过类加载器，在磁盘或其他方式读取 <code>class</code> 字节码内容，并在内存中生成一个这个类对应的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据的访问入口。</li>\n<li>验证：校验字节码文件的正确性。</li>\n<li>准备：给类的静态变量分配内存，并赋予默认值，注意是对应类型的默认值，如 <code>boolean</code> 默认 <code>false</code>, 数值类型为 <code>0</code>, char 为空字符 <code>\\u0000</code>，不是代码中硬编码的值。</li>\n<li>解析：分为静态链接和动态链接两个部分，加载时只执行静态链接。<ol>\n<li>静态链接，将符号引用如 <code>main()</code> 方法，替换为指向数据所存内存的指针或句柄等(直接引用)，<strong>将符号引用替换为直接引用, 这个转换过程称为静态链接，在类加载期间完成</strong>。<ol>\n<li>符号引用：一种与虚拟机内存布局无关的引用形式，可以是任何形式的字面量，只要能无歧义地定位到目标即可，在编译阶段生成，保存在class文件的常量池中。具体来说，符号引用可以包括<ul>\n<li>类和接口的全限定名（Fully Qualified Name）</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul>\n</li>\n<li>直接引用具体包括：<ul>\n<li>直接指向目标的指针</li>\n<li>相对偏移量</li>\n<li>能间接定位到目标的句柄</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>动态链接，它在运行时解析，核心特点：<ol>\n<li>运行时解析 ：在程序运行期间（而非类加载期间）将符号引用替换为直接引用</li>\n<li>支持多态 ：是实现Java多态特性的基础机制</li>\n<li>延迟绑定 ：方法调用的具体实现直到运行时才确定</li>\n<li>动态链接的具体表现：<ul>\n<li>虚方法调用 ：当调用一个可能被子类重写的方法时，JVM会在运行时确定实际要调用的方法实现</li>\n<li>接口方法调用 ：接口方法的实现也是在运行时动态确定的</li>\n<li>反射调用 ：通过反射API调用的方法都是动态解析的</li>\n</ul>\n</li>\n<li>动态链接的实现原理：<ul>\n<li>每个类的方法区中维护一个 虚方法表（vtable）</li>\n<li>虚方法调用时，JVM会：<ul>\n<li>查找对象的实际类型</li>\n<li>通过虚方法表找到正确的方法实现</li>\n<li>将符号引用替换为直接引用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>动态链接的优势：<ul>\n<li>支持面向对象的多态特性</li>\n<li>提高代码的扩展性和灵活性</li>\n<li>允许热替换等高级特性</li>\n</ul>\n</li>\n<li>动态链接的代价:<ul>\n<li>比静态链接有更高的运行时开销</li>\n<li>需要维护额外的元数据（如虚方法表）</li>\n<li>可能影响JIT优化的效果</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>初始化：对类的静态变量初始化为硬编码的值，执行静态代码块。</li>\n</ol>\n<h2 id=\"类被加载到方法区中后主要包含\"><a href=\"#类被加载到方法区中后主要包含\" class=\"headerlink\" title=\"类被加载到方法区中后主要包含\"></a>类被加载到方法区中后主要包含</h2><ol>\n<li>运行时常量池</li>\n<li>类型信息</li>\n<li>字段信息</li>\n<li>方法信息</li>\n<li>类加载器的引用：这个类到类加载器实例的引用</li>\n<li>对应class实例的引用：类加载器在加载类信息放到方法区中后，会创建一个对应的 <code>java.lang.Class</code> 类型的对象实例放到堆(Heap)中, 作为开发人员访问方法区中类定义的入口和切入点。</li>\n</ol>\n<h1 id=\"详细解析\"><a href=\"#详细解析\" class=\"headerlink\" title=\"详细解析\"></a>详细解析</h1><h2 id=\"类加载运行全过程\"><a href=\"#类加载运行全过程\" class=\"headerlink\" title=\"类加载运行全过程\"></a>类加载运行全过程</h2><p>当我们用java命令运行某个类的main函数启动程序时，首先需要通过<strong>类加载器</strong>把主类加载到JVM。</p>\n<p><strong>通过Java命令执行代码的大体流程如下：</strong></p>\n<img src=\"/post/Java-%E9%AB%98%E7%BA%A7-Day-1-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20250416092032000.png\" class=\"\" title=\"img\">\n\n<p>其中loadClass的类加载过程有如下几步：</p>\n<p><strong>加载 &gt;&gt; 验证 &gt;&gt; 准备 &gt;&gt; 解析 &gt;&gt; 初始化 &gt;&gt;</strong> 使用 &gt;&gt; 卸载</p>\n<ul>\n<li><p>加载：在硬盘上查找并通过IO读入字节码文件，使用到类时才会加载，例如调用类的main()方法，new对象等等，在加载阶段会在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据的访问入口</p>\n</li>\n<li><p>验证：校验字节码文件的正确性</p>\n</li>\n<li><p>准备：给类的静态变量分配内存，并赋予默认值</p>\n</li>\n<li><p>解析：将<strong>符号引用</strong>替换为直接引用，该阶段会把一些静态方法(符号引用，比如main()方法)替换为指向数据所存内存的指针或句柄等(直接引用)，这是所谓的<strong>静态链接</strong>过程(类加载期间完成)，<strong>动态链接</strong>是在程序运行期间完成的将符号引用替换为直接引用</p>\n</li>\n<li><p><strong>初始化</strong>：对类的静态变量初始化为指定的值，执行静态代码块</p>\n</li>\n</ul>\n<img src=\"/post/Java-%E9%AB%98%E7%BA%A7-Day-1-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/image-20250416092201289.png\" class=\"\" title=\"img\">\n\n<p>类被加载到方法区中后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应class实例的引用</strong>等信息。</p>\n<p><strong>类加载器的引用</strong>：这个类到类加载器实例的引用</p>\n<p><strong>对应class实例的引用</strong>：类加载器在加载类信息放到方法区中后，会创建一个对应的Class 类型的对象实例放到堆(Heap)中, 作为开发人员访问方法区中类定义的入口和切入点。</p>\n<p><strong>注意，</strong>主类在运行过程中如果使用到其它类，会逐步加载这些类。</p>\n<p>jar包或war包里的类不是一次性全部加载的，是使用到时才加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDynamicLoad</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************load TestDynamicLoad************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************load test************&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;  <span class=\"comment\">//B不会加载，除非这里执行 new B()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************load A************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************initial A************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************load B************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*************initial B************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">*************load TestDynamicLoad************</span><br><span class=\"line\">*************load A************</span><br><span class=\"line\">*************initial A************</span><br><span class=\"line\">*************load test************</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类加载器和双亲委派机制\"><a href=\"#类加载器和双亲委派机制\" class=\"headerlink\" title=\"类加载器和双亲委派机制\"></a>类加载器和双亲委派机制</h2><p>上面的类加载过程主要是通过类加载器来实现的，看一个<strong>类加载器</strong>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestJDKClassLoader</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">        System.out.println(com.sun.crypto.provider.DESKeyFactory.class.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(TestJDKClassLoader.class.getClassLoader().getClass().getName());</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">appClassLoader</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">extClassloader</span> <span class=\"operator\">=</span> appClassLoader.getParent();</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">bootstrapLoader</span> <span class=\"operator\">=</span> extClassloader.getParent();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the bootstrapLoader : &quot;</span> + bootstrapLoader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the extClassloader : &quot;</span> + extClassloader);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;the appClassLoader : &quot;</span> + appClassLoader);</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bootstrapLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        URL[] urls = Launcher.getBootstrapClassPath().getURLs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; urls.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(urls[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;extClassloader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.ext.dirs&quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;appClassLoader加载以下文件：&quot;</span>);</span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">运行结果：</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\">sun.misc.Launcher$ExtClassLoader</span><br><span class=\"line\">sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"> </span><br><span class=\"line\">the bootstrapLoader : <span class=\"literal\">null</span></span><br><span class=\"line\">the extClassloader : sun.misc.Launcher$ExtClassLoader@<span class=\"number\">3764951d</span></span><br><span class=\"line\">the appClassLoader : sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class=\"line\"> </span><br><span class=\"line\">bootstrapLoader加载以下文件：</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/resources.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/rt.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/sunrsasign.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/jsse.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/jce.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/charsets.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/lib/jfr.jar</span><br><span class=\"line\">file:/D:/dev/Java/jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>/jre/classes</span><br><span class=\"line\"> </span><br><span class=\"line\">extClassloader加载以下文件：</span><br><span class=\"line\">D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext;C:\\Windows\\Sun\\Java\\lib\\ext</span><br><span class=\"line\"> </span><br><span class=\"line\">appClassLoader加载以下文件：</span><br><span class=\"line\">D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\charsets.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\deploy.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\access-bridge-<span class=\"number\">64.</span>jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\cldrdata.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\dnsns.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\jaccess.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\jfxrt.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\localedata.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\nashorn.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\sunec.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\sunjce_provider.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\sunmscapi.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\sunpkcs11.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\ext\\zipfs.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\javaws.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\jce.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\jfr.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\jfxswt.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\jsse.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\management-agent.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\plugin.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\resources.jar;D:\\dev\\Java\\jdk1<span class=\"number\">.8</span><span class=\"number\">.0_45</span>\\jre\\lib\\rt.jar;D:\\ideaProjects\\project-all\\target\\classes;C:\\Users\\zhuge\\.m2\\repository\\org\\apache\\zookeeper\\zookeeper\\<span class=\"number\">3.4</span><span class=\"number\">.12</span>\\zookeeper-<span class=\"number\">3.4</span><span class=\"number\">.12</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\org\\slf4j\\slf4j-api\\<span class=\"number\">1.7</span><span class=\"number\">.25</span>\\slf4j-api-<span class=\"number\">1.7</span><span class=\"number\">.25</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\org\\slf4j\\slf4j-log4j12\\<span class=\"number\">1.7</span><span class=\"number\">.25</span>\\slf4j-log4j12-<span class=\"number\">1.7</span><span class=\"number\">.25</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\log4j\\log4j\\<span class=\"number\">1.2</span><span class=\"number\">.17</span>\\log4j-<span class=\"number\">1.2</span><span class=\"number\">.17</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\jline\\jline\\<span class=\"number\">0.9</span><span class=\"number\">.94</span>\\jline-<span class=\"number\">0.9</span><span class=\"number\">.94</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\org\\apache\\yetus\\audience-annotations\\<span class=\"number\">0.5</span><span class=\"number\">.0</span>\\audience-annotations-<span class=\"number\">0.5</span><span class=\"number\">.0</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\io\\netty\\netty\\<span class=\"number\">3.10</span><span class=\"number\">.6</span>.Final\\netty-<span class=\"number\">3.10</span><span class=\"number\">.6</span>.Final.jar;C:\\Users\\zhuge\\.m2\\repository\\com\\google\\guava\\guava\\<span class=\"number\">22.0</span>\\guava-<span class=\"number\">22.0</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\com\\google\\code\\findbugs\\jsr305\\<span class=\"number\">1.3</span><span class=\"number\">.9</span>\\jsr305-<span class=\"number\">1.3</span><span class=\"number\">.9</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\com\\google\\errorprone\\error_prone_annotations\\<span class=\"number\">2.0</span><span class=\"number\">.18</span>\\error_prone_annotations-<span class=\"number\">2.0</span><span class=\"number\">.18</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\com\\google\\j2objc\\j2objc-annotations\\<span class=\"number\">1.1</span>\\j2objc-annotations-<span class=\"number\">1.1</span>.jar;C:\\Users\\zhuge\\.m2\\repository\\org\\codehaus\\mojo\\animal-sniffer-annotations\\<span class=\"number\">1.14</span>\\animal-sniffer-annotations-<span class=\"number\">1.14</span>.jar;D:\\dev\\IntelliJ IDEA <span class=\"number\">2018.3</span><span class=\"number\">.2</span>\\lib\\idea_rt.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类加载器初始化过程\"><a href=\"#类加载器初始化过程\" class=\"headerlink\" title=\"类加载器初始化过程\"></a>类加载器初始化过程</h2><p>参见类运行加载全过程图可知其中会创建JVM启动器实例 <code>sun.misc.Launcher</code>。</p>\n<p>在Launcher构造方法内部，其创建了两个类加载器，分别是 <code>sun.misc.Launcher.ExtClassLoader</code> (扩展类加载器)和 <code>sun.misc.Launcher.AppClassLoader</code> (应用类加载器)。</p>\n<p>JVM默认使用Launcher的 <code>getClassLoader()</code> 方法返回的类加载器 <code>AppClassLoader</code> 的实例加载我们的应用程序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Launcher的构造方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Launcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Launcher.ExtClassLoader var1;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造扩展类加载器，在构造的过程中将其父加载器设置为null</span></span><br><span class=\"line\">        var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var10) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create extension class loader&quot;</span>, var10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造应用类加载器，在构造的过程中将其父加载器设置为ExtClassLoader，</span></span><br><span class=\"line\">        <span class=\"comment\">//Launcher的loader属性值是AppClassLoader，我们一般都是用这个类加载器来加载我们自己写的应用程序</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var9) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalError</span>(<span class=\"string\">&quot;Could not create application class loader&quot;</span>, var9);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Thread.currentThread().setContextClassLoader(<span class=\"built_in\">this</span>.loader);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;java.security.manager&quot;</span>);</span><br><span class=\"line\">    。。。 。。。 <span class=\"comment\">//省略一些不需关注代码</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><img src=\"/post/Java-%E9%AB%98%E7%BA%A7-Day-1-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/102278.png\" class=\"\" title=\"img\">\n\n<p>机制逻辑: <strong>先找父类的类加载器加载，找不到再有自己加载</strong></p>\n<p>为什么要有双亲委派?</p>\n<ul>\n<li>沙箱安全机制：自定义的 <code>java.lang.String.class</code> 类不会被加载，防止核心类库被修改。</li>\n<li>避免类的重复加载：当父亲已经加载了该类时，就没有必要子 <code>ClassLoader</code> 再加载一次，保证<strong>被加载类的唯一性</strong>。</li>\n</ul>\n<p><strong>全盘委托机制</strong></p>\n<p>当一个 <code>ClassLoder</code> 装载一个类时，除非显示的使用另外一个 <code>ClassLoder</code>，该类所依赖及引用的类也由这个 <code>ClassLoder</code>载入。</p>\n<p><strong>自定义类加载器示例</strong></p>\n<p>继承 <code>java.lang.ClassLoader</code> 类，该类有两个核心方法，一个是 <code>loadClass(String, boolean)</code>，实现了<strong>双亲委派机制</strong>，还有一个方法是 <code>findClass</code>，默认实现是空方法，所以我们自定义类加载器主要是 <strong>重写<code>findClass</code>方法</strong>。</p>\n<p><strong>打破双亲委派机制</strong></p>\n<p>**重写 <code>loadClass(String, boolean)</code> ** 即可</p>\n<h2 id=\"Tomcat-类加载机制\"><a href=\"#Tomcat-类加载机制\" class=\"headerlink\" title=\"Tomcat 类加载机制\"></a>Tomcat 类加载机制</h2><img src=\"/post/Java-%E9%AB%98%E7%BA%A7-Day-1-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/102281.png\" class=\"\" title=\"img\">\n\n<ul>\n<li>打破了双亲委派机制，因为他的不同war包需要在同一个 JVM 中实现隔离。</li>\n<li>同一个JVM内，两个相同包名和类名的类对象可以共存，因为他们的类加载器可以不一样，所以看两个类对象是否是同一个，除了看类的包名和类名是否都相同之外，还需要他们的类加载器也是同一个才能认为他们是同一个。</li>\n<li><code>JasperLoader</code> 热加载原理： 后台启动线程监听jsp文件变化，如果变化了找到该jsp对应的servlet类的加载器引用(gcroot)，重新生成新的<strong>JasperLoader</strong>加载器赋值给引用，然后加载新的jsp对应的servlet类，之前的那个加载器因为没有gcroot引用了，下一次gc的时候会被销毁。</li>\n</ul>\n<h1 id=\"Hotspot源码JVM启动执行main方法流程\"><a href=\"#Hotspot源码JVM启动执行main方法流程\" class=\"headerlink\" title=\"Hotspot源码JVM启动执行main方法流程\"></a>Hotspot源码JVM启动执行main方法流程</h1><img src=\"/post/Java-%E9%AB%98%E7%BA%A7-Day-1-Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/106918.png\" class=\"\" title=\"img\">","feature":true,"text":"核心点类加载器 引导类加载器：负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如 rt.jar 、charsets.jar 等 扩展类加载器：负责...","permalink":"/post/Java-高级-Day-1-Java类加载机制","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E7%82%B9\"><span class=\"toc-text\">核心点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">类加载器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">类加载机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat-%E7%B1%BB%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">Tomcat 类加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">类加载核心</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E8%A2%AB%E5%8A%A0%E8%BD%BD%E5%88%B0%E6%96%B9%E6%B3%95%E5%8C%BA%E4%B8%AD%E5%90%8E%E4%B8%BB%E8%A6%81%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">类被加载到方法区中后主要包含</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">详细解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%90%E8%A1%8C%E5%85%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">类加载运行全过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">类加载器和双亲委派机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">类加载器初始化过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">双亲委派机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Tomcat 类加载机制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Hotspot%E6%BA%90%E7%A0%81JVM%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8Cmain%E6%96%B9%E6%B3%95%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Hotspot源码JVM启动执行main方法流程</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java-高级-Day-2-JVM 内存分配","uid":"8f3910e39f3a3511dc34dd9ac8d25e0b","slug":"Java-高级-Day-2-JVM内存分配","date":"2025-04-23T03:13:38.000Z","updated":"2025-04-30T08:11:18.854Z","comments":true,"path":"api/articles/Java-高级-Day-2-JVM内存分配.json","keywords":null,"cover":[],"text":"核心点图示：颜色相同的都为一个类型 线程 程序计数器：记录当前线程正在执行的字节码指令的地址，是每个线程私有的，它的大小是4 个字节，固定的，不会随着操作系统的...","permalink":"/post/Java-高级-Day-2-JVM内存分配","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Java-Day","slug":"Java-Day","count":5,"path":"api/tags/Java-Day.json"},{"name":"Java-高级-Day","slug":"Java-高级-Day","count":5,"path":"api/tags/Java-高级-Day.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"RocketMQ找不到Broker节点","uid":"b90ec19b312a987f799746f7eb908d56","slug":"RocketMQ找不到Broker节点","date":"2023-05-12T16:32:35.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/RocketMQ找不到Broker节点.json","keywords":null,"cover":null,"text":"RocketMQ找不到Broker节点1234567vim /app/rocketmq/4.9.1/conf/broker.conf# 添加ip信息namesr...","permalink":"/post/RocketMQ找不到Broker节点","photos":[],"count_time":{"symbolsCount":285,"symbolsTime":"1 mins."},"categories":[{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/categories/RocketMQ.json"}],"tags":[{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/tags/RocketMQ.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}