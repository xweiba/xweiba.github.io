{"title":"SpringMVC 整合 memcached","uid":"e5e16181cb838f43f9740a90072d7812","slug":"Spring MVC 整合memcached ","date":"2018-05-19T04:40:33.000Z","updated":"2025-04-30T08:11:18.863Z","comments":true,"path":"api/articles/Spring MVC 整合memcached .json","keywords":null,"cover":[],"content":"<h2 id=\"今天完成的事情\"><a href=\"#今天完成的事情\" class=\"headerlink\" title=\"今天完成的事情\"></a>今天完成的事情</h2><ul>\n<li>完成Spring MVC memcachede 融合</li>\n</ul>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><ol>\n<li>memcachede只缓存数据, 所以我们只需要在<code>service 层</code> 的实现中添加对应的缓存即可.</li>\n</ol>\n<ul>\n<li>原接口添加缓存<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserCustom <span class=\"title function_\">findUserById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找缓存</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> MemcacheUtils.get(<span class=\"string\">&quot;user&quot;</span> + id);</span><br><span class=\"line\">    <span class=\"comment\">// 当存在缓存时直接返回缓存数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (UserCustom) object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">UserCustom</span> <span class=\"variable\">userCustom</span> <span class=\"operator\">=</span> userDao.findUserById(id);</span><br><span class=\"line\">    <span class=\"comment\">// 当缓存为空时 添加 memcached 缓存</span></span><br><span class=\"line\">    MemcacheUtils.set(<span class=\"string\">&quot;user&quot;</span> + id, userCustom);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userCustom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(User user)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入成功后返回的值存入了user的id中</span></span><br><span class=\"line\">    userDao.insertUser(user);</span><br><span class=\"line\">    <span class=\"comment\">// 写入缓存 这里使用add 当 key(id)存在时, 不写入缓存</span></span><br><span class=\"line\">    MemcacheUtils.add(<span class=\"string\">&quot;user&quot;</span> + user.getId(), user);</span><br><span class=\"line\">    <span class=\"comment\">//所以返回user的id值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user.getId();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(UserCustom userCustom, Integer id)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    userCustom.setId(id);</span><br><span class=\"line\">    <span class=\"comment\">// 写入缓存 这里使用replace, 当key(id)不存在时, 不写入缓存</span></span><br><span class=\"line\">    MemcacheUtils.replace(<span class=\"string\">&quot;user&quot;</span> + id, userCustom);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userDao.updateUser(userCustom);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Integer i)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 删除缓存</span></span><br><span class=\"line\">    MemcacheUtils.delete(String.valueOf(i));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userDao.deleteUser(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">findAuth</span><span class=\"params\">(Auth auth)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 密码验证的就不做缓存了</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> authDao.findAuth(auth);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>测试 查找数据, 第一次从数据库中查询并将值存入到缓存, 第二次直接从缓存获取<br><img src=\"https://note.youdao.com/yws/public/resource/57891bc9ca8b961d3711858d81d17913/xmlnote/3DD4B0570A2F47CDA27DCE30C62B313D/1001\" alt=\"image\"><br><img src=\"https://note.youdao.com/yws/public/resource/57891bc9ca8b961d3711858d81d17913/xmlnote/BFBB823ED53C482A94FF9C98EC053879/988\" alt=\"image\"><br><img src=\"https://note.youdao.com/yws/public/resource/57891bc9ca8b961d3711858d81d17913/xmlnote/3747942646F746AF8B817A68CE94A50C/997\" alt=\"image\"></li>\n<li>测试 更新数据, 再次获取, 直接从缓存中获取更新过的数据<br><img src=\"https://note.youdao.com/yws/public/resource/57891bc9ca8b961d3711858d81d17913/xmlnote/4506D4F0AF334374A3549A152CC81C3E/1007\" alt=\"image\"><br><img src=\"https://note.youdao.com/yws/public/resource/57891bc9ca8b961d3711858d81d17913/xmlnote/BFBD790007F0485AABE2EC5AD25DF931/1013\" alt=\"image\"></li>\n</ul>\n<ol start=\"2\">\n<li>创建缓存api接口 <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jnshu.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jnshu.model.UserCustom;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jnshu.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jnshu.tools.MemcacheUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.whalin.MemCached.MemCachedClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@program</span>: taskTwo</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: MemCache 缓存接口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Mr.xweiba</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span>: 2018-05-19 00:06</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/memcache&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemCacheController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MemCacheController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 获取key为id的user缓存</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>: [key]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>: java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Author</span>: Mr.Wang</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Date</span>: 2018/5/19</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/api/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">findByKey</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String key)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;key must not be empty or null!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.get(<span class=\"string\">&quot;user&quot;</span> + key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 缓存更新接口 当key不存在时取消更新</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>: [key, userCustom] 键. 值</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>: boolean</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Author</span>: Mr.Wang</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Date</span>: 2018/5/19</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/api/&#123;id&#125;&quot;, method = RequestMethod.POST, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">updateByKey</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String key, <span class=\"meta\">@RequestBody</span> UserCustom userCustom)</span>&#123;</span><br><span class=\"line\">        userCustom.setId(Integer.valueOf(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.replace(<span class=\"string\">&quot;user&quot;</span> + key, userCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 增加缓存数据 当键存在时取消存入</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>: [key, userCustom] 键, 值 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>: java.lang.Boolean </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Author</span>: Mr.Wang </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Date</span>: 2018/5/19 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/api/&#123;id&#125;&quot;, method = RequestMethod.PUT, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String key, <span class=\"meta\">@RequestBody</span> UserCustom userCustom)</span>&#123;</span><br><span class=\"line\">        System.out.println(userCustom.toString());</span><br><span class=\"line\">        userCustom.setId(Integer.valueOf(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.add(<span class=\"string\">&quot;user&quot;</span> + key, userCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span>: 删除指定key </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Param</span>: [key] </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>: java.lang.Boolean </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Author</span>: Mr.Wang </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Date</span>: 2018/5/19 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/api/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">deleteByKey</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String key)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.delete(<span class=\"string\">&quot;user&quot;</span> + key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span>: 清除缓存中的所有键值对</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Param</span>: []</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>: boolean</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span>: Mr.Wang</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span>: 2018/5/19</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/api/all&quot;, method = RequestMethod.DELETE)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">flashAll</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.flashAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>测试</li>\n<li></li>\n</ul>\n<h2 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h2><ol>\n<li>中文json数据插入后乱码</li>\n</ol>\n<ul>\n<li>接收方法添加接收字符类型  <code>produces = &quot;application/json; charset=utf-8&quot;</code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/api/&#123;id&#125;&quot;, method = RequestMethod.PUT, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String key, <span class=\"meta\">@RequestBody</span> UserCustom userCustom)</span>&#123;</span><br><span class=\"line\">        System.out.println(userCustom.toString());</span><br><span class=\"line\">        userCustom.setId(Integer.valueOf(key));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MemcacheUtils.add(<span class=\"string\">&quot;user&quot;</span> + key, userCustom);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>存储<code>对象</code>时, 报错: exception thrown while writing bytes to server on set</li>\n</ol>\n<ul>\n<li>原因: memcachede接收的对象,必须序列化, 将存储的实体类实现<code>Serializable</code>接口即可<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>将对象集合存入缓存, 取值时为空, 应该时集合序列化的问题, 还未解决</li>\n</ol>\n<h2 id=\"明日计划\"><a href=\"#明日计划\" class=\"headerlink\" title=\"明日计划\"></a>明日计划</h2><ul>\n<li>解决错误3 </li>\n<li>Nginx 负载测试</li>\n</ul>\n","text":"今天完成的事情 完成Spring MVC memcachede 融合 整合 memcachede只缓存数据, 所以我们只需要在service 层 的实现中添加对...","permalink":"/post/Spring MVC 整合memcached ","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"SpringMVC","slug":"SpringMVC","count":1,"path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","count":1,"path":"api/tags/SpringMVC.json"},{"name":"memcached","slug":"memcached","count":1,"path":"api/tags/memcached.json"},{"name":"缓存","slug":"缓存","count":2,"path":"api/tags/缓存.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8A%E5%A4%A9%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B%E6%83%85\"><span class=\"toc-text\">今天完成的事情</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88\"><span class=\"toc-text\">整合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%98%8E%E6%97%A5%E8%AE%A1%E5%88%92\"><span class=\"toc-text\">明日计划</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring 登陆验证 Session Cookie","uid":"6e888c70e455b1bb951534046563934e","slug":"Spring 登陆验证 Session Cookie","date":"2018-05-21T04:40:33.000Z","updated":"2025-04-30T08:11:18.863Z","comments":true,"path":"api/articles/Spring 登陆验证 Session Cookie.json","keywords":null,"cover":[],"text":"今日完成的事 线上项目 整合Cookie 登陆 通过 Memcached 来同步Session, 解决tomcat多开带来的Session同步问题. Memca...","permalink":"/post/Spring 登陆验证 Session Cookie","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"Spring","slug":"Spring","count":7,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"},{"name":"Cookie","slug":"Cookie","count":1,"path":"api/tags/Cookie.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot 默认配置","uid":"f35892a29aba9ce91e96954679315c25","slug":"SpringBoot 默认配置","date":"2018-02-23T04:34:21.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot 默认配置.json","keywords":null,"cover":null,"text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444...","permalink":"/post/SpringBoot 默认配置","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"配置","slug":"配置","count":8,"path":"api/tags/配置.json"},{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}