{"title":"设计模式-原型模式","uid":"ba36f7fdf24221629f84d123d60f7a05","slug":"设计模式-原型模式","date":"2025-04-30T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-原型模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>原型模式（Prototype Pattern）是一种创建型设计模式，它允许你复制已有对象，而无需使代码依赖它们所属的类。该模式通过克隆现有对象来创建新对象，而不是通过实例化的方式。<mcreference link=\"https://refactoringguru.cn/design-patterns/prototype\" index=\"1\">1</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>原型模式适用于以下场景：</p>\n<ol>\n<li>当创建对象的成本较大，且需要创建多个相似对象时</li>\n<li>当系统应该独立于产品的创建、构成和表示时</li>\n<li>当要实例化的类是在运行时刻指定时</li>\n<li>当避免创建一个与产品类层次平行的工厂类层次时</li>\n</ol>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p>原型模式包含以下角色：</p>\n<ol>\n<li>Prototype（抽象原型类）：声明一个克隆自身的接口</li>\n<li>ConcretePrototype（具体原型类）：实现克隆的具体操作</li>\n<li>Client（客户类）：让一个原型克隆自身，从而创建一个新的对象</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是一个简单的原型模式示例，通过原型模式来克隆不同类型的文档：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象原型类</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Document</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    Document <span class=\"title function_\">clone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体原型类 - Word文档</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WordDocument</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Document</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String format;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WordDocument</span><span class=\"params\">(String content, String format)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.content = content;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.format = format;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Document <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Document) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Word文档 [内容=&quot;</span> + content + <span class=\"string\">&quot;, 格式=&quot;</span> + format + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体原型类 - PDF文档</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PDFDocument</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Document</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> pageCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PDFDocument</span><span class=\"params\">(String content, <span class=\"type\">int</span> pageCount)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.content = content;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.pageCount = pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Document <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Document) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;PDF文档 [内容=&quot;</span> + content + <span class=\"string\">&quot;, 页数=&quot;</span> + pageCount + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建原型对象</span></span><br><span class=\"line\">        <span class=\"type\">WordDocument</span> <span class=\"variable\">wordDoc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WordDocument</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"string\">&quot;docx&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PDFDocument</span> <span class=\"variable\">pdfDoc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PDFDocument</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 克隆对象</span></span><br><span class=\"line\">        <span class=\"type\">Document</span> <span class=\"variable\">wordClone</span> <span class=\"operator\">=</span> wordDoc.clone();</span><br><span class=\"line\">        <span class=\"type\">Document</span> <span class=\"variable\">pdfClone</span> <span class=\"operator\">=</span> pdfDoc.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 显示原型对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原型对象：&quot;</span>);</span><br><span class=\"line\">        wordDoc.display();</span><br><span class=\"line\">        pdfDoc.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 显示克隆对象</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n克隆对象：&quot;</span>);</span><br><span class=\"line\">        wordClone.display();</span><br><span class=\"line\">        pdfClone.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>可以不耦合具体类的情况下克隆对象</li>\n<li>避免重复的初始化代码</li>\n<li>快速生成复杂对象</li>\n<li>用于生成不同状态的对象</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>对象中包含循环引用的情况下，克隆可能会很复杂</li>\n<li>实现深克隆时可能需要较为复杂的代码</li>\n</ol>\n<h2 id=\"浅克隆与深克隆\"><a href=\"#浅克隆与深克隆\" class=\"headerlink\" title=\"浅克隆与深克隆\"></a>浅克隆与深克隆</h2><p>在Java中，原型模式的实现涉及到两种克隆方式：</p>\n<ol>\n<li><p>浅克隆（Shallow Clone）：</p>\n<ul>\n<li>只复制对象本身，不复制对象中的引用类型的成员变量</li>\n<li>复制后的对象与原对象共享引用类型的成员变量</li>\n<li>实现简单，但可能存在数据安全问题</li>\n</ul>\n</li>\n<li><p>深克隆（Deep Clone）：</p>\n<ul>\n<li>复制对象本身及其引用类型的成员变量</li>\n<li>复制后的对象与原对象完全独立</li>\n<li>实现较复杂，但数据更安全</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>原型模式在Java开发中的应用：</p>\n<ol>\n<li>Java中的Object.clone()方法</li>\n<li>Spring Framework中的Bean作用域prototype</li>\n<li>对象池技术中的对象复制</li>\n<li>在需要频繁创建复杂对象的场景中使用</li>\n</ol>\n","feature":true,"text":"模式定义原型模式（Prototype Pattern）是一种创建型设计模式，它允许你复制已有对象，而无需使代码依赖它们所属的类。该模式通过克隆现有对象来创建新对...","permalink":"/post/设计模式-原型模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"原型模式","slug":"原型模式","count":1,"path":"api/tags/原型模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">模式结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%85%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B7%B1%E5%85%8B%E9%9A%86\"><span class=\"toc-text\">浅克隆与深克隆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">实际应用</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"设计模式-适配器模式","uid":"27aab0825c321448b30acc595fc9bf6c","slug":"设计模式-适配器模式","date":"2025-05-01T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-适配器模式.json","keywords":null,"cover":null,"text":"模式定义适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。适配器模式让那些接口不兼容的类可以...","permalink":"/post/设计模式-适配器模式","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"适配器模式","slug":"适配器模式","count":1,"path":"api/tags/适配器模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Mysql-事务与MVCC","uid":"3ea889d0200adbef6f577008a7289f16","slug":"Mysql-事务与MVCC","date":"2025-04-30T04:20:26.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Mysql-事务与MVCC.json","keywords":null,"cover":null,"text":"Mysql ACID 特性 原子性: 事务是最小的执行单位，不允许分割。要么全部成功，要么全部失败。 一致性: 执行事务前后，数据保持一致，例如转账业务中，无论...","permalink":"/post/Mysql-事务与MVCC","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"},{"name":"事务","slug":"事务","count":2,"path":"api/tags/事务.json"},{"name":"MVCC","slug":"MVCC","count":1,"path":"api/tags/MVCC.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}