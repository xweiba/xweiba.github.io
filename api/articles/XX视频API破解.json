{"title":"xx视频APP API破解","uid":"d4fe6d958a1faa6764824e752c175fad","slug":"XX视频API破解","date":"2022-12-22T10:51:51.000Z","updated":"2025-04-30T08:11:18.866Z","comments":true,"path":"api/articles/XX视频API破解.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>xx视频是一个在线观看视频的APP, 速度非常快, 清晰度也够看, 就是有点瑟瑟的广告, 今天闲着没事我瞅瞅他的api, 看能不能白嫖一波.</p></blockquote>\n<h1 id=\"Android-HttpCanary-抓包\"><a href=\"#Android-HttpCanary-抓包\" class=\"headerlink\" title=\"Android HttpCanary 抓包.\"></a>Android HttpCanary 抓包.</h1><p>配置好 HttpCanary 后直接抓xx视频的包, 可以获取到 API 的请求情况, 但是他的 response 是经过加密的. </p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222194502744.png\" class=\"\" title=\"image-20221222194502744\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222185610423.png\" class=\"\" title=\"image-20221222185610423\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222185549743.png\" class=\"\" title=\"image-20221222185549743\">\n\n<p>那接下来只能通过反编译 APP 来看看能不能找到解析方法.</p>\n<h1 id=\"反编译APK\"><a href=\"#反编译APK\" class=\"headerlink\" title=\"反编译APK\"></a>反编译APK</h1><p>直接丢进 jadx-gui, 很幸运, 这个 APP 好像只做了混淆处理, 直接就成功了.</p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222190714919.png\" class=\"\" title=\"image-20221222190714919\">\n\n<h2 id=\"定位请求\"><a href=\"#定位请求\" class=\"headerlink\" title=\"定位请求\"></a>定位请求</h2><p>全局搜索 <code>get_info</code>, 直接定位到 <code>BrowserApiService</code> 类, 通过这个类可以获取到所有的接口了.</p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222190910113.png\" class=\"\" title=\"image-20221222190910113\">\n\n\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222191429192.png\" class=\"\" title=\"image-20221222191429192\">\n\n<p>右键查找用例, </p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222191555696.png\" class=\"\" title=\"image-20221222191555696\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222191533818.png\" class=\"\" title=\"image-20221222191533818\">\n\n<p>好像看不出什么, 不过我看了下, 所有的接口返回的数据都是加密的, 所以估计是哪里统一做了处理. </p>\n<p>看下请求接口上有一个 <code>@FormUrlEncoded</code> 注解, 咱们来搜索一下看看是什么类库的即可进一步追踪. </p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222191742407.png\" class=\"\" title=\"image-20221222191742407\">\n\n<p>然后搜索 <code>retrofit 解密</code></p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222191806785.png\" class=\"\" title=\"image-20221222191806785\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222192518727.png\" class=\"\" title=\"image-20221222192518727\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222192526988.png\" class=\"\" title=\"image-20221222192526988\">\n\n<p>大概可以知道这个类库解密一般是通过添加 <code>Interceptor</code> 完成的. 接下来我们只需要找到这个 <code>Interceptor </code> 就可以了. </p>\n<h1 id=\"定位-Interceptor\"><a href=\"#定位-Interceptor\" class=\"headerlink\" title=\"定位 Interceptor\"></a>定位 Interceptor</h1><p>全局搜索 <code>.addInterceptor</code> , 这个是 <code>retrofit</code> 添加 <code>Interceptor</code> 的接口.</p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222192305040.png\" class=\"\" title=\"image-20221222192305040\">\n\n<p>第一个就有收获了. </p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222192337862.png\" class=\"\" title=\"image-20221222192337862\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient.<span class=\"type\">Builder</span> <span class=\"variable\">addInterceptor</span> <span class=\"operator\">=</span> RetrofitUrlManager.getInstance().with(<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>.Builder()).cookieJar(<span class=\"keyword\">new</span> <span class=\"title class_\">CookieJarImpl</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">PersistentCookieStore</span>(f4030d))).addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">CacheInterceptor</span>(f4030d)).addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">BaseInterceptor</span>(map)).sslSocketFactory(b()).hostnameVerifier(<span class=\"keyword\">new</span> <span class=\"title class_\">c</span>(<span class=\"literal\">null</span>)).addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">a</span>(<span class=\"built_in\">this</span>)).addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoggingInterceptor</span>.Builder().loggable(<span class=\"literal\">false</span>).setLevel(Level.BASIC).log(<span class=\"number\">4</span>).request(<span class=\"string\">&quot;Request&quot;</span>).response(<span class=\"string\">&quot;Response&quot;</span>).addHeader(<span class=\"string\">&quot;log-header&quot;</span>, <span class=\"string\">&quot;I am the log request header.&quot;</span>).build());</span><br><span class=\"line\">        <span class=\"type\">TimeUnit</span> <span class=\"variable\">timeUnit</span> <span class=\"operator\">=</span> TimeUnit.SECONDS;</span><br><span class=\"line\">        f4031e = addInterceptor.connectTimeout(<span class=\"number\">10L</span>, timeUnit).writeTimeout(<span class=\"number\">10L</span>, timeUnit).proxy(Proxy.NO_PROXY).connectionPool(<span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionPool</span>(<span class=\"number\">8</span>, <span class=\"number\">15L</span>, timeUnit)).build();</span><br><span class=\"line\">        f4032f = <span class=\"keyword\">new</span> <span class=\"title class_\">Retrofit</span>.Builder().client(f4031e).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava2CallAdapterFactory.create()).baseUrl(str).build();</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看解码实现\"><a href=\"#查看解码实现\" class=\"headerlink\" title=\"查看解码实现\"></a>查看解码实现</h1><p><code>response</code> 的处理一般看最后一个 <code>Interceptor</code>, 直接进去看实现, 找到 <code>chain.proceed(request)</code> 类似获取 <code>response</code> 的处理:</p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222192742167.png\" class=\"\" title=\"image-20221222192742167\">\n\n<p>看上去这个 <code>c2</code> 就是我们需要的解码结果, 点进去看看.</p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222193452741.png\" class=\"\" title=\"image-20221222193452741\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222193500470.png\" class=\"\" title=\"image-20221222193500470\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222193509855.png\" class=\"\" title=\"image-20221222193509855\">\n\n<h1 id=\"Java-复现测试\"><a href=\"#Java-复现测试\" class=\"headerlink\" title=\"Java 复现测试\"></a>Java 复现测试</h1><p>还好没有像智能公交那样使用 <code>lib</code> 库,  直接<code>java copy</code> 一下 <code>ok</code> 啦 ~~ </p>\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222194352182.png\" class=\"\" title=\"image-20221222194352182\">\n\n<img src=\"/post/XX%E8%A7%86%E9%A2%91API%E7%A0%B4%E8%A7%A3/image-20221222194402480.png\" class=\"\" title=\"image-20221222194402480\"> \n\n<p>咱们<code>PP-Utils</code> 又添加一个新能力了, 嘿嘿 </p>\n<p>接下来就是复刻他的请求了~~~</p>\n<h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>这个APP关键的视频部分通过lib加壳了, 什么时候有时间再搞搞脱壳 哈哈</p>\n","text":" xx视频是一个在线观看视频的APP, 速度非常快, 清晰度也够看, 就是有点瑟瑟的广告, 今天闲着没事我瞅瞅他的api, 看能不能白嫖一波. Android ...","permalink":"/post/XX视频API破解","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"反编译","slug":"反编译","count":1,"path":"api/categories/反编译.json"}],"tags":[{"name":"Android","slug":"Android","count":3,"path":"api/tags/Android.json"},{"name":"破解","slug":"破解","count":1,"path":"api/tags/破解.json"},{"name":"API","slug":"API","count":2,"path":"api/tags/API.json"},{"name":"视频","slug":"视频","count":1,"path":"api/tags/视频.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Android-HttpCanary-%E6%8A%93%E5%8C%85\"><span class=\"toc-text\">Android HttpCanary 抓包.</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E7%BC%96%E8%AF%91APK\"><span class=\"toc-text\">反编译APK</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">定位请求</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%BD%8D-Interceptor\"><span class=\"toc-text\">定位 Interceptor</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E8%A7%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">查看解码实现</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java-%E5%A4%8D%E7%8E%B0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">Java 复现测试</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8E%E7%BB%AD\"><span class=\"toc-text\">后续</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Flutter 环境安装","uid":"def8fa0ed0d9f0546b5cae7e4fdfe4f3","slug":"Flutter 环境安装","date":"2022-12-23T03:38:23.000Z","updated":"2025-04-30T08:11:18.840Z","comments":true,"path":"api/articles/Flutter 环境安装.json","keywords":null,"cover":null,"text":"Android SDK 及环境配置按照Android环境安装文档来就行。 环境变量FLUTTER_SDK_ROOT:D:\\resource\\Flutter\\Fl...","permalink":"/post/Flutter 环境安装","photos":[],"count_time":{"symbolsCount":222,"symbolsTime":"1 mins."},"categories":[{"name":"Flutter","slug":"Flutter","count":4,"path":"api/categories/Flutter.json"}],"tags":[{"name":"环境","slug":"环境","count":4,"path":"api/tags/环境.json"},{"name":"Flutter","slug":"Flutter","count":4,"path":"api/tags/Flutter.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"手写代码模拟Spring底层原理","uid":"e25e60e08cca60aa35b3d88aee490c5b","slug":"Spring-手写代码模拟Spring底层原理","date":"2022-12-08T07:06:03.000Z","updated":"2025-04-30T08:11:18.864Z","comments":true,"path":"api/articles/Spring-手写代码模拟Spring底层原理.json","keywords":null,"cover":null,"text":"通过 Spring 核心原理解析已经大致了解了 Bean 的创建过程, 今天来尝试手写实现一下. 实现目标 可以通过注解注入 Bean 实现通过容器的 getB...","permalink":"/post/Spring-手写代码模拟Spring底层原理","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Spring","slug":"Spring","count":7,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}