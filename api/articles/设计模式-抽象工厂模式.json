{"title":"设计模式-抽象工厂模式","uid":"3e408f42174f172f57057703c67ff561","slug":"设计模式-抽象工厂模式","date":"2025-04-29T13:40:04.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-抽象工厂模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式。<mcreference link=\"https://github.com/bytesfly/blog/blob/master/DesignPattern/factory-pattern.md\" index=\"2\">2</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>抽象工厂模式适用于以下场景：</p>\n<ol>\n<li>一个系统要独立于它的产品的创建、组合和表示时</li>\n<li>一个系统要由多个产品系列中的一个来配置时</li>\n<li>需要强调一系列相关的产品对象的设计以便进行联合使用时</li>\n<li>提供一个产品类库，只想显示它们的接口而不是实现时</li>\n</ol>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p>抽象工厂模式包含以下角色：</p>\n<ol>\n<li>AbstractFactory（抽象工厂）：声明一组用于创建产品族的方法</li>\n<li>ConcreteFactory（具体工厂）：实现抽象工厂的方法来创建具体产品</li>\n<li>AbstractProduct（抽象产品）：为一类产品声明接口</li>\n<li>ConcreteProduct（具体产品）：实现抽象产品接口</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是一个简单的抽象工厂模式示例，通过不同的工厂创建不同品牌的电子产品：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象产品A - 手机</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品A1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiPhone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用小米手机打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品A2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiPhone</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Phone</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用华为手机打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象产品B - 笔记本</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Laptop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">code</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品B1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiLaptop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Laptop</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">code</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用小米笔记本编程&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体产品B2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiLaptop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Laptop</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">code</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用华为笔记本编程&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象工厂</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ElectronicsFactory</span> &#123;</span><br><span class=\"line\">    Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Laptop <span class=\"title function_\">createLaptop</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ElectronicsFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Laptop <span class=\"title function_\">createLaptop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiLaptop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ElectronicsFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Laptop <span class=\"title function_\">createLaptop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiLaptop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ElectronicsFactory</span> <span class=\"variable\">xiaomiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">xiaomiPhone</span> <span class=\"operator\">=</span> xiaomiFactory.createPhone();</span><br><span class=\"line\">        <span class=\"type\">Laptop</span> <span class=\"variable\">xiaomiLaptop</span> <span class=\"operator\">=</span> xiaomiFactory.createLaptop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        xiaomiPhone.call();</span><br><span class=\"line\">        xiaomiLaptop.code();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">ElectronicsFactory</span> <span class=\"variable\">huaweiFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiFactory</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">huaweiPhone</span> <span class=\"operator\">=</span> huaweiFactory.createPhone();</span><br><span class=\"line\">        <span class=\"type\">Laptop</span> <span class=\"variable\">huaweiLaptop</span> <span class=\"operator\">=</span> huaweiFactory.createLaptop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        huaweiPhone.call();</span><br><span class=\"line\">        huaweiLaptop.code();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>保证了同一产品族中产品的一致性</li>\n<li>隔离了具体类的生成，使得客户端不需要知道什么被创建</li>\n<li>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>产品族扩展困难，需要修改抽象工厂的接口</li>\n<li>增加了系统的抽象性和理解难度</li>\n</ol>\n<h2 id=\"与工厂方法的区别\"><a href=\"#与工厂方法的区别\" class=\"headerlink\" title=\"与工厂方法的区别\"></a>与工厂方法的区别</h2><p>抽象工厂模式与工厂方法模式的主要区别：</p>\n<ol>\n<li>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式针对的是多个产品等级结构</li>\n<li>工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类</li>\n<li>抽象工厂模式有更大的抽象程度，适合更复杂的产品族创建场景</li>\n</ol>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><p>抽象工厂模式在Java开发中的应用：</p>\n<ol>\n<li>Java AWT和SWT中的GUI工具包</li>\n<li>Spring框架中的BeanFactory</li>\n<li>JDBC中的Connection接口的实现</li>\n</ol>\n","feature":true,"text":"模式定义抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的...","permalink":"/post/设计模式-抽象工厂模式","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"抽象工厂模式","slug":"抽象工厂模式","count":1,"path":"api/tags/抽象工厂模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">模式结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">与工厂方法的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">实际应用</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"设计模式-建造者模式","uid":"c6662e642ba385f9913bf17f12cb4f9e","slug":"设计模式-建造者模式","date":"2025-04-29T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-建造者模式.json","keywords":null,"cover":null,"text":"模式定义建造者模式(Builder Pattern)是一种创建型设计模式，它允许你分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。1...","permalink":"/post/设计模式-建造者模式","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"建造者模式","slug":"建造者模式","count":1,"path":"api/tags/建造者模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"设计模式-工厂方法模式","uid":"4bfc1f23a5ea4d5b4830c87f58680be5","slug":"设计模式-工厂方法模式","date":"2025-04-29T13:40:03.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-工厂方法模式.json","keywords":null,"cover":null,"text":"模式定义工厂方法模式(Factory Method Pattern)是一种创建型设计模式，它定义一个用于创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方...","permalink":"/post/设计模式-工厂方法模式","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"工厂方法模式","slug":"工厂方法模式","count":1,"path":"api/tags/工厂方法模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}