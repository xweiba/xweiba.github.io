{"title":"Angular中的生命周期函数","uid":"21cec739d9353f83b2ea3174a0c5b537","slug":"Angular中的生命周期函数","date":"2020-11-23T05:58:53.000Z","updated":"2025-04-30T08:11:18.831Z","comments":true,"path":"api/articles/Angular中的生命周期函数.json","keywords":null,"cover":null,"content":"<h2 id=\"5-Angular中的生命周期函数\"><a href=\"#5-Angular中的生命周期函数\" class=\"headerlink\" title=\"5.Angular中的生命周期函数\"></a><center>5.Angular中的生命周期函数</center></h2><h4 id=\"1-Angular中的生命周期函数\"><a href=\"#1-Angular中的生命周期函数\" class=\"headerlink\" title=\"1. Angular中的生命周期函数\"></a>1. Angular中的生命周期函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">生命周期函数执行顺序,从上到下</span><br><span class=\"line\"></span><br><span class=\"line\">1. ngOnChanges(): 父子组件互相传值时会触发,首次触发一定在ngOnInit()之前</span><br><span class=\"line\"></span><br><span class=\"line\">2. ngOnInit(): 初始化组件以及指令(此时dom并未完全加载),一般将请求数据的操作放到这里</span><br><span class=\"line\"></span><br><span class=\"line\">3. ngDoCheck(): 可以做一些自定义操作,来监测数据是否变化</span><br><span class=\"line\"></span><br><span class=\"line\">4. ngAfterContentInit(): 组件渲染完成后调用</span><br><span class=\"line\"></span><br><span class=\"line\">5. ngAfterContentChecked(): 在每次组件渲染完成后,可以做一些自定义操作</span><br><span class=\"line\"></span><br><span class=\"line\">6. ngAfterViewInit(): 视图加载完成,一般在这里进行dom操作</span><br><span class=\"line\"></span><br><span class=\"line\">7. ngAfterViewChecked(): 在每次视图加载完成后,可以做一些自定义操作</span><br><span class=\"line\"></span><br><span class=\"line\">8. ngOnDestroy(): 组件销毁时触发</span><br></pre></td></tr></table></figure>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>构造方法不属于生命周期函数,在构造方法中,除了对成员变量初始化之外,其他什么都不应该做</p></blockquote>\n","text":"5.Angular中的生命周期函数1. Angular中的生命周期函数1234567891011121314151617生命周期函数执行顺序,从上到下1. ng...","permalink":"/post/Angular中的生命周期函数","photos":[],"count_time":{"symbolsCount":462,"symbolsTime":"1 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"生命周期","slug":"生命周期","count":1,"path":"api/tags/生命周期.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Angular%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5.Angular中的生命周期函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Angular%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1. Angular中的生命周期函数</span></a></li></ol></li></ol></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Angular中的路由","uid":"916332084fd7dc942b98c22c9189dcf4","slug":"Angular中的路由","date":"2020-11-23T06:00:04.000Z","updated":"2025-04-30T08:11:18.831Z","comments":true,"path":"api/articles/Angular中的路由.json","keywords":null,"cover":null,"text":"7.Angular中的路由1. 路由123456789101112131415161718- 路由: 即根据不同的url地址,动态的让根组件挂载其他组件,来实现...","permalink":"/post/Angular中的路由","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"路由","slug":"路由","count":1,"path":"api/tags/路由.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Angular中在Rxjs中并行处理多个Observable","uid":"853392868a1566344a3a7642bacafe28","slug":"Angular中在Rxjs中并行处理多个Observable","date":"2020-11-23T05:58:15.000Z","updated":"2025-04-30T08:11:18.830Z","comments":true,"path":"api/articles/Angular中在Rxjs中并行处理多个Observable.json","keywords":null,"cover":null,"text":"15.Rxjs中并行处理多个Observable1. forkJoin1234567let o1 = new Observable();let o2 = new...","permalink":"/post/Angular中在Rxjs中并行处理多个Observable","photos":[],"count_time":{"symbolsCount":545,"symbolsTime":"1 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"Rxjs","slug":"Rxjs","count":1,"path":"api/tags/Rxjs.json"},{"name":"Observable","slug":"Observable","count":1,"path":"api/tags/Observable.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}