{"title":"XML 转义字符","uid":"1cb851a3d1c3d38a1164a75bed172ba4","slug":"XML 转义字符","date":"2018-07-13T05:03:35.000Z","updated":"2025-04-30T08:11:18.866Z","comments":true,"path":"api/articles/XML 转义字符.json","keywords":null,"cover":null,"content":"<p>xml 处理类</p>\n<p>在xml对象属性上添加注解: <code>@XmlJavaTypeAdapter(CollapsedStringAdapter.class)</code> 即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.enableets.edu.sdk.paper.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringEscapeUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.bind.annotation.adapters.XmlAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Html 转义字符处理, 并删除前后空格</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XMLUnescapeHtmlStringAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XmlAdapter</span>&lt;String,String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes leading and trailing whitespaces of the string</span></span><br><span class=\"line\"><span class=\"comment\">     * given as the parameter, then truncate any</span></span><br><span class=\"line\"><span class=\"comment\">     * sequnce of tab, CR, LF, and SP by a single whitespace character &#x27; &#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">unmarshal</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(text==<span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;        <span class=\"comment\">// be defensive</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> text.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// most of the texts are already in the collapsed form.</span></span><br><span class=\"line\">        <span class=\"comment\">// so look for the first whitespace in the hope that we will</span></span><br><span class=\"line\">        <span class=\"comment\">// never see it.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s&lt;len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isWhiteSpace(text.charAt(s)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            s++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==len)</span><br><span class=\"line\">            <span class=\"comment\">// the input happens to be already collapsed.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> text;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// we now know that the input contains spaces.</span></span><br><span class=\"line\">        <span class=\"comment\">// let&#x27;s sit down and do the collapsing normally.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(len <span class=\"comment\">/*allocate enough size to avoid re-allocation*/</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;s; i++ )</span><br><span class=\"line\">                result.append(text.charAt(i));</span><br><span class=\"line\">            result.append(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">inStripMode</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> s+<span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> text.charAt(i);</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> isWhiteSpace(ch);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inStripMode &amp;&amp; b)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>; <span class=\"comment\">// skip this character</span></span><br><span class=\"line\"></span><br><span class=\"line\">            inStripMode = b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inStripMode)</span><br><span class=\"line\">                result.append(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                result.append(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// remove trailing whitespaces</span></span><br><span class=\"line\">        len = result.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span> &amp;&amp; result.charAt(len - <span class=\"number\">1</span>) == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            result.setLength(len - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// whitespaces are already collapsed,</span></span><br><span class=\"line\">        <span class=\"comment\">// so all we have to do is to remove the last one character</span></span><br><span class=\"line\">        <span class=\"comment\">// if it&#x27;s a whitespace.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// tran html encoding</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> result.toString();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StringEscapeUtils.unescapeHtml(s1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * No-op.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Just return the same string given as the parameter.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">marshal</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** returns true if the specified char is a white space character. */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isWhiteSpace</span><span class=\"params\">(<span class=\"type\">char</span> ch)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// most of the characters are non-control characters.</span></span><br><span class=\"line\">        <span class=\"comment\">// so check that first to quickly return false for most of the cases.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( ch&gt;<span class=\"number\">0x20</span> )   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// other than we have to do four comparisons.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ch == <span class=\"number\">0x9</span> || ch == <span class=\"number\">0xA</span> || ch == <span class=\"number\">0xD</span> || ch == <span class=\"number\">0x20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","text":"xml 处理类 在xml对象属性上添加注解: @XmlJavaTypeAdapter(CollapsedStringAdapter.class) 即可 1234...","permalink":"/post/XML 转义字符","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"XML","slug":"XML","count":1,"path":"api/categories/XML.json"}],"tags":[{"name":"XML","slug":"XML","count":1,"path":"api/tags/XML.json"},{"name":"转义","slug":"转义","count":1,"path":"api/tags/转义.json"}],"toc":"","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"微信公众号","uid":"752ca52abe96279b156b2c1db908bcf9","slug":"微信公众号","date":"2018-07-15T05:01:28.000Z","updated":"2025-04-30T08:11:18.901Z","comments":true,"path":"api/articles/微信公众号.json","keywords":null,"cover":null,"text":"今天完成的事情：完成微信登陆认证流程, 通过opeonId 和 access_token 获取用户信息 微信公众号获取用户信息1. 获取code, 必须在微信开...","permalink":"/post/微信公众号","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"微信公众号","slug":"微信公众号","count":1,"path":"api/categories/微信公众号.json"}],"tags":[{"name":"微信公众号","slug":"微信公众号","count":1,"path":"api/tags/微信公众号.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"静态文件国际化","uid":"9c5670394144325fc272e44ad7adacbe","slug":"静态文件国际化","date":"2018-07-13T05:03:35.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/静态文件国际化.json","keywords":null,"cover":null,"text":"创建静态文件publicFile_zh_CN.jspublicFile_zh_TW.js 123456789101112131415161718192021qu...","permalink":"/post/静态文件国际化","photos":[],"count_time":{"symbolsCount":777,"symbolsTime":"1 mins."},"categories":[{"name":"国际化","slug":"国际化","count":1,"path":"api/categories/国际化.json"}],"tags":[{"name":"国际化","slug":"国际化","count":3,"path":"api/tags/国际化.json"},{"name":"静态文件","slug":"静态文件","count":1,"path":"api/tags/静态文件.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}