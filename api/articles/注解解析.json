{"title":"注解解析","uid":"223869ff70cdf67828d0a81df7754b01","slug":"注解解析","date":"2017-10-13T04:43:05.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/注解解析.json","keywords":null,"cover":null,"content":"<h2 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a>@SuppressWarnings</h2><hr>\n<h4 id=\"用于抑制编译器产生警告信息。\"><a href=\"#用于抑制编译器产生警告信息。\" class=\"headerlink\" title=\"用于抑制编译器产生警告信息。\"></a>用于抑制编译器产生警告信息。</h4><ul>\n<li>示例1——抑制单类型的警告<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addItems</span><span class=\"params\">(String item)</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">List</span> <span class=\"variable\">items</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    items.add(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>示例2——抑制多类型的警告<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(value=&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addItems</span><span class=\"params\">(String item)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">List</span> <span class=\"variable\">items</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    items.add(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>示例3——抑制所有类型的警告<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addItems</span><span class=\"params\">(String item)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">List</span> <span class=\"variable\">items</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    items.add(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">all</td>\n<td align=\"left\">抑制所有警告</td>\n</tr>\n<tr>\n<td align=\"left\">boxing</td>\n<td align=\"left\">抑制与箱&#x2F;非装箱操作相关的警告</td>\n</tr>\n<tr>\n<td align=\"left\">cast</td>\n<td align=\"left\">抑制与铸造操作相关的警告</td>\n</tr>\n<tr>\n<td align=\"left\">dep-ann</td>\n<td align=\"left\">相对于弃用的注释，抑制警告</td>\n</tr>\n<tr>\n<td align=\"left\">deprecation</td>\n<td align=\"left\">抑制相对于弃用的警告</td>\n</tr>\n<tr>\n<td align=\"left\">fallthrough</td>\n<td align=\"left\">在switch语句中，相对于缺失的中断，抑制警告</td>\n</tr>\n<tr>\n<td align=\"left\">finally</td>\n<td align=\"left\">抑制警告相对于最终阻止不返回的警告告</td>\n</tr>\n<tr>\n<td align=\"left\">hiding</td>\n<td align=\"left\">抑制相对于隐藏变量的局部的警告</td>\n</tr>\n<tr>\n<td align=\"left\">incomplete-switch</td>\n<td align=\"left\">为了在switch语句（enum案例）中抑制相对于缺失条目的警告告</td>\n</tr>\n<tr>\n<td align=\"left\">nls</td>\n<td align=\"left\">要抑制相对于非nls字符串字面量的警告</td>\n</tr>\n<tr>\n<td align=\"left\">null</td>\n<td align=\"left\">抑制null相关的警告</td>\n</tr>\n<tr>\n<td align=\"left\">rawtypes</td>\n<td align=\"left\">在类params上使用泛型时，抑制相对于非特异性类型的警告</td>\n</tr>\n<tr>\n<td align=\"left\">serial</td>\n<td align=\"left\">针对可串行化类，抑制相对于缺少serialVersionUID字段的警告</td>\n</tr>\n<tr>\n<td align=\"left\">static-access</td>\n<td align=\"left\">抑制不正确的静态访问的警告</td>\n</tr>\n<tr>\n<td align=\"left\">synthetic-access</td>\n<td align=\"left\">抑制相对于内部类的未优化访问的警告</td>\n</tr>\n<tr>\n<td align=\"left\">unchecked</td>\n<td align=\"left\">抑制相对于未检查操作的警告</td>\n</tr>\n<tr>\n<td align=\"left\">unqualified-field-access</td>\n<td align=\"left\">禁止与字段访问不合格的警告</td>\n</tr>\n<tr>\n<td align=\"left\">unused</td>\n<td align=\"left\">抑制相对于弃用的警告</td>\n</tr>\n<tr>\n<td align=\"left\">deprecation</td>\n<td align=\"left\">抑制未使用的代码的警告</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><ul>\n<li>当使用@RequestMapping URI template 样式映射时， 即 someUrl&#x2F;{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</li>\n</ul>\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><ul>\n<li>可以把Request请求header部分的值绑定到方法的参数上。</li>\n</ul>\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><ul>\n<li>可以把Request header中关于cookie的值绑定到方法的参数上。</li>\n</ul>\n<h2 id=\"MatrixVariable-矩阵变量-示例\"><a href=\"#MatrixVariable-矩阵变量-示例\" class=\"headerlink\" title=\"@MatrixVariable 矩阵变量 示例\"></a>@MatrixVariable 矩阵变量 <a href=\"https://my.oschina.net/u/1472917/blog/411827\">示例</a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//GET /owners/42;q=11/pets/21;q=22</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findPet</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">     <span class=\"meta\">@MatrixVariable(value = &quot;q&quot;,pathVar=&quot;ownerId&quot;)</span> <span class=\"type\">int</span> q1,</span></span><br><span class=\"line\"><span class=\"params\">     <span class=\"meta\">@MatrixVariable(value = &quot;q&quot;,pathVar=&quot;petId&quot;)</span> <span class=\"type\">int</span> q2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处q1&#x3D;11,q2&#x3D;22.</p>\n<h2 id=\"Autowired-与-Resource\"><a href=\"#Autowired-与-Resource\" class=\"headerlink\" title=\"@Autowired 与@Resource\"></a>@Autowired 与@Resource</h2><p>@Autowire默认按照类型装配，默认情况下它要求依赖对象必须存在如果允许为null，可以设置它required属性为false，如果我们想使用按照名称装配，可以结合@Qualifier注解一起使用; </p>\n<p>@Resource默认按照名称装配，当找不到与名称匹配的bean才会按照类型装配，可以通过name属性指定，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象.<br>注意：如果没有指定name属性，并且按照默认的名称仍然找不到依赖的对象时候，会回退到按照类型装配，但一旦指定了name属性，就只能按照名称装配了.<br>建议使用@Resource。 </p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"@Reference\"></a>@Reference</h2><p>Double 中 代表资源.</p>\n<h2 id=\"Configuration-和-Bean\"><a href=\"#Configuration-和-Bean\" class=\"headerlink\" title=\"@Configuration 和 @Bean \"></a><a href=\"https://blog.csdn.net/javaloveiphone/article/details/52182899\">@Configuration 和 @Bean </a></h2><p><code>@Configuration</code> 标注在类上，相当于把该类作为spring的xml配置文件中的 <code>&lt;beans&gt;</code> * 注意不是bean，作用为：配置spring容器(应用上下文)</p>\n<p><code>@Bean</code> 标注在方法上(返回某个实例的方法)，等价于spring的xml配置文件中的 <code>&lt;bean&gt;</code> ，作用为：注册bean对象</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a><a href=\"https://blog.csdn.net/m0_37626813/article/details/78558010\">@Component</a></h2><p>把普通pojo实例化到spring容器中，相当于配置文件中的  <bean id=\"\" class=\"\"/></p>\n<ul>\n<li>泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</li>\n<li>案例： <code>&lt;context:component-scan base-package=”com.*”&gt;</code></li>\n</ul>\n<h2 id=\"Value\"><a href=\"#Value\" class=\"headerlink\" title=\"@Value \"></a><a href=\"https://blog.csdn.net/m0_37995707/article/details/77506184\">@Value </a></h2><p>通过@Value将外部的值动态注入到Bean中. 一般使用在类的属性上.  </p>\n<p>@Value(“测试”) 或 配置文件中 @Value(“${com.neo.username}”)</p>\n<p>导入配置中的中文乱码</p>\n<p>Idea:<br>设置 <code>File Encodings</code> 的 <code>Transparent native-to-ascii conversion</code> 为 <code>true</code>，具体步骤如下：<br>依次点击<br><code>File -&gt; Settings -&gt; Editor -&gt; File Encodings</code><br>将 <code>Properties Files (*.properties)</code> 下的Default encoding for properties files设置为UTF-8，将Transparent native-to-ascii conversion前的勾选上。</p>\n<p>还乱码的话, 把文件内容剪切后再粘贴进去 <code>Transparent native-to-ascii conversion</code> 会自动转换编码, 再测试</p>\n<h2 id=\"Entity-和-Table\"><a href=\"#Entity-和-Table\" class=\"headerlink\" title=\"@Entity 和 @Table \"></a><a href=\"https://www.cnblogs.com/softidea/p/6216722.html\">@Entity 和 @Table </a></h2><p><code>@Entity</code> 标注在类上, 说明这个class是实体类，并且使用默认的orm规则，即class名即数据库表中表名，class字段名即表中的字段名</p>\n<p>如果想改变这种默认的orm规则，就要使用@Table来改变class名与数据库中表名的映射规则，@Column来改变class中字段名与db中表的字段名的映射规则</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Id</td>\n<td>主键</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.cnblogs.com/lj95801/p/5003580.html\">@GeneratedValue</a></td>\n<td>主键生成策略</td>\n<td>AUTO</td>\n</tr>\n<tr>\n<td>@TableGenerator</td>\n<td>主键表</td>\n<td></td>\n</tr>\n<tr>\n<td>@Column</td>\n<td>标识实体类中属性与数据表中字段的对应关系</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>2018-6-21 </p>\n<h2 id=\"EnableCaching\"><a href=\"#EnableCaching\" class=\"headerlink\" title=\"@EnableCaching\"></a><a href=\"https://segmentfault.com/a/1190000011069802\">@EnableCaching</a></h2><p>Spring 3开始提供的通过注解开启缓存功能</p>\n<h2 id=\"ModelAttribute-具有如下三个作用：\"><a href=\"#ModelAttribute-具有如下三个作用：\" class=\"headerlink\" title=\"@ModelAttribute 具有如下三个作用：\"></a><a href=\"https://blog.csdn.net/hejingyuan6/article/details/49995987\">@ModelAttribute 具有如下三个作用：</a></h2><p>①绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用。其实@ModelAttribute此处对于供视图页面展示来说与model.addAttribute(“attributeName”, abc);功能类似。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@ModelAttribute(&quot;user&quot;)</span> UserModel user)</span> </span><br></pre></td></tr></table></figure>\n\n<p>此处多了一个注解@ModelAttribute(“user”)，它的作用是将该绑定的命令对象以“user”为名称添加到模型对象中供视图页面展示使用。我们此时可以在视图页面使用${user.username}来获取绑定的命令对象的属性。</p>\n<p>②暴露@RequestMapping 方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ModelAttribute(&quot;user2&quot;)</span> UserModel <span class=\"title function_\">test3</span><span class=\"params\">(<span class=\"meta\">@ModelAttribute(&quot;user2&quot;)</span> UserModel user)</span></span><br></pre></td></tr></table></figure>\n\n<p>大家可以看到返回值类型是命令对象类型，而且通过@ModelAttribute(“user2”)注解，此时会暴露返回值到模型数据（ 名字为user2 ） 中供视图展示使用</p>\n<p>@ModelAttribute 注解的返回值会覆盖@RequestMapping 注解方法中的@ModelAttribute 注解的同名命令对象</p>\n<p>③暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping 注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用</p>\n<h1 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"@Options\"></a>@Options</h1><p><strong>mybatis的@Options注解能够设置缓存时间，能够为对象生成自增的key</strong></p>\n<p><code>@Options(useGeneratedKeys = true, keyProperty = &quot;instanceId&quot;, keyColumn = &quot;instance_id&quot;)</code></p>\n<p>@Options注解中默认设置的主键对应的字段名为id、在我们的表中，主键名为instance_id，因此需要将keyProperty和keyColumn设置成我们想要的字段：</p>\n<p>这个注解的意思就是，从instance_id这个字段里面把数据放到传入对象的instanceId成员变量里面。</p>\n<p>注解中的useCache还可以设置缓存相关的选项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useCache = true表示本次查询结果被缓存以提高下次查询速度，</span><br><span class=\"line\">flushCache = false表示下次查询时不刷新缓存，</span><br><span class=\"line\">timeout = 10000表示查询结果缓存10000秒。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Param\"><a href=\"#Param\" class=\"headerlink\" title=\"@Param\"></a>@Param</h1><p>dao层示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public User <span class=\"title function_\">selectUser</span><span class=\"params\">(<span class=\"meta\">@param(“userName”)</span> String name,<span class=\"meta\">@param(“userpassword”)</span> String password)</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>xml映射对应示例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot; selectUser&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span>&gt;</span>  </span><br><span class=\"line\">   select  *  from user_user_t   where user_name = #&#123;userName，jdbcType=VARCHAR&#125; and user_password=#&#123;userPassword,jdbcType=VARCHAR&#125;  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：采用#{}的方式把@Param注解括号内的参数进行引用（括号内参数对应的是形参如 userName对应的是name）；</p>\n<p><strong>@Param注解JavaBean对象</strong></p>\n<p>dao层示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;user&gt; <span class=\"title function_\">getUserInformation</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>xml映射对应示例</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserInformation&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.github.demo.vo.User&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;userMapper&quot;</span>&gt;</span>  </span><br><span class=\"line\">        select   </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;User_Base_Column_List&quot;</span> /&gt;</span>  </span><br><span class=\"line\">        from mo_user t where 1=1  </span><br><span class=\"line\">                      <span class=\"comment\">&lt;!-- 因为传进来的是对象所以这样写是取不到值得 --&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;user.userName!=null  and user.userName!=&#x27;&#x27;&quot;</span>&gt;</span>   and   t.user_name = #&#123;user.userName&#125;  <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;user.userAge!=null  and user.userAge!=&#x27;&#x27;&quot;</span>&gt;</span>   and   t.user_age = #&#123;user.userAge&#125;  <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n<p><strong>不使用@Param注解来声明参数时</strong></p>\n<ol>\n<li><p>必须使用使用 #{}方式。如果使用 ${} 的方式，会报错。</p>\n</li>\n<li><p>当参数只能有一个，并且是Javabean。在SQL语句里可以引用JavaBean的属性，而且只能引用JavaBean的属性。</p>\n</li>\n</ol>\n<p><strong>useGeneratedKeys 参数</strong></p>\n<p><code>@Options(useGeneratedKeys = true, keyProperty = &quot;instanceId&quot;, keyColumn = &quot;instance_id&quot;)</code><br> int addInstance(Instance instance);</p>\n<p><code>@Options(useGeneratedKeys=true)</code> 获取新添加记录的自增长主键字段值</p>\n<p>keyProperty &#x3D; “instanceId” 对应实体类属性</p>\n<p>keyColumn &#x3D; “instance_id” 对应数据库属性</p>\n<p>这句的意思是 添加的时候将插入后生成的主键 <code>instance_id</code> 值自动写入到实体类<code>instanceId</code> 中. 注意不是返回. 是写入到实体类的属性中了, 取的话需要去 <code>Instance.getinstanceId()</code> 去取.</p>\n<h1 id=\"Transactional\"><a href=\"#Transactional\" class=\"headerlink\" title=\"@Transactional\"></a>@Transactional</h1><p>开启事务注解</p>\n<p>配合 @Rollback : 回滚, 方法执行完成后回滚数据, 不写入数据库, 做测试用</p>\n<p>配合 @Commit : 提交, 提交后数据写入数据库</p>\n<h1 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"@Results\"></a>@Results</h1><p>对返回的多个结果如List进行绑定, </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Results(</span></span><br><span class=\"line\"><span class=\"meta\">        &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @Result(property = &quot;name&quot;, column = &quot;age&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">            @Result(property = &quot;age&quot;, column = &quot;age&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">        &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br></pre></td></tr></table></figure>","text":"@SuppressWarnings 用于抑制编译器产生警告信息。 示例1——抑制单类型的警告123456@SuppressWarnings(\"unchecked...","permalink":"/post/注解解析","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"注解","slug":"注解","count":1,"path":"api/categories/注解.json"}],"tags":[{"name":"注解","slug":"注解","count":1,"path":"api/tags/注解.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SuppressWarnings\"><span class=\"toc-text\">@SuppressWarnings</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BA%8E%E6%8A%91%E5%88%B6%E7%BC%96%E8%AF%91%E5%99%A8%E4%BA%A7%E7%94%9F%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF%E3%80%82\"><span class=\"toc-text\">用于抑制编译器产生警告信息。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PathVariable\"><span class=\"toc-text\">@PathVariable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RequestHeader\"><span class=\"toc-text\">@RequestHeader</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CookieValue\"><span class=\"toc-text\">@CookieValue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MatrixVariable-%E7%9F%A9%E9%98%B5%E5%8F%98%E9%87%8F-%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">@MatrixVariable 矩阵变量 示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Autowired-%E4%B8%8E-Resource\"><span class=\"toc-text\">@Autowired 与@Resource</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference\"><span class=\"toc-text\">@Reference</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Configuration-%E5%92%8C-Bean\"><span class=\"toc-text\">@Configuration 和 @Bean </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Component\"><span class=\"toc-text\">@Component</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Value\"><span class=\"toc-text\">@Value </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Entity-%E5%92%8C-Table\"><span class=\"toc-text\">@Entity 和 @Table </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#EnableCaching\"><span class=\"toc-text\">@EnableCaching</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ModelAttribute-%E5%85%B7%E6%9C%89%E5%A6%82%E4%B8%8B%E4%B8%89%E4%B8%AA%E4%BD%9C%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">@ModelAttribute 具有如下三个作用：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Options\"><span class=\"toc-text\">@Options</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Param\"><span class=\"toc-text\">@Param</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Transactional\"><span class=\"toc-text\">@Transactional</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Results\"><span class=\"toc-text\">@Results</span></a>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Maven-常用配置说明","uid":"7b4fe36b9ef03773e5070d880757a8f8","slug":"Maven-常用配置说明","date":"2017-11-23T05:36:29.000Z","updated":"2025-04-30T08:11:18.861Z","comments":true,"path":"api/articles/Maven-常用配置说明.json","keywords":null,"cover":null,"text":"全局版本号12345678<properties> <!-- 设置编码 --> <project.build.sourceEncoding>UTF-8</pro...","permalink":"/post/Maven-常用配置说明","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Maven","slug":"Maven","count":1,"path":"api/categories/Maven.json"}],"tags":[{"name":"配置","slug":"配置","count":8,"path":"api/tags/配置.json"},{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring 添加Redis支持","uid":"df45be00e9070baa034fc74ef3a965fd","slug":"Spring 添加Redis支持","date":"2017-05-26T04:44:58.000Z","updated":"2025-04-30T08:11:18.863Z","comments":true,"path":"api/articles/Spring 添加Redis支持.json","keywords":null,"cover":null,"text":"Maven 包1234567891011121314<!-- redis --> <!-- redis 驱动--> <dependency> <groupId>...","permalink":"/post/Spring 添加Redis支持","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Spring","slug":"Spring","count":7,"path":"api/categories/Spring.json"}],"tags":[{"name":"Redis","slug":"Redis","count":5,"path":"api/tags/Redis.json"},{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}