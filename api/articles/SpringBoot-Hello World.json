{"title":"Spring Boot-Hello World","uid":"682ca596a13a30a92b684fce37102be2","slug":"SpringBoot-Hello World","date":"2018-06-18T04:28:30.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot-Hello World.json","keywords":null,"cover":null,"content":"<p>本文学习自 <a href=\"https://github.com/ityouknow/spring-boot-examples\">纯洁的微笑 Spring Boot 教程</a></p>\n<p>Spring Boot 示例程序: </p>\n<h2 id=\"maven构建项目\"><a href=\"#maven构建项目\" class=\"headerlink\" title=\"maven构建项目\"></a>maven构建项目</h2><p><strong>下载Spring Boot模板:</strong></p>\n<ol>\n<li>访问<a href=\"http://start.spring.io/\">http://start.spring.io/</a></li>\n<li>选择构建工具Maven Projec, 其他默认即可, </li>\n<li>点击Generate Project下载项目压缩包</li>\n<li>下载后解压, 再使用idea打开</li>\n</ol>\n<p><strong>项目结构介绍:</strong></p>\n<p>spingboot建议的目录结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com</span><br><span class=\"line\">  +- example</span><br><span class=\"line\">    +- myproject</span><br><span class=\"line\">      +- Application.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- domain</span><br><span class=\"line\">      |  +- Customer.java</span><br><span class=\"line\">      |  +- CustomerRepository.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- service</span><br><span class=\"line\">      |  +- CustomerService.java</span><br><span class=\"line\">      |</span><br><span class=\"line\">      +- controller</span><br><span class=\"line\">      |  +- CustomerController.java</span><br><span class=\"line\">      |</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><strong>Application.java 建议放到根目录下面,主要用于做一些框架配置 (它是Spring Boot的main方法, 启动时只会扫描以它为根目录一下的文件)</strong></li>\n<li>domain目录主要用于实体（Entity）与数据访问层（Repository）</li>\n<li>service 层主要是业务类代码</li>\n<li>controller 负责页面访问控制</li>\n</ol>\n<p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改<br>最后，启动Application main方法，至此一个java项目搭建好了！</p>\n<p><strong>pom.xml文件中默认有两个模块</strong>：</p>\n<p>spring-boot-starter: 核心模块，包括自动配置支持、日志和YAML；</p>\n<p>spring-boot-starter-test: 测试模块，包括JUnit、Hamcrest、Mockito。</p>\n<p><strong>pom.xml 中添加spring boot Web支持:</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在项目中添加一个controller</strong></p>\n<p><code>@RestController</code> :</p>\n<ol>\n<li>代表这个Controller类所有的handler都以Json格式返回数据, 不需要在对接的方法添加@ResponseBody</li>\n<li>不需要你去导入JSON等依赖</li>\n<li>不需要配置 spring controller扫描</li>\n</ol>\n<p>*. 如果我们需要使用页面开发只要使用 <code>@Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorldController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动main方法, 就可以正常访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a>, 不需要任何其他配置. </p>\n<p>测试类: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.controller.HelloWorldController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMvc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 启动Spring Boot</span></span><br><span class=\"line\">        mockMvc = MockMvcBuilders.standaloneSetup(<span class=\"keyword\">new</span> <span class=\"title class_\">HelloWorldController</span>()).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMvc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// perform 执行 -&gt;  </span></span><br><span class=\"line\">        <span class=\"comment\">// MockMvcRequestBuilders.get(&quot;/&quot;) 请求 -&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// 接收数据accept, 接收的格式为:MediaType.APPLICATION_JSON -&gt; </span></span><br><span class=\"line\">        <span class=\"comment\">// 对比 andExpect(), 条件为: 返回状态码 status() 是否为正常获取: isOk() -&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// 对比 andExpect(), 条件为: 返回内容 content() 是否为: string(&quot;Hello World&quot;).</span></span><br><span class=\"line\">        mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">&quot;/&quot;</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class=\"line\">                .andExpect(status().isOk())</span><br><span class=\"line\">                .andExpect(content().string(<span class=\"string\">&quot;Hello World&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>开发环境的调试</strong></p>\n<p>热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n\n<p>该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p>\n","text":"本文学习自 纯洁的微笑 Spring Boot 教程 Spring Boot 示例程序: maven构建项目下载Spring Boot模板: 访问http://...","permalink":"/post/SpringBoot-Hello World","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"hello world","slug":"hello-world","count":1,"path":"api/tags/hello-world.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#maven%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">maven构建项目</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 代码中使用国际化配置文件","uid":"ffe1e7d4556a4c5d56e072285362f94d","slug":"SpringBoot 代码中使用国际化配置文件","date":"2018-06-21T04:30:40.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot 代码中使用国际化配置文件.json","keywords":null,"cover":null,"text":"国际化文件12345678910resources │ application.yml │ logback.xml │ mybatis-config.xml │...","permalink":"/post/SpringBoot 代码中使用国际化配置文件","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"国际化","slug":"国际化","count":3,"path":"api/tags/国际化.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Spring RMI 远程函数调用","uid":"1e49212fb32c9d3364917f80982bd0ed","slug":"Spring RMI 远程函数调用","date":"2018-06-08T04:44:05.000Z","updated":"2025-04-30T08:11:18.863Z","comments":true,"path":"api/articles/Spring RMI 远程函数调用.json","keywords":null,"cover":null,"text":"1.需要分离出来的类- 实体类- dao层, 直接在server端实现. OSS 封装为接口 阿里云 与 七牛云阿里云方法: OSSClient getOssC...","permalink":"/post/Spring RMI 远程函数调用","photos":[],"count_time":{"symbolsCount":471,"symbolsTime":"1 mins."},"categories":[{"name":"Spring","slug":"Spring","count":7,"path":"api/categories/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":8,"path":"api/tags/Spring.json"},{"name":"RMI","slug":"RMI","count":1,"path":"api/tags/RMI.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}