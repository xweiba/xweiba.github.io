{"title":"SpringBoot 启动源码解析","uid":"477ffac67edf916373cde4892b84e3f3","slug":"SpringBoot 启动源码解析","date":"2021-04-15T04:27:17.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot 启动源码解析.json","keywords":null,"cover":null,"content":"<h1 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    // 静态方法启动</span><br><span class=\"line\">    SpringApplication.run(xxx.class, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-初始化-SpringApplication-对象\"><a href=\"#2-初始化-SpringApplication-对象\" class=\"headerlink\" title=\"2. 初始化 SpringApplication 对象\"></a>2. 初始化 <code>SpringApplication</code> 对象</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123;</span><br><span class=\"line\">\tthis.resourceLoader = resourceLoader;</span><br><span class=\"line\">\tAssert.notNull(primarySources, &quot;PrimarySources must not be null&quot;);</span><br><span class=\"line\">\tthis.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t  *设置webApplication类型, 三种类型:</span><br><span class=\"line\">\t   NONE: 不是web环境</span><br><span class=\"line\">\t   SERVLET:  【spring-webmvc + Servlet + Tomcat】命令式的、同步阻塞的</span><br><span class=\"line\">\t   REACTIVE: 【spring-webflux + Reactor + Netty】响应式的、异步非阻塞的 https://www.cnblogs.com/cjsblog/p/12580518.html</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">\tthis.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t  * https://www.cnblogs.com/duanxz/p/11239291.html</span><br><span class=\"line\">\t  * 通过扫描 META-INF/spring.factories 文件初始化 ApplicationContextInitializer 的实现类集合, 并实例化, 通过order注解排序</span><br><span class=\"line\">\t  * ApplicationContextInitializer是Spring框架原有的东西，这个接口的主要作用就是在ConfigurableApplicationContext类型(或者子类型)的ApplicationContext做refresh之前，允许我们对ConfiurableApplicationContext的实例做进一步的设置和处理。</span><br><span class=\"line\">\t  */</span><br><span class=\"line\">\tsetInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t  * https://www.cnblogs.com/lwcode6/p/12072202.html</span><br><span class=\"line\">\t  * 通过扫描 META-INF/spring.factories 文件初始化 ApplicationListener 的实现类集合, 并实例化, 通过order注解排序</span><br><span class=\"line\">\t  * ApplicationContext事件机制是观察者设计模式的实现，通过ApplicationEvent类和ApplicationListener接口，可以实现ApplicationContext事件处理；</span><br><span class=\"line\">如果容器中存在ApplicationListener的Bean，当ApplicationContext调用publishEvent方法时，对应的Bean会被触发。</span><br><span class=\"line\">      */</span><br><span class=\"line\">\tsetListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">\t// 创建Main方法所在的对象实例</span><br><span class=\"line\">\tthis.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1-执行run方法\"><a href=\"#2-1-执行run方法\" class=\"headerlink\" title=\"2.1 执行run方法\"></a>2.1 执行<code>run</code>方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class=\"line\">\tStopWatch stopWatch = new StopWatch();</span><br><span class=\"line\">\tstopWatch.start();</span><br><span class=\"line\">\tConfigurableApplicationContext context = null;</span><br><span class=\"line\">\tCollection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t  * 设置配置模式 https://blog.csdn.net/wodeyuer125/article/details/50502914</span><br><span class=\"line\">\t  * 这里直接设置的java.awt.headless 模式</span><br><span class=\"line\">\t  * 当我们写的java程序本身不许要显示awt界面，例如命令行程序，后端程序。为了提高计算效率和适配性我们可以使用这种模式，关闭图形显示等功能可以大大节省设备的计算能力，而且对一些本身没有相关显示设备的机器也能适配，程序也可以正常运行。</span><br><span class=\"line\">\t  */</span><br><span class=\"line\">\tconfigureHeadlessProperty();</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t  * https://www.cnblogs.com/duanxz/p/11239291.html</span><br><span class=\"line\">\t  * 通过扫描 META-INF/spring.factories 文件初始化 SpringApplicationRunListener 的实现类集合, 并实例化, 通过order注解排序</span><br><span class=\"line\">\t  * SpringApplicationRunListener 接口的作用主要就是在Spring Boot 启动初始化的过程中可以通过SpringApplicationRunListener接口回调来让用户在启动的各个流程中可以加入自己的逻辑。</span><br><span class=\"line\">\t  */</span><br><span class=\"line\">\tSpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">\t// 执行所有的SpringApplicationRunListener实例的starting生命周期方法</span><br><span class=\"line\">\tlisteners.starting();</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    // 启动参数</span><br><span class=\"line\">\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(args);</span><br><span class=\"line\">\t\t/**</span><br><span class=\"line\">\t\t  * 1. getOrCreateEnvironment 根据webApplication类型初始化不同配置</span><br><span class=\"line\">\t\t  *  1.1 SERVLET</span><br><span class=\"line\">\t\t  *   1.1.1 初始化:servletConfigInitParams, servletContextInitParams</span><br><span class=\"line\">\t\t  *   1.1.2 通过spring.jndi.ignore配置判断是否初始化 jndiProperties</span><br><span class=\"line\">\t\t  *   1.1.3 通过super.customizePropertySources(propertySources); 初始化 systemProperties(JVM环境变量), systemEnvironment(系统环境变量)</span><br><span class=\"line\">\t\t  *  1.2 REACTIVE和NONE一致</span><br><span class=\"line\">\t\t  *   1.2.1 通过super.customizePropertySources(propertySources); 初始化 systemProperties(JVM环境变量), systemEnvironment(系统环境变量)</span><br><span class=\"line\">\t\t  * 2. configureEnvironment 初始化参数</span><br><span class=\"line\">\t\t  *  2.1 configurePropertySources 初始化命令行传入和方法的参数</span><br><span class=\"line\">\t\t  *  2.2 configureProfiles 以spring.profiles.active为key从getOrCreateEnvironment初始化的环境变量对象来初始化ActiveProfiles</span><br><span class=\"line\">\t\t  * 3. 通过SpringApplicationRunListener实例的后置处理程序environmentPrepared加载配置文件</span><br><span class=\"line\">\t\t  *  3.1 SpringCloud BootstrapApplicationListener 初始化configName, $&#123;spring.cloud.bootstrap.name:bootstrap&#125;, 并读入配置文件</span><br><span class=\"line\">\t\t  */</span><br><span class=\"line\">\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class=\"line\">\t\tconfigureIgnoreBeanInfo(environment);</span><br><span class=\"line\">\t\tBanner printedBanner = printBanner(environment);</span><br><span class=\"line\">\t\tcontext = createApplicationContext();</span><br><span class=\"line\">\t\texceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class=\"line\">\t\t\t\tnew Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">\t\tprepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class=\"line\">\t\trefreshContext(context);</span><br><span class=\"line\">\t\tafterRefresh(context, applicationArguments);</span><br><span class=\"line\">\t\tstopWatch.stop();</span><br><span class=\"line\">\t\tif (this.logStartupInfo) &#123;</span><br><span class=\"line\">\t\t\tnew StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlisteners.started(context);</span><br><span class=\"line\">\t\tcallRunners(context, applicationArguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">\t\tthrow new IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tlisteners.running(context);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, null);</span><br><span class=\"line\">\t\tthrow new IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"1.启动1234public static void main(String[] args) { // 静态方法启动 SpringApplication.run...","permalink":"/post/SpringBoot 启动源码解析","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"源码","slug":"源码","count":1,"path":"api/tags/源码.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">1.启动</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%88%9D%E5%A7%8B%E5%8C%96-SpringApplication-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2. 初始化 SpringApplication 对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E6%89%A7%E8%A1%8Crun%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.1 执行run方法</span></a></li></ol></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"vim 编辑器快捷键","uid":"9b0c0b539f3413401920f77d831fd931","slug":"vim 编辑器快捷键","date":"2021-04-26T05:08:44.000Z","updated":"2025-04-30T08:11:18.900Z","comments":true,"path":"api/articles/vim 编辑器快捷键.json","keywords":null,"cover":null,"text":"vim可以直接编辑jar等压缩包内容: vim xx.jar 再选择压缩包内配置文件修改. 常用命令 文本替换: 命令模式 : 下: %s/prepare-le...","permalink":"/post/vim 编辑器快捷键","photos":[],"count_time":{"symbolsCount":186,"symbolsTime":"1 mins."},"categories":[{"name":"Vim","slug":"Vim","count":1,"path":"api/categories/Vim.json"}],"tags":[{"name":"Vim","slug":"Vim","count":1,"path":"api/tags/Vim.json"},{"name":"常用","slug":"常用","count":1,"path":"api/tags/常用.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JDK代理与CGLib代理","uid":"c898a2e2be8a819864ade34380c2b0d9","slug":"JDK代理与CGLib代理","date":"2021-04-02T01:16:25.000Z","updated":"2025-04-30T08:11:18.847Z","comments":true,"path":"api/articles/JDK代理与CGLib代理.json","keywords":null,"cover":null,"text":"JDK代理特点： 目标类必须为实现了某个接口的实例，因为他生成的 class 文件就是一个实现了实例接口并继承了java.lang.reflect.Proxy类...","permalink":"/post/JDK代理与CGLib代理","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"CGLib","slug":"CGLib","count":1,"path":"api/tags/CGLib.json"},{"name":"JDK代理","slug":"JDK代理","count":1,"path":"api/tags/JDK代理.json"},{"name":"反射","slug":"反射","count":1,"path":"api/tags/反射.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}