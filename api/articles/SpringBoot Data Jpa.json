{"title":"SpringBoot Data Jpa","uid":"55462c26c8d97c85cb11e092c0e581ae","slug":"SpringBoot Data Jpa","date":"2018-06-26T04:37:39.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot Data Jpa.json","keywords":null,"cover":null,"content":"<h1 id=\"今天完成的事\"><a href=\"#今天完成的事\" class=\"headerlink\" title=\"今天完成的事\"></a>今天完成的事</h1><p>熟悉 spring data jpa的使用</p>\n<h2 id=\"Spring-data-jpa\"><a href=\"#Spring-data-jpa\" class=\"headerlink\" title=\"Spring data jpa\"></a>Spring data jpa</h2><p><strong>首先了解JPA是什么？</strong></p>\n<p>JPA(Java Persistence API)是Sun官方提出的Java持久化规范。它为Java开发人员提供了一种对象&#x2F;关联映射工具来管理Java应用中的关系数据。他的出现主要是为了简化现有的持久化开发工作和整合ORM技术，结束现在Hibernate，TopLink，JDO等ORM框架各自为营的局面。值得注意的是，JPA是在充分吸收了现有Hibernate，TopLink，JDO等ORM框架的基础上发展而来的，具有易于使用，伸缩性强等优点。从目前的开发社区的反应上看，JPA受到了极大的支持和赞扬，其中就包括了Spring与EJB3.0的开发团队。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意:JPA是一套规范，不是一套产品，那么像Hibernate,TopLink,JDO他们是一套产品，如果说这些产品实现了这个JPA规范，那么我们就可以叫他们为JPA的实现产品。</span><br></pre></td></tr></table></figure>\n\n<p>spring data jpa</p>\n<p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套JPA应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring data jpa让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><p>基本查询也分为两种，一种是spring data默认已经实现，一种是根据查询的方法来自动解析成SQL。</p>\n<p><strong>预先生成方法</strong></p>\n<p>spring data jpa 默认预先生成了一些基本的CURD的方法，例如：增、删、改等等</p>\n<p>1). 接口继承JpaRepository (之前使用过)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2). 使用默认方法, 根据方法名可以看出他的意思</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBaseQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\tUser user=<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 查询所有数据</span></span><br><span class=\"line\">\tuserRepository.findAll();</span><br><span class=\"line\">\t<span class=\"comment\">// 根据id查询出一个用户</span></span><br><span class=\"line\">\tuserRepository.findOne(<span class=\"number\">1l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 保存用户数据</span></span><br><span class=\"line\">\tuserRepository.save(user);</span><br><span class=\"line\">\t<span class=\"comment\">// 删除用户</span></span><br><span class=\"line\">\tuserRepository.delete(user);</span><br><span class=\"line\">\t<span class=\"comment\">// 统计用户个数</span></span><br><span class=\"line\">\tuserRepository.count();</span><br><span class=\"line\">\t<span class=\"comment\">// 判断该id是否存在, 返回 bool 值</span></span><br><span class=\"line\">\tuserRepository.exists(<span class=\"number\">1l</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义简单查询</strong></p>\n<p>自定义的简单查询就是根据方法名来自动生成SQL，主要的语法是 <code>findXXBy</code>, <code>readAXXBy</code>, <code>queryXXBy</code>, <code>countXXBy</code>, <code>getXXBy</code> 后面跟属性名称：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">findByUserName</span><span class=\"params\">(String userName)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也使用一些加一些关键字 <code>And</code>、 <code>Or</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">findByUserNameOrEmail</span><span class=\"params\">(String username, String email)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>修改、删除、统计也是类似语法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long <span class=\"title function_\">deleteById</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Long <span class=\"title function_\">countByUserName</span><span class=\"params\">(String userName)</span></span><br></pre></td></tr></table></figure>\n\n<p>基本上SQL体系中的关键词都可以使用，例如：<code>LIKE</code>、 <code>IgnoreCase</code>、 <code>OrderBy</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">findByEmailLike</span><span class=\"params\">(String email)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">User <span class=\"title function_\">findByUserNameIgnoreCase</span><span class=\"params\">(String userName)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">findByUserNameOrderByEmailDesc</span><span class=\"params\">(String email)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>具体的关键字，使用方法和生产成SQL如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Sample</th>\n<th>JPQL snippet</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>And</td>\n<td>findByLastnameAndFirstname</td>\n<td>… where x.lastname &#x3D; ?1 and x.firstname &#x3D; ?2</td>\n</tr>\n<tr>\n<td>Or</td>\n<td>findByLastnameOrFirstname</td>\n<td>… where x.lastname &#x3D; ?1 or x.firstname &#x3D; ?2</td>\n</tr>\n<tr>\n<td>Is,Equals</td>\n<td>findByFirstnameIs,findByFirstnameEquals</td>\n<td>… where x.firstname &#x3D; ?1</td>\n</tr>\n<tr>\n<td>Between</td>\n<td>findByStartDateBetween</td>\n<td>… where x.startDate between ?1 and ?2</td>\n</tr>\n<tr>\n<td>LessThan</td>\n<td>findByAgeLessThan</td>\n<td>… where x.age &lt; ?1</td>\n</tr>\n<tr>\n<td>LessThanEqual</td>\n<td>findByAgeLessThanEqual</td>\n<td>… where x.age ⇐ ?1</td>\n</tr>\n<tr>\n<td>GreaterThan</td>\n<td>findByAgeGreaterThan</td>\n<td>… where x.age &gt; ?1</td>\n</tr>\n<tr>\n<td>GreaterThanEqual</td>\n<td>findByAgeGreaterThanEqual</td>\n<td>… where x.age &gt;&#x3D; ?1</td>\n</tr>\n<tr>\n<td>After</td>\n<td>findByStartDateAfter</td>\n<td>… where x.startDate &gt; ?1</td>\n</tr>\n<tr>\n<td>Before</td>\n<td>findByStartDateBefore</td>\n<td>… where x.startDate &lt; ?1</td>\n</tr>\n<tr>\n<td>IsNull</td>\n<td>findByAgeIsNull</td>\n<td>… where x.age is null</td>\n</tr>\n<tr>\n<td>IsNotNull,NotNull</td>\n<td>findByAge(Is)NotNull</td>\n<td>… where x.age not null</td>\n</tr>\n<tr>\n<td>Like</td>\n<td>findByFirstnameLike</td>\n<td>… where x.firstname like ?1</td>\n</tr>\n<tr>\n<td>NotLike</td>\n<td>findByFirstnameNotLike</td>\n<td>… where x.firstname not like ?1</td>\n</tr>\n<tr>\n<td>StartingWith</td>\n<td>findByFirstnameStartingWith</td>\n<td>… where x.firstname like ?1 (parameter bound with appended %)</td>\n</tr>\n<tr>\n<td>EndingWith</td>\n<td>findByFirstnameEndingWith</td>\n<td>… where x.firstname like ?1 (parameter bound with prepended %)</td>\n</tr>\n<tr>\n<td>Containing</td>\n<td>findByFirstnameContaining</td>\n<td>… where x.firstname like ?1 (parameter bound wrapped in %)</td>\n</tr>\n<tr>\n<td>OrderBy</td>\n<td>findByAgeOrderByLastnameDesc</td>\n<td>… where x.age &#x3D; ?1 order by x.lastname desc</td>\n</tr>\n<tr>\n<td>Not</td>\n<td>findByLastnameNot</td>\n<td>… where x.lastname &lt;&gt; ?1</td>\n</tr>\n<tr>\n<td>In</td>\n<td>findByAgeIn(Collection ages)</td>\n<td>… where x.age in ?1</td>\n</tr>\n<tr>\n<td>NotIn</td>\n<td>findByAgeNotIn(Collection age)</td>\n<td>… where x.age not in ?1</td>\n</tr>\n<tr>\n<td>TRUE</td>\n<td>findByActiveTrue()</td>\n<td>… where x.active &#x3D; true</td>\n</tr>\n<tr>\n<td>FALSE</td>\n<td>findByActiveFalse()</td>\n<td>… where x.active &#x3D; false</td>\n</tr>\n<tr>\n<td>IgnoreCase</td>\n<td>findByFirstnameIgnoreCase</td>\n<td>… where UPPER(x.firstame) &#x3D; UPPER(?1)</td>\n</tr>\n</tbody></table>\n<h2 id=\"复杂查询\"><a href=\"#复杂查询\" class=\"headerlink\" title=\"复杂查询\"></a>复杂查询</h2><p>在实际的开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL</p>\n<p><strong>分页查询</strong></p>\n<p>分页查询在实际使用中非常普遍了，spring data jpa 已经帮我们实现了分页的功能，在查询的方法中，需要传入参数 <code>Pageable</code> ,当查询中有多个参数的时候 <code>Pageable</code> 建议做为最后一个参数传入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;User&gt; <span class=\"title function_\">findALL</span><span class=\"params\">(Pageable pageable)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">Page&lt;User&gt; <span class=\"title function_\">findByUserName</span><span class=\"params\">(String userName,Pageable pageable)</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>Pageable</code> 是spring封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testPageQuery</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> page=<span class=\"number\">1</span>,size=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">Sort</span> <span class=\"variable\">sort</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sort</span>(Direction.DESC, <span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Pageable</span> <span class=\"variable\">pageable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageRequest</span>(page, size, sort);</span><br><span class=\"line\">    userRepository.findALL(pageable);</span><br><span class=\"line\">    userRepository.findByUserName(<span class=\"string\">&quot;testName&quot;</span>, pageable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>限制查询</strong></p>\n<p>有时候我们只需要查询前N个元素，或者支取前一个实体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ser <span class=\"title function_\">findFirstByOrderByLastnameAsc</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">User <span class=\"title function_\">findTopByOrderByAgeDesc</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Page&lt;User&gt; <span class=\"title function_\">queryFirst10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">findFirst10ByLastname</span><span class=\"params\">(String lastname, Sort sort)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">findTop10ByLastname</span><span class=\"params\">(String lastname, Pageable pageable)</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自定义SQL查询</strong></p>\n<p>其实Spring data 觉大部分的SQL都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的SQL来查询，spring data也是完美支持的；在SQL的查询方法上面使用 <code>@Query</code> 注解，如涉及到删除和修改在需要加上 <code>@Modifying</code> .也可以根据需要添加 <code>@Transactional</code> 对事物的支持，查询超时的设置等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;update User u set u.userName = ?1 where u.id = ?2&quot;)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">modifyByIdAndUserId</span><span class=\"params\">(String  userName, Long id)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@Modifying</span></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;delete from User where id = ?1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteByUserId</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Transactional(timeout = 10)</span></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;select u from User u where u.emailAddress = ?1&quot;)</span></span><br><span class=\"line\">User <span class=\"title function_\">findByEmailAddress</span><span class=\"params\">(String emailAddress)</span>;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p><strong>多表查询</strong></p>\n<p>多表查询在spring data jpa中有两种实现方式，第一种是利用hibernate的级联查询来实现，第二种是创建一个结果集的接口来接收连表查询后的结果，这里主要第二种方式。</p>\n<p>首先需要定义一个结果集的接口类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HotelSummary</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCity <span class=\"title function_\">getCity</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDouble <span class=\"title function_\">getAverageRating</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Integer <span class=\"title function_\">getAverageRatingRounded</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getAverageRating() == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : (<span class=\"type\">int</span>) Math.round(getAverageRating());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询的方法返回类型设置为新创建的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query(&quot;select h.city as city, h.name as name, avg(r.rating) as averageRating &quot;</span></span><br><span class=\"line\"><span class=\"meta\">\t\t- &quot;from Hotel h left outer join h.reviews r where h.city = ?1 group by h&quot;)</span></span><br><span class=\"line\">Page&lt;HotelSummary&gt; <span class=\"title function_\">findByCity</span><span class=\"params\">(City city, Pageable pageable)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Query(&quot;select h.name as name, avg(r.rating) as averageRating &quot;</span></span><br><span class=\"line\"><span class=\"meta\">\t\t- &quot;from Hotel h left outer join h.reviews r  group by h&quot;)</span></span><br><span class=\"line\">Page&lt;HotelSummary&gt; <span class=\"title function_\">findByCity</span><span class=\"params\">(Pageable pageable)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;HotelSummary&gt; hotels = <span class=\"built_in\">this</span>.hotelRepository.findByCity(<span class=\"keyword\">new</span> <span class=\"title class_\">PageRequest</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>, Direction.ASC, <span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(HotelSummary summay:hotels)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Name&quot;</span> +summay.getName());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在运行中Spring会给接口（HotelSummary）自动生产一个代理类来接收返回的结果，代码汇总使用 <code>getXX</code> 的形式来获取</p></blockquote>\n<h2 id=\"多数据源的支持\"><a href=\"#多数据源的支持\" class=\"headerlink\" title=\"多数据源的支持\"></a>多数据源的支持</h2><p><strong>同源数据库的多源支持(未测试)</strong></p>\n<p>日常项目中因为使用的分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置sping data jpa对多数据源的使用，一般分一下为三步：</p>\n<p>1.配置多数据源<br>2.不同源的实体类放入不同包路径<br>3.声明不同的包路径下使用不同的数据源、事务支持</p>\n<p><strong>异构数据库多源支持(未测试)</strong></p>\n<p>比如我们的项目中，即需要对 <code>mysql</code> 的支持，也需要对 <code>mongodb</code> 的查询等。</p>\n<p>实体类声明 <code>@Entity</code> 关系型数据库支持类型、声明 <code>@Document</code> 为mongodb支持类型，不同的数据源使用不同的实体就可以了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Repository</span>&lt;Person, Long&gt; &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Repository</span>&lt;User, Long&gt; &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果User用户既使用 mysql 也使用 mongodb 呢，也可以做混合使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">JpaPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Repository</span>&lt;Person, Long&gt; &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">MongoDBPersonRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Repository</span>&lt;Person, Long&gt; &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Document</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过对不同的包路径进行声明，比如A包路径下使用mysql, B包路径下使用mongoDB</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableJpaRepositories(basePackages = &quot;com.neo.repositories.jpa&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableMongoRepositories(basePackages = &quot;com.neo.repositories.mongo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Configuration</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><strong>使用枚举</strong></p>\n<p>使用枚举的时候，我们希望数据库中存储的是枚举对应的String类型，而不是枚举的索引值，需要在属性上面添加 <code>@Enumerated(EnumType.STRING)</code> 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Enumerated(EnumType.STRING)</span> </span><br><span class=\"line\"><span class=\"meta\">@Column(nullable = true)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserType type;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不需要和数据库映射的属性</strong></p>\n<p>正常情况下我们在实体类上加入注解 <code>@Entity</code>，就会让实体类和表相关连如果其中某个属性我们不需要和数据库来关联只是在展示的时候做计算，只需要加上 <code>@Transient</code> 属性既可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transient</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String  userName;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"明日计划\"><a href=\"#明日计划\" class=\"headerlink\" title=\"明日计划\"></a>明日计划</h1><p>Spring mybatis的使用</p>\n","text":"今天完成的事熟悉 spring data jpa的使用 Spring data jpa首先了解JPA是什么？ JPA(Java Persistence API)...","permalink":"/post/SpringBoot Data Jpa","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"JPA","slug":"JPA","count":1,"path":"api/tags/JPA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8A%E5%A4%A9%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B\"><span class=\"toc-text\">今天完成的事</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-data-jpa\"><span class=\"toc-text\">Spring data jpa</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">基本查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">复杂查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">多数据源的支持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%98%8E%E6%97%A5%E8%AE%A1%E5%88%92\"><span class=\"toc-text\">明日计划</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot Thymeleaf  模板","uid":"fa5e0930c1df87d0cd434074c90d5e5e","slug":"SpringBoot Thymeleaf  模板","date":"2018-06-28T04:35:45.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot Thymeleaf  模板.json","keywords":null,"cover":null,"text":"配置说明: 配置一切正常, 但一直 404 问题, 解决办法 原因, maven仓库包下载的问题 1按照在Stack Overflow上一位外国朋友遇到的差不多...","permalink":"/post/SpringBoot Thymeleaf  模板","photos":[],"count_time":{"symbolsCount":515,"symbolsTime":"1 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"Thymeleaf","slug":"Thymeleaf","count":5,"path":"api/tags/Thymeleaf.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mysql常用命令","uid":"7bf038e0b297e00ea48bc31e608946a7","slug":"Mysql常用命令","date":"2018-06-23T06:34:27.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Mysql常用命令.json","keywords":null,"cover":null,"text":"常用命令查看线程: 1234select id, db, user, host, command, time, state, infofrom informat...","permalink":"/post/Mysql常用命令","photos":[],"count_time":{"symbolsCount":586,"symbolsTime":"1 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":4,"path":"api/categories/Mysql.json"}],"tags":[{"name":"常用命令","slug":"常用命令","count":10,"path":"api/tags/常用命令.json"},{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}