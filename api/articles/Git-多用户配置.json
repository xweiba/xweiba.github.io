{"title":"Git 多用户配置","uid":"cd2cde879fd4a7417d862451e6d3f44d","slug":"Git-多用户配置","date":"2022-04-06T03:01:39.000Z","updated":"2025-04-30T08:11:18.840Z","comments":true,"path":"api/articles/Git-多用户配置.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>公司部署了私有 <code>GitLab</code>, 在公司更新个人的 <code>GitHub</code> 项目的时候非常麻烦，好在 <code>Git</code> 是支持多用户的，记录一下。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/cangqinglang/p/12462272.html\">Git 多用户配置 - 苍青浪</a></li>\n<li><a href=\"https://www.angtylook.com/2021/07/11/ssh-agnt.html\">在git-bash启动时启用SSH Agent | 工程师</a></li>\n</ul></blockquote>\n<h3 id=\"配置各环境秘钥对\"><a href=\"#配置各环境秘钥对\" class=\"headerlink\" title=\"配置各环境秘钥对\"></a>配置各环境秘钥对</h3><p>钥对的保存位置默认在 ~&#x2F;.ssh 目录下，使用一下命令生成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C “xxxx@gmail.com” <span class=\"comment\"># github邮箱</span></span><br><span class=\"line\"><span class=\"comment\"># 按下 ENTER 键后，会有如下提示：</span></span><br><span class=\"line\"><span class=\"comment\"># Generatingpublic/privatersa key pair.Enter fileinwhich to save the key (/Users/xxx/.ssh/id_rsa):</span></span><br><span class=\"line\"><span class=\"comment\"># 为了和 GitLab 区分，这里重命名为 id_rsa_github</span></span><br><span class=\"line\">ssh-keygen -t rsa -C “xxxx@xxx.com” <span class=\"comment\"># 公司邮箱</span></span><br><span class=\"line\"><span class=\"comment\"># 重命名为 id_rsa_gitlab</span></span><br></pre></td></tr></table></figure>\n\n<p>将生成的 <code>_pub</code> 后缀的公钥文件内容复制至 <code>GitHub</code> 和 <code>GitLab</code> 的 <code> SSH Keys</code> 中。</p>\n<h3 id=\"添加到-SSH-Agent-中\"><a href=\"#添加到-SSH-Agent-中\" class=\"headerlink\" title=\"添加到 SSH-Agent 中\"></a>添加到 <code>SSH-Agent</code> 中</h3><p>在上一步中，我们已经将公钥添加到了 <code>GitHub</code>  或者 <code>GitLab</code>  服务器上，我们还需要将私钥添加到本地中，不然无法使用。</p>\n<p>在终端执行: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&#x27;ssh-agent&#x27;</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_github</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管理秘钥\"><a href=\"#管理秘钥\" class=\"headerlink\" title=\"管理秘钥\"></a>管理秘钥</h3><p>通过以上步骤，公钥、密钥分别被添加到 git 服务器和本地了。下面我们需要在本地创建一个密钥配置文件，通过该文件，实现根据仓库的 <code>remote</code> 链接地址自动选择合适的私钥。</p>\n<p>编辑 <code>~/.ssh</code> 目录下的 <code>config</code> 文件, <code>vim ~/.ssh/config</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    User xxxx</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class=\"line\">    HostkeyAlgorithms +ssh-rsa</span><br><span class=\"line\">    PubkeyAcceptedKeyTypes +ssh-rsa</span><br><span class=\"line\">Host gitlab-xxx.com</span><br><span class=\"line\">    HostName gitlab-xxx.com</span><br><span class=\"line\">    User xxxxxx</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class=\"line\">    HostkeyAlgorithms +ssh-rsa</span><br><span class=\"line\">    PubkeyAcceptedKeyTypes +ssh-rsa</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">Hi xxxx! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"string\">ssh -T git@gitlab-xxx.com</span></span><br><span class=\"line\"><span class=\"string\">Welcome to GitLab, xxxxxx!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"仓库配置\"><a href=\"#仓库配置\" class=\"headerlink\" title=\"仓库配置\"></a>仓库配置</h3><p>完成以上配置后，其实你已经基本完成了所有配置。分别进入附属于 <code>GitHub</code> 和 <code>GitLab</code> 的仓库，此时都可以进行 <code>git</code> 操作了。但是别急，如果你此时提交仓库修改后，你会发现提交的用户名变成了你的系统主机名。</p>\n<p>这是因为 git 的配置分为三级别，<code>System —&gt; Global —&gt;Local</code>。<code>System</code> 即系统级别，<code>Global</code> 为配置的全局，<code>Local</code> 为仓库级别，优先级是 <code>Local &gt; Global &gt; System</code>。</p>\n<p>因为我们并没有给仓库配置用户名，又在一开始清除了全局的用户名，因此此时你提交的话，就会使用 <code>System</code> 级别的用户名，也就是你的系统主机名了。</p>\n<p>因此我们需要为每个仓库单独配置用户名信息，假设我们要配置 <code>Github</code> 的某个仓库，进入该仓库后，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &quot;xxx&quot;</span><br><span class=\"line\">git config --local user.email &quot;xx@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后，通过以下命令查看本仓库的所有配置信息：</p>\n<p><code>git config --local --list</code></p>\n<p>至此你已经配置好了 <code>Local</code> 级别的配置了，此时提交该仓库的代码，提交用户名就是你设置的 <code>Local</code> 级别的用户名了。</p>\n<h3 id=\"添加-Git-Bash-启动脚本\"><a href=\"#添加-Git-Bash-启动脚本\" class=\"headerlink\" title=\"添加 Git-Bash 启动脚本\"></a>添加 <code>Git-Bash</code> 启动脚本</h3><p>由于 <code>ssh-agent</code> 是存放在高速缓存中的，重启后添加的 <code>ssh-add</code> 就会失效，这里直接在 <code>git-bash</code> 的 <code>bash_profile</code> 中添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows默认会生成该文件</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> -f ~/.profile &amp;&amp; . ~/.profile</span><br><span class=\"line\"><span class=\"built_in\">test</span> -f ~/.bashrc &amp;&amp; . ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>.bashrc</code> 中添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval `ssh-agent` &gt; /dev/null</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_github &gt; /dev/null</span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_xc &gt; /dev/null</span><br></pre></td></tr></table></figure>\n\n<p>每次启动 <code>git-bash</code> 都会自动启动并添加。</p>\n<h3 id=\"不同目录配置不同的提交账号和邮箱\"><a href=\"#不同目录配置不同的提交账号和邮箱\" class=\"headerlink\" title=\"不同目录配置不同的提交账号和邮箱\"></a>不同目录配置不同的提交账号和邮箱</h3><p>先复制 <code>C:\\Users\\xx</code> 目录下的 <code>git</code> 默认配置<code>.gitconfig</code> 配置, 需要几个环境就复制几个, 重命名为: <code>.gitconfig-wb</code>, <code>.gitconfig-xc</code>.</p>\n<p>编辑: <code>.gitconfig</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[includeIf &quot;gitdir:code/xc/&quot;]</span><br><span class=\"line\">   path = ./.gitconfig-xc</span><br><span class=\"line\"></span><br><span class=\"line\">[includeIf &quot;gitdir:code/weiba/&quot;]</span><br><span class=\"line\">   path = ./.gitconfig-wb</span><br></pre></td></tr></table></figure>\n\n<p>编辑: <code>.gitconfig-xx</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">\tname = xx</span><br><span class=\"line\">\temail = xxx@xx.com</span><br></pre></td></tr></table></figure>\n\n<p>编辑: <code>.gitconfig-wb</code>文件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">\tname = weiba</span><br><span class=\"line\">\temail = xxxx@gmail.com</span><br></pre></td></tr></table></figure>\n","text":" 公司部署了私有 GitLab, 在公司更新个人的 GitHub 项目的时候非常麻烦，好在 Git 是支持多用户的，记录一下。 参考： Git 多用户配置 - ...","permalink":"/post/Git-多用户配置","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Git","slug":"Git","count":2,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":3,"path":"api/tags/Git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%90%84%E7%8E%AF%E5%A2%83%E7%A7%98%E9%92%A5%E5%AF%B9\"><span class=\"toc-text\">配置各环境秘钥对</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%88%B0-SSH-Agent-%E4%B8%AD\"><span class=\"toc-text\">添加到 SSH-Agent 中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E7%A7%98%E9%92%A5\"><span class=\"toc-text\">管理秘钥</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">仓库配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0-Git-Bash-%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">添加 Git-Bash 启动脚本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E6%8F%90%E4%BA%A4%E8%B4%A6%E5%8F%B7%E5%92%8C%E9%82%AE%E7%AE%B1\"><span class=\"toc-text\">不同目录配置不同的提交账号和邮箱</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring AOP及事务原理","uid":"f4f28e159c970d8abf25ca9ece83bb73","slug":"Spring-AOP及事务原理","date":"2022-04-07T02:59:57.000Z","updated":"2025-04-30T08:11:18.863Z","comments":true,"path":"api/articles/Spring-AOP及事务原理.json","keywords":null,"cover":null,"text":"相关笔记@EnableAspectJAutoProxy(exposeProxy=true) 开启动态代理的暴露，因为在 JDK 动态代理模式下，在方法中调用本类...","permalink":"/post/Spring-AOP及事务原理","photos":[],"count_time":{"symbolsCount":205,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"事务","slug":"事务","count":2,"path":"api/tags/事务.json"},{"name":"AOP","slug":"AOP","count":1,"path":"api/tags/AOP.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Samba 服务","uid":"78adcbdfdd6a623cd781ded6a00aa205","slug":"Samba 服务","date":"2022-04-03T05:06:49.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Samba 服务.json","keywords":null,"cover":null,"text":"问题记录无法直接打开 exe 文件在 /etc/samba/smb.conf 的 global 节点中添加 acl allow execute always =...","permalink":"/post/Samba 服务","photos":[],"count_time":{"symbolsCount":93,"symbolsTime":"1 mins."},"categories":[{"name":"Samba","slug":"Samba","count":1,"path":"api/categories/Samba.json"}],"tags":[{"name":"Samba","slug":"Samba","count":1,"path":"api/tags/Samba.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}