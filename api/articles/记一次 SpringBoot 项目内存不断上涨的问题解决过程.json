{"title":"记一次 SpringBoot 项目内存不断上涨的问题解决过程","uid":"e204c405c9b2a43359c6fc61df69c066","slug":"记一次 SpringBoot 项目内存不断上涨的问题解决过程","date":"2019-08-30T05:22:51.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/记一次 SpringBoot 项目内存不断上涨的问题解决过程.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>最近刚使用上 opencv 做图像处理, 部署后发现每次调完业务代码 RES 都会上涨近 300M, 测试环境测了两天, RES 已经到 11G 了, 开始以为是内存泄露, 各种释放对象, 然而没卵用…</p></blockquote>\n<h1 id=\"一-开始排查\"><a href=\"#一-开始排查\" class=\"headerlink\" title=\"一. 开始排查\"></a>一. 开始排查</h1><p>一开始以为是内存泄露了, 各种 google 查看怎么排查,<br>学到了不少, 之前都没怎么看过..</p>\n<p>查看内存占用比较高的前20个 (不知道为啥只有17个), 而且最高的是个 <code>[C</code> 对象, 看了一下没看出来啥.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo 32382 | head -20</span><br></pre></td></tr></table></figure>\n\n<p>导出堆内存, 可以下载下来用 JDK 自带的工具 jvisualvm 查看, 也可以直接在服务器上起服务查看, 占用最高的是 char[], 还有一个 HashMap, 代码中查了一圈, 没发现问题..</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导出堆内存</span><br><span class=\"line\">jmap -dump:format=b,file=dump.bin 32382</span><br><span class=\"line\"># 起服务, 直接web访问 ip:4000</span><br><span class=\"line\">jhat -port 4000 dump.bin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-确认问题\"><a href=\"#二-确认问题\" class=\"headerlink\" title=\"二. 确认问题\"></a>二. 确认问题</h1><p>最后转念一想, 会不会不是堆的问题, 做了三次测试, 每次调用业务接口内存都会上涨. 但是堆内存占用都没有什么变化, 这是当时的三次堆内存信息:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -heap 32382 </span><br></pre></td></tr></table></figure>\n\n<p>查看堆使用情况, 发现只有 850M 左右, 基本确定了不是堆的问题. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jmap -histo:live 32382</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三-解决方法\"><a href=\"#三-解决方法\" class=\"headerlink\" title=\"三. 解决方法\"></a>三. 解决方法</h1><p>想着 opencv 使用 JNI 方式做的, 会不会是 Native Memory, 继续google.. 终于找到了一片文章: <a href=\"https://coldwalker.com/2018/08//troubleshooter_native_memory_increase/\">Java堆外内存增长问题排查Case</a>, 用里面介绍的查看物理内存分配, 看到了大量的 anon 内存块, 不过我的都是1024的, 跟文章中有所不同. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pmap -d 32382</span><br></pre></td></tr></table></figure>\n\n<p>文章中还提供了一个链接: <a href=\"https://yq.aliyun.com/articles/227924\">当Java虚拟机遇上Linux Arena内存池</a>, 第二个例子跟我差不多, 都是 1024 的, 原因文章中也有介绍 : </p>\n<p>查看 glibc 版本: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/lib64/libc.so.6</span><br></pre></td></tr></table></figure>\n\n<p>因为要部署到线上环境耗时耗力, 所以我没有更换 <code>tcmalloc</code> , 在启动脚本中加了一下环境变量: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MALLOC_ARENA_MAX=4</span><br></pre></td></tr></table></figure>\n<p>测试了一下, RES 始终稳定在 1.3g 左右, 已经很满意了. <code>export MALLOC_ARENA_MAX</code> 设置为 1 时内存在 1g 左右, 但文章中说可能对性能有损耗, 所以我还是设置为 4 了, 持续观察~</p>\n<p>看着不多, 但是这一块相当不熟悉, 所以花了很久才找到解决方法, 继续学习啊~</p>\n","text":" 最近刚使用上 opencv 做图像处理, 部署后发现每次调完业务代码 RES 都会上涨近 300M, 测试环境测了两天, RES 已经到 11G 了, 开始以...","permalink":"/post/记一次 SpringBoot 项目内存不断上涨的问题解决过程","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"经验","slug":"经验","count":7,"path":"api/tags/经验.json"},{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%BC%80%E5%A7%8B%E6%8E%92%E6%9F%A5\"><span class=\"toc-text\">一. 开始排查</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E7%A1%AE%E8%AE%A4%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">二. 确认问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三. 解决方法</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Docker 安装 Nexus3 docker仓库","uid":"dbfd3e1a17b7ff22880d08acb8468aa7","slug":"Docker 安装 Nexus3 docker仓库","date":"2019-09-10T03:30:54.000Z","updated":"2025-04-30T08:11:18.832Z","comments":true,"path":"api/articles/Docker 安装 Nexus3 docker仓库.json","keywords":null,"cover":[],"text":"使用容器安装Nexus3 仓库，真的非常方便 下载镜像nexus3 的镜像名称为 sonatype/nexus3 我们直接用 docker 工具下载即可： 1d...","permalink":"/post/Docker 安装 Nexus3 docker仓库","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"Docker","slug":"Docker","count":7,"path":"api/categories/Docker.json"}],"tags":[{"name":"docker","slug":"docker","count":5,"path":"api/tags/docker.json"},{"name":"nexus3","slug":"nexus3","count":1,"path":"api/tags/nexus3.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Thymeleaf 调用java方法","uid":"4f5020ab021f9f69bb62bb39309d5485","slug":"Thymeleaf 调用java方法","date":"2019-08-23T04:52:34.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/Thymeleaf 调用java方法.json","keywords":null,"cover":null,"text":"Thymeleaf 调用java方法创建对象调用: 1<td th:text=\"${new java.text.DecimalFormat('#00%').fo...","permalink":"/post/Thymeleaf 调用java方法","photos":[],"count_time":{"symbolsCount":288,"symbolsTime":"1 mins."},"categories":[{"name":"Thymeleaf","slug":"Thymeleaf","count":4,"path":"api/categories/Thymeleaf.json"}],"tags":[{"name":"Thymeleaf","slug":"Thymeleaf","count":5,"path":"api/tags/Thymeleaf.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}