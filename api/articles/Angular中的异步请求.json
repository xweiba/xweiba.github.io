{"title":"Angular中的异步请求","uid":"4a2146c891a4987dfd157bfd8404c794","slug":"Angular中的异步请求","date":"2022-12-23T05:59:29.000Z","updated":"2025-04-30T08:11:18.830Z","comments":true,"path":"api/articles/Angular中的异步请求.json","keywords":null,"cover":null,"content":"<h2 id=\"6-Angular中的异步请求\"><a href=\"#6-Angular中的异步请求\" class=\"headerlink\" title=\"6.Angular中的异步请求\"></a><center>6.Angular中的异步请求</center></h2><h4 id=\"1-RxJs介绍\"><a href=\"#1-RxJs介绍\" class=\"headerlink\" title=\"1. RxJs介绍\"></a>1. RxJs介绍</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> Angular中集成了RxJs来操作异步.</p></blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的异步编程的几种方法:</span><br><span class=\"line\">    1. 回调函数</span><br><span class=\"line\">    2. 事件监听/发布订阅</span><br><span class=\"line\">    3. Promise(来自ES6)</span><br><span class=\"line\">    4. RxJs</span><br><span class=\"line\">    </span><br><span class=\"line\">1.Promise使用demo:</span><br><span class=\"line\">    - Promise中resolve代表成功回调,reject代表失败回调</span><br><span class=\"line\">    funtion getPromiseData()&#123;</span><br><span class=\"line\">        return new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            //通过resolve(data),传递结果</span><br><span class=\"line\">            setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                var name = &#x27;张三&#x27;;</span><br><span class=\"line\">                resolve(name);</span><br><span class=\"line\">            &#125;,1000);   </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - 外部获取Promise数据</span><br><span class=\"line\">    var promiseData = getPromiseData().then((data)-&gt;&#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">2.使用rxJs获取异步数据</span><br><span class=\"line\">    - 首先需要引入Observable</span><br><span class=\"line\">    import &#123;Observable&#125; from &#x27;rxjs&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    - 通过observer.next(data),传递结果,observer.error(data)来处理异常</span><br><span class=\"line\">    function getRxJsData()&#123;</span><br><span class=\"line\">        return new Observable((observer)-&gt;&#123;</span><br><span class=\"line\">            setTimeout(()=&gt;&#123;</span><br><span class=\"line\">                var name = &#x27;张三&#x27;;</span><br><span class=\"line\">                observer.next(name);</span><br><span class=\"line\">            &#125;,1000);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;         </span><br><span class=\"line\">    </span><br><span class=\"line\">    - 外部获取RxJs数据</span><br><span class=\"line\">    var rxJsData = getRxJsData().subscribe((data)-&gt;&#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-RxJs与Promise的区别\"><a href=\"#2-RxJs与Promise的区别\" class=\"headerlink\" title=\"2. RxJs与Promise的区别\"></a>2. RxJs与Promise的区别</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RxJs比Promise功能更加强大</span><br><span class=\"line\">1. RxJs可以通过unsubscribe(),来中止异步操作,而Promise不行</span><br><span class=\"line\">2. RxJs执行的异步方法可以多次执行(如果异步方法是个定时循环的),而Promise不行</span><br><span class=\"line\">3. RxJs还提供了很多便利的工具类(map,filter,类似java8)</span><br><span class=\"line\">    import &#123;map,filter&#125; from &#x27;rxjs/operators&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var stream = this.getRxJsData().pipe(</span><br><span class=\"line\">        filter((value)=&gt;&#123;</span><br><span class=\"line\">            if(value%2 ==0)&#123;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        map((value)=&gt;&#123;</span><br><span class=\"line\">            return value * value;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ).subscribe((data)=&gt;&#123;</span><br><span class=\"line\">        console.log(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Angular中数据交互\"><a href=\"#3-Angular中数据交互\" class=\"headerlink\" title=\"3. Angular中数据交互\"></a>3. Angular中数据交互</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 引入httpClientModule模块</span><br><span class=\"line\">    import &#123;HttpClientModule&#125; from &#x27;@angular/common/http&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">2. 依赖注入,在app.module.ts中注入模块</span><br><span class=\"line\">    @ngModule(&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        imports:[</span><br><span class=\"line\">            BrowserModule,</span><br><span class=\"line\">            HttpClientModule</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">3. 组件内引入httpClient(作为一个服务引入,因此需要在构造方法内注入)</span><br><span class=\"line\">    import &#123;HttpClient&#125; from &#x27;@angular/common/http&#x27;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    export class xxx implements OnInit&#123;</span><br><span class=\"line\">        constructor(public http:HttpClient)&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">4. 请求数据</span><br><span class=\"line\">    - get请求: </span><br><span class=\"line\">        this.http.get(apiUrl).subscribe((response)=&gt;&#123;</span><br><span class=\"line\">            ...    </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    - post请求: </span><br><span class=\"line\">        需要设置请求头,因此需要额外引入HttpHeaders</span><br><span class=\"line\">        import &#123;HttpClient,HttpHeaders&#125; from &#x27;@angular/common/http&#x27;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        设置请求头</span><br><span class=\"line\">        const httpOptions = &#123;headers: new HttpHeader(&#123;&#x27;content-Type&#x27;:&#x27;application/json&#x27;&#125;)&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        请求数据</span><br><span class=\"line\">        this.post(apiUrl,data,httpOptions).subscribe((response)=&gt;&#123;</span><br><span class=\"line\">            ...    </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        </span><br><span class=\"line\">5. 对jsonp的支持</span><br><span class=\"line\">    - 首先需要在app.module.ts中引入jsonp模块 HttpClientJsonpModule,并注入</span><br><span class=\"line\">        import &#123;HttpClientModule,HttpClientJsonpModule&#125; from &#x27;@angular/common/http&#x27;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        @ngModule(&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        imports:[</span><br><span class=\"line\">            BrowserModule,</span><br><span class=\"line\">            HttpClientModule,</span><br><span class=\"line\">            HttpClientJsonpModule</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    - 使用jsonp(必须得后台支持)</span><br><span class=\"line\">        this.http.jsonp(api,&#x27;callback&#x27;).subscribe((response)=&gt;&#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;)    </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>","text":"6.Angular中的异步请求1. RxJs介绍 Angular中集成了RxJs来操作异步. 123456789101112131415161718192021...","permalink":"/post/Angular中的异步请求","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"异步请求","slug":"异步请求","count":1,"path":"api/tags/异步请求.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Angular%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">6.Angular中的异步请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-RxJs%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1. RxJs介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-RxJs%E4%B8%8EPromise%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2. RxJs与Promise的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Angular%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">3. Angular中数据交互</span></a></li></ol></li></ol></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Angular中使用ngx-translate国际化","uid":"839853fd0791fa00d2de2eab05708e12","slug":"Angular中使用ngx-translate国际化","date":"2022-12-23T06:01:52.000Z","updated":"2025-04-30T08:11:18.830Z","comments":true,"path":"api/articles/Angular中使用ngx-translate国际化.json","keywords":null,"cover":null,"text":"12.Angular中使用ngx-translate国际化1. 下载依赖12345npm install @ngx-translate/core --save-...","permalink":"/post/Angular中使用ngx-translate国际化","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Angular","slug":"Angular","count":16,"path":"api/categories/Angular.json"}],"tags":[{"name":"Angular","slug":"Angular","count":16,"path":"api/tags/Angular.json"},{"name":"ngx-translate","slug":"ngx-translate","count":1,"path":"api/tags/ngx-translate.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Web-CSS收藏","uid":"136241e32e8e84355f6f361b29867966","slug":"Web-CSS 收藏","date":"2022-12-23T05:46:48.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/Web-CSS 收藏.json","keywords":null,"cover":null,"text":"水平居中参考自: css的div垂直居中的方法，百分比div垂直居中 HTML: 123<div class=\"father\"> <div class=\"son...","permalink":"/post/Web-CSS 收藏","photos":[],"count_time":{"symbolsCount":592,"symbolsTime":"1 mins."},"categories":[{"name":"CSS","slug":"CSS","count":1,"path":"api/categories/CSS.json"}],"tags":[{"name":"Web","slug":"Web","count":2,"path":"api/tags/Web.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}