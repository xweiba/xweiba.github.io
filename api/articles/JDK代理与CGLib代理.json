{"title":"JDK代理与CGLib代理","uid":"c898a2e2be8a819864ade34380c2b0d9","slug":"JDK代理与CGLib代理","date":"2021-04-02T01:16:25.000Z","updated":"2025-04-30T08:11:18.847Z","comments":true,"path":"api/articles/JDK代理与CGLib代理.json","keywords":null,"cover":null,"content":"<h2 id=\"JDK代理\"><a href=\"#JDK代理\" class=\"headerlink\" title=\"JDK代理\"></a>JDK代理</h2><h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><ul>\n<li>目标类必须为实现了某个接口的实例，因为他生成的 <code>class</code> 文件就是一个实现了实例接口并继承了<code>java.lang.reflect.Proxy</code>类的匿名类。</li>\n<li>通过该匿名类调用<code>InvocationHandler</code>实例的 <code>invoke</code> 接口来增强，<code>InvocationHandler</code> 实例必须传入目标类实例, 他就像是对目标实例做了一层封装，并通过 <code>invoke</code> 接口钩子来实现增强</li>\n<li>通过<code>Method.invoke(Object obj, Object... args)</code>来完成实例的最终执行, <code>obj</code> 为目标类实例。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li>只能代理实现了接口的实例，否则无法生成对应的匿名类，并且实例中非接口的方法无法代理。</li>\n<li>由于是通过反射直接执行实例的方法，在实例中调用其本类方法时，不会再次走代理，而是直接执行。</li>\n</ul>\n<h3 id=\"生成的匿名类-Proxy0-class：\"><a href=\"#生成的匿名类-Proxy0-class：\" class=\"headerlink\" title=\"生成的匿名类$Proxy0.class：\"></a>生成的匿名类<code>$Proxy0.class</code>：</h3><p><code>Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), this)</code> 返回的就是它的实例，他会实现目标类的全部接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by FernFlower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.sun.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.xweiba.proxy.IUserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">$Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserManager</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;equals&quot;</span>, Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>));</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;toString&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 接口的实现方法</span></span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">&quot;io.github.xweiba.proxy.IUserManager&quot;</span>).getMethod(<span class=\"string\">&quot;updata&quot;</span>, Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>));</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">&quot;io.github.xweiba.proxy.IUserManager&quot;</span>).getMethod(<span class=\"string\">&quot;add&quot;</span>, Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>));</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;hashCode&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSuchMethodError</span>(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy0(InvocationHandler var1) <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class=\"line\">        <span class=\"comment\">// Proxy.newProxyInstance()方法会将本类实例化并传入InvocationHandler h</span></span><br><span class=\"line\">        <span class=\"comment\">// return cons.newInstance(new Object[]&#123;h&#125;);</span></span><br><span class=\"line\">        <span class=\"comment\">// var1 即是InvocationHandler的实例对象，</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updata</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// super.h === InvocationHandler的实例对象, 通过它的invoke接口实现增强功能。</span></span><br><span class=\"line\">            <span class=\"comment\">// invoke 中一般使用反射来完成目标对象的调用。 m4.invoke(targetObject, new Object[]&#123;var1&#125;);</span></span><br><span class=\"line\">            <span class=\"built_in\">super</span>.h.invoke(<span class=\"built_in\">this</span>, m4, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndeclaredThrowableException</span>(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CGLib-代理\"><a href=\"#CGLib-代理\" class=\"headerlink\" title=\"CGLib 代理\"></a><code>CGLib</code> 代理</h2><h2 id=\"特点：-1\"><a href=\"#特点：-1\" class=\"headerlink\" title=\"特点：\"></a>特点：</h2><ul>\n<li><code>CGLib</code> 原理是针对目标类生成一个匿名子类，覆盖其中的所有方法。</li>\n<li>所有方法的执行都会通过 <code>MethodInterceptor</code> 的 <code>intercept</code> 接口来实现增强，新的匿名子类 <code>class</code> 就像是对目标类做了一层封装，并通过 <code>intercept</code> 接口钩子来实现增强，在需要执行目标类的方法时通过调用父类的方法来完成。</li>\n<li>通过<code>Method.invokeSuper(Object obj, Object[] args)</code>来完成实例的最终执行, <code>obj</code> 为匿名子类实例，注意不是<code>invoke</code>,</li>\n<li>执行的是匿名子类的实例父类方法，在父类方法中调用本类方法时，又会回到匿名子类中，所有会再次走代理完成增强。</li>\n<li>因为执行的就是新生成的匿名子类，效率理论上比<code>JDK代理</code>高。</li>\n</ul>\n<h3 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li>目标类和方法不能声明为final类型，否则无法生成匿名子类。</li>\n</ul>\n<h3 id=\"生成的匿名类-UserManager-EnhancerByCGLIB-ddf60d63：\"><a href=\"#生成的匿名类-UserManager-EnhancerByCGLIB-ddf60d63：\" class=\"headerlink\" title=\"生成的匿名类 UserManager$$EnhancerByCGLIB$$ddf60d63：\"></a>生成的匿名类 <code>UserManager$$EnhancerByCGLIB$$ddf60d63</code>：</h3><p><code>CGLib</code>无需传入目标类实例， 因为<code>enhancer.create()</code> 返回的就是继承自目标类的匿名子类实例对象，他会覆盖父类的所有方法;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by FernFlower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.core.ReflectUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.core.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Callback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Factory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserManager$$EnhancerByCGLIB$$ddf60d63</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">UserManager</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> CGLIB$BOUND;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object CGLIB$FACTORY_DATA;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal CGLIB$THREAD_CALLBACKS;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Callback[] CGLIB$STATIC_CALLBACKS;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object CGLIB$CALLBACK_FILTER;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$add$<span class=\"number\">0</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$add$<span class=\"number\">0</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] CGLIB$emptyArgs;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$noITest$<span class=\"number\">1</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$noITest$<span class=\"number\">1</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$updata$<span class=\"number\">2</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$updata$<span class=\"number\">2</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$equals$<span class=\"number\">3</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$equals$<span class=\"number\">3</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$toString$<span class=\"number\">4</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$toString$<span class=\"number\">4</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$hashCode$<span class=\"number\">5</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$hashCode$<span class=\"number\">5</span>$Proxy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Method CGLIB$clone$<span class=\"number\">6</span>$Method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MethodProxy CGLIB$clone$<span class=\"number\">6</span>$Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class=\"line\">        CGLIB$THREAD_CALLBACKS = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>();</span><br><span class=\"line\">        CGLIB$emptyArgs = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// var0 是当前类</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">var0</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;io.github.xweiba.proxy.impl.UserManager$$EnhancerByCGLIB$$ddf60d63&quot;</span>);</span><br><span class=\"line\">        Class var1;</span><br><span class=\"line\">        Method[] var10000 = ReflectUtils.findMethods(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;equals&quot;</span>, <span class=\"string\">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class=\"string\">&quot;toString&quot;</span>, <span class=\"string\">&quot;()Ljava/lang/String;&quot;</span>, <span class=\"string\">&quot;hashCode&quot;</span>, <span class=\"string\">&quot;()I&quot;</span>, <span class=\"string\">&quot;clone&quot;</span>, <span class=\"string\">&quot;()Ljava/lang/Object;&quot;</span>&#125;, (var1 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>)).getDeclaredMethods());</span><br><span class=\"line\">        CGLIB$equals$<span class=\"number\">3</span>$Method = var10000[<span class=\"number\">0</span>];</span><br><span class=\"line\">        CGLIB$equals$<span class=\"number\">3</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;(Ljava/lang/Object;)Z&quot;</span>, <span class=\"string\">&quot;equals&quot;</span>, <span class=\"string\">&quot;CGLIB$equals$3&quot;</span>);</span><br><span class=\"line\">        CGLIB$toString$<span class=\"number\">4</span>$Method = var10000[<span class=\"number\">1</span>];</span><br><span class=\"line\">        CGLIB$toString$<span class=\"number\">4</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;()Ljava/lang/String;&quot;</span>, <span class=\"string\">&quot;toString&quot;</span>, <span class=\"string\">&quot;CGLIB$toString$4&quot;</span>);</span><br><span class=\"line\">        CGLIB$hashCode$<span class=\"number\">5</span>$Method = var10000[<span class=\"number\">2</span>];</span><br><span class=\"line\">        CGLIB$hashCode$<span class=\"number\">5</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;()I&quot;</span>, <span class=\"string\">&quot;hashCode&quot;</span>, <span class=\"string\">&quot;CGLIB$hashCode$5&quot;</span>);</span><br><span class=\"line\">        CGLIB$clone$<span class=\"number\">6</span>$Method = var10000[<span class=\"number\">3</span>];</span><br><span class=\"line\">        CGLIB$clone$<span class=\"number\">6</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;()Ljava/lang/Object;&quot;</span>, <span class=\"string\">&quot;clone&quot;</span>, <span class=\"string\">&quot;CGLIB$clone$6&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 注意这里是被代理的class var1 = Class.forName(&quot;io.github.xweiba.proxy.impl.UserManager&quot;)).getDeclaredMethods()</span></span><br><span class=\"line\">        var10000 = ReflectUtils.findMethods(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>, <span class=\"string\">&quot;noITest&quot;</span>, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>, <span class=\"string\">&quot;updata&quot;</span>, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>&#125;, (var1 = Class.forName(<span class=\"string\">&quot;io.github.xweiba.proxy.impl.UserManager&quot;</span>)).getDeclaredMethods());</span><br><span class=\"line\">        CGLIB$add$<span class=\"number\">0</span>$Method = var10000[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 传入被代理的class的方法信息和当前class，当执行MethodInterceptor的intercept接口时会传入CGLIB$add$0$Proxy，调用CGLIB$add$0$Proxy的invokeSuper</span></span><br><span class=\"line\">        CGLIB$add$<span class=\"number\">0</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>, <span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;CGLIB$add$0&quot;</span>);</span><br><span class=\"line\">        CGLIB$noITest$<span class=\"number\">1</span>$Method = var10000[<span class=\"number\">1</span>];</span><br><span class=\"line\">        CGLIB$noITest$<span class=\"number\">1</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>, <span class=\"string\">&quot;noITest&quot;</span>, <span class=\"string\">&quot;CGLIB$noITest$1&quot;</span>);</span><br><span class=\"line\">        CGLIB$updata$<span class=\"number\">2</span>$Method = var10000[<span class=\"number\">2</span>];</span><br><span class=\"line\">        CGLIB$updata$<span class=\"number\">2</span>$Proxy = MethodProxy.create(var1, var0, <span class=\"string\">&quot;(Ljava/lang/String;)V&quot;</span>, <span class=\"string\">&quot;updata&quot;</span>, <span class=\"string\">&quot;CGLIB$updata$2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> CGLIB$add$<span class=\"number\">0</span>(String var1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.add(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String var1)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this.CGLIB$CALLBACK_0 就是 MethodInterceptor 的实例对象，通过enhancer.setCallback(this)传入。</span></span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// 通过子类实例(就是本类)调用时走MethodInterceptor的intercept接口来实现增强。</span></span><br><span class=\"line\">            var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$add$<span class=\"number\">0</span>$Method, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;var1&#125;, CGLIB$add$<span class=\"number\">0</span>$Proxy);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 在MethodInterceptor的intercept中通过Method.invokeSuper(Object obj, Object[] args)调用时走父类的add方法。</span></span><br><span class=\"line\">            <span class=\"built_in\">super</span>.add(var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> CGLIB$noITest$<span class=\"number\">1</span>(String var1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.noITest(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">noITest</span><span class=\"params\">(String var1)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$noITest$<span class=\"number\">1</span>$Method, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;var1&#125;, CGLIB$noITest$<span class=\"number\">1</span>$Proxy);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.noITest(var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> CGLIB$updata$<span class=\"number\">2</span>(String var1) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.updata(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updata</span><span class=\"params\">(String var1)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$updata$<span class=\"number\">2</span>$Method, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;var1&#125;, CGLIB$updata$<span class=\"number\">2</span>$Proxy);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.updata(var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> CGLIB$equals$<span class=\"number\">3</span>(Object var1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.equals(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object var1)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var2</span> <span class=\"operator\">=</span> var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$equals$<span class=\"number\">3</span>$Method, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;var1&#125;, CGLIB$equals$<span class=\"number\">3</span>$Proxy);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> var2 == <span class=\"literal\">null</span> ? <span class=\"literal\">false</span> : (Boolean)var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.equals(var1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String CGLIB$toString$<span class=\"number\">4</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> var10000 != <span class=\"literal\">null</span> ? (String)var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$toString$<span class=\"number\">4</span>$Method, CGLIB$emptyArgs, CGLIB$toString$<span class=\"number\">4</span>$Proxy) : <span class=\"built_in\">super</span>.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> CGLIB$hashCode$<span class=\"number\">5</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$hashCode$<span class=\"number\">5</span>$Method, CGLIB$emptyArgs, CGLIB$hashCode$<span class=\"number\">5</span>$Proxy);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> var1 == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : ((Number)var1).intValue();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.hashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object CGLIB$clone$<span class=\"number\">6</span>() <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">        <span class=\"type\">MethodInterceptor</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> var10000 != <span class=\"literal\">null</span> ? var10000.intercept(<span class=\"built_in\">this</span>, CGLIB$clone$<span class=\"number\">6</span>$Method, CGLIB$emptyArgs, CGLIB$clone$<span class=\"number\">6</span>$Proxy) : <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodProxy CGLIB$findMethodProxy(Signature var0) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> var0.toString();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(var10000.hashCode()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">1692737819</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;noITest(Ljava/lang/String;)V&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$noITest$<span class=\"number\">1</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">1358456834</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;add(Ljava/lang/String;)V&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$add$<span class=\"number\">0</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">508378822</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;clone()Ljava/lang/Object;&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$clone$<span class=\"number\">6</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1653544538</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;updata(Ljava/lang/String;)V&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$updata$<span class=\"number\">2</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1826985398</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;equals(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$equals$<span class=\"number\">3</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1913648695</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;toString()Ljava/lang/String;&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$toString$<span class=\"number\">4</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1984935277</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000.equals(<span class=\"string\">&quot;hashCode()I&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CGLIB$hashCode$<span class=\"number\">5</span>$Proxy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserManager$$EnhancerByCGLIB$$ddf60d63() &#123;</span><br><span class=\"line\">        CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> CGLIB$SET_THREAD_CALLBACKS(Callback[] var0) &#123;</span><br><span class=\"line\">        CGLIB$THREAD_CALLBACKS.set(var0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> CGLIB$SET_STATIC_CALLBACKS(Callback[] var0) &#123;</span><br><span class=\"line\">        CGLIB$STATIC_CALLBACKS = var0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class=\"line\">        <span class=\"type\">UserManager$$EnhancerByCGLIB$$ddf60d63</span> <span class=\"variable\">var1</span> <span class=\"operator\">=</span> (UserManager$$EnhancerByCGLIB$$ddf60d63)var0;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class=\"line\">            var1.CGLIB$BOUND = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> CGLIB$THREAD_CALLBACKS.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (var10000 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">newInstance</span><span class=\"params\">(Callback[] var1)</span> &#123;</span><br><span class=\"line\">        CGLIB$SET_THREAD_CALLBACKS(var1);</span><br><span class=\"line\">        <span class=\"type\">UserManager$$EnhancerByCGLIB$$ddf60d63</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserManager$$EnhancerByCGLIB$$ddf60d63</span>();</span><br><span class=\"line\">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> var10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">newInstance</span><span class=\"params\">(Callback var1)</span> &#123;</span><br><span class=\"line\">        CGLIB$SET_THREAD_CALLBACKS(<span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>[]&#123;var1&#125;);</span><br><span class=\"line\">        <span class=\"type\">UserManager$$EnhancerByCGLIB$$ddf60d63</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserManager$$EnhancerByCGLIB$$ddf60d63</span>();</span><br><span class=\"line\">        CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> var10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">newInstance</span><span class=\"params\">(Class[] var1, Object[] var2, Callback[] var3)</span> &#123;</span><br><span class=\"line\">        CGLIB$SET_THREAD_CALLBACKS(var3);</span><br><span class=\"line\">        <span class=\"type\">UserManager$$EnhancerByCGLIB$$ddf60d63</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserManager$$EnhancerByCGLIB$$ddf60d63</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(var1.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            var10000.&lt;init&gt;();</span><br><span class=\"line\">            CGLIB$SET_THREAD_CALLBACKS((Callback[])<span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> var10000;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Constructor not found&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Callback <span class=\"title function_\">getCallback</span><span class=\"params\">(<span class=\"type\">int</span> var1)</span> &#123;</span><br><span class=\"line\">        CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        MethodInterceptor var10000;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(var1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            var10000 = <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            var10000 = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> var10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCallback</span><span class=\"params\">(<span class=\"type\">int</span> var1, Callback var2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(var1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var2;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Callback[] getCallbacks() &#123;</span><br><span class=\"line\">        CGLIB$BIND_CALLBACKS(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>[]&#123;<span class=\"built_in\">this</span>.CGLIB$CALLBACK_0&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCallbacks</span><span class=\"params\">(Callback[] var1)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.CGLIB$CALLBACK_0 = (MethodInterceptor)var1[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        CGLIB$STATICHOOK1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射相关方法\"><a href=\"#反射相关方法\" class=\"headerlink\" title=\"反射相关方法\"></a>反射相关方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodProxy <span class=\"title function_\">create</span><span class=\"params\">(Class c1, Class c2, String desc, String name1, String name2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MethodProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodProxy</span>();</span><br><span class=\"line\">    proxy.sig1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Signature</span>(name1, desc);</span><br><span class=\"line\">    proxy.sig2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Signature</span>(name2, desc);</span><br><span class=\"line\">    <span class=\"comment\">// cglib 中，c1为被代理类的class，c2为cglib生成的class(c1的子类)</span></span><br><span class=\"line\">    proxy.createInfo = <span class=\"keyword\">new</span> <span class=\"title class_\">MethodProxy</span>.CreateInfo(c1, c2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cglib 中，c1为被代理类的class，c2为cglib生成的class</span></span><br><span class=\"line\">    Class c1;</span><br><span class=\"line\">    Class c2;</span><br><span class=\"line\">    NamingPolicy namingPolicy;</span><br><span class=\"line\">    GeneratorStrategy strategy;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> attemptLoad;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CreateInfo</span><span class=\"params\">(Class c1, Class c2)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.c1 = c1;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.c2 = c2;</span><br><span class=\"line\">        <span class=\"type\">AbstractClassGenerator</span> <span class=\"variable\">fromEnhancer</span> <span class=\"operator\">=</span> AbstractClassGenerator.getCurrent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fromEnhancer != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.namingPolicy = fromEnhancer.getNamingPolicy();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.strategy = fromEnhancer.getStrategy();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.attemptLoad = fromEnhancer.getAttemptLoad();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fastClassInfo == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>.initLock) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fastClassInfo == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                MethodProxy.<span class=\"type\">CreateInfo</span> <span class=\"variable\">ci</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.createInfo;</span><br><span class=\"line\">                MethodProxy.<span class=\"type\">FastClassInfo</span> <span class=\"variable\">fci</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodProxy</span>.FastClassInfo();</span><br><span class=\"line\">                <span class=\"comment\">// f1 由 c1 生成</span></span><br><span class=\"line\">                fci.f1 = helper(ci, ci.c1);</span><br><span class=\"line\">                <span class=\"comment\">// f2 由 c2 生成</span></span><br><span class=\"line\">                fci.f2 = helper(ci, ci.c2);</span><br><span class=\"line\">                fci.i1 = fci.f1.getIndex(<span class=\"built_in\">this</span>.sig1);</span><br><span class=\"line\">                fci.i2 = fci.f2.getIndex(<span class=\"built_in\">this</span>.sig2);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.fastClassInfo = fci;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.createInfo = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object obj, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.init();</span><br><span class=\"line\">            MethodProxy.<span class=\"type\">FastClassInfo</span> <span class=\"variable\">fci</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.fastClassInfo;</span><br><span class=\"line\">            <span class=\"comment\">// 在cglib中调用被代理类c1的方法对象的invoke方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> fci.f1.invoke(fci.i1, obj, args);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var4.getTargetException();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException var5) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fastClassInfo.i1 &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Protected method: &quot;</span> + <span class=\"built_in\">this</span>.sig1);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> var5;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">invokeSuper</span><span class=\"params\">(Object obj, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.init();</span><br><span class=\"line\">        MethodProxy.<span class=\"type\">FastClassInfo</span> <span class=\"variable\">fci</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.fastClassInfo;</span><br><span class=\"line\">        <span class=\"comment\">// 在cglib中调用被代理类c2(c1的子类)的方法对象的invoke方法，会通过方法的hashcode来定位最终执行的方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException var4) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> var4.getTargetException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"测试Demo\"><a href=\"#测试Demo\" class=\"headerlink\" title=\"测试Demo:\"></a>测试Demo:</h2><p><code>IUserManager</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试接口</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updata</span><span class=\"params\">(String user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>UserManager</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.xweiba.proxy.IUserManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserManager</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String user)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;add: &quot;</span> + user);</span><br><span class=\"line\">        updata(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updata</span><span class=\"params\">(String user)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;updata: &quot;</span> + user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">noITest</span><span class=\"params\">(String user)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;noITest: &quot;</span> + user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>AbstractProxy.java</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理测试抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractProxy</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">IProxy</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代理执行方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/04/02 11:30</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects : 代理执行参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title function_\">proxyExecute</span><span class=\"params\">(Object ...objects)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getProxyType</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代理增强钩子</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/04/02 11:30</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects : 代理执行参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">proxyEnhance</span><span class=\"params\">(Object... objects)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(getProxyType() + <span class=\"string\">&quot;代理开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">execute</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.proxyExecute(objects);</span><br><span class=\"line\">        System.out.println(getProxyType() + <span class=\"string\">&quot;代理结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> execute;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>JdkProxyHandler.java</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * JDK 动态代理Demo</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdkProxyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProxy</span>&lt;Object&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxyClassObject, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// proxyClassObject对象是JDK生成的代理class实例</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;jdkProxy invoke: proxyClassObject.super.h == this -&gt; &quot;</span> + (getFieldValue(proxyClassObject, <span class=\"string\">&quot;h&quot;</span>) == <span class=\"built_in\">this</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.proxyEnhance(proxyClassObject, method, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Object object)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = object;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">proxyExecute</span><span class=\"params\">(Object... objects)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// objects = Object proxy, Method method, Object[] args</span></span><br><span class=\"line\">        <span class=\"comment\">// proxy对象是JDK代理生成的class的实例，这里invoke必须使用原对象。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((Method)objects[<span class=\"number\">1</span>]).invoke(<span class=\"built_in\">this</span>.target, (Object[])objects[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;JDK&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getFieldValue</span><span class=\"params\">(Class clazz, Object person, String name)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取类中声明的字段</span></span><br><span class=\"line\">        Field[] fields = clazz.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (field.getName().equals(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 避免 can not access a member of class com.java.test.Person with modifiers &quot;private&quot;</span></span><br><span class=\"line\">                field.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    o = field.get(person);</span><br><span class=\"line\">                    System.out.println(field.getName() + <span class=\"string\">&quot;:&quot;</span>+ field.get(person));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            o = getFieldValue(person.getClass().getSuperclass(), person, name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getFieldValue</span><span class=\"params\">(Object person, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFieldValue(person.getClass(), person, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>CGLibProxyMethodInterceptor</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.xweiba.proxy.impl.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CGLib 动态代理Demo</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CGLibProxyMethodInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractProxy</span>&lt;Class&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.proxyEnhance(proxy, method, args, methodProxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class superclass)</span> &#123;</span><br><span class=\"line\">        target = <span class=\"keyword\">new</span> <span class=\"title class_\">UserManager</span>();</span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer.setSuperclass(superclass);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">proxyExecute</span><span class=\"params\">(Object... objects)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">        <span class=\"comment\">// objects = Object proxy, Method method, Object[] args, MethodProxy methodProxy</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 invoke 的话，在方法内调用本类方法不会走父类方法，传入代理对象会死循环，使用target的话就跟JDK代理一样了。</span></span><br><span class=\"line\">        <span class=\"comment\">// return ((MethodProxy)objects[3]).invoke(target, (Object[])objects[2]);</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 invokeSuper 来调用父类方法，父类即为目标类。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((MethodProxy)objects[<span class=\"number\">3</span>]).invokeSuper(objects[<span class=\"number\">0</span>], (Object[])objects[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyType</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CGLib&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>ProxyTestDemo</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.xweiba.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.xweiba.proxy.impl.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.core.DebuggingClassWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代理测试Demo</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> caleb_L</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/04/02</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyTestDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存JDK代理生成的class文件</span></span><br><span class=\"line\">        System.setProperty(<span class=\"string\">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 开启CGLib debug模式, 保存CGLib代理生成的class文件</span></span><br><span class=\"line\">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>) + <span class=\"string\">&quot;\\\\cglib&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cgLib 生成的是代理类的子类，并通过MethodInterceptor的intercept接口增强</span></span><br><span class=\"line\">        <span class=\"comment\">// cglib 不需要new实例，只需要class，因为他生成的是class的子类，返回子类的实例。</span></span><br><span class=\"line\">        <span class=\"type\">UserManager</span> <span class=\"variable\">cgLibProxy</span> <span class=\"operator\">=</span> (UserManager)<span class=\"keyword\">new</span> <span class=\"title class_\">CGLibProxyMethodInterceptor</span>().getProxy(UserManager.class);</span><br><span class=\"line\">        <span class=\"comment\">// 真正调用的是父类的add方法，父类add方法调用时，调用</span></span><br><span class=\"line\">        cgLibProxy.add(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n\\n&quot;</span>);</span><br><span class=\"line\">        cgLibProxy.noITest(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// jdk 生成的是接口的实现类，所以只能代理接口，并通过InvocationHandler的invoke接口增强</span></span><br><span class=\"line\">        <span class=\"comment\">// Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class=\"line\">        <span class=\"comment\">// (super.h.invoke(this, m3, new Object[]&#123;var1&#125;);)，  super.h === jdkProxy</span></span><br><span class=\"line\">        <span class=\"comment\">// jdk代理执行时必须传入代理对象，因为他最终执行的还是真正的实例, 代理类只是用来增强的。</span></span><br><span class=\"line\">        <span class=\"type\">IUserManager</span> <span class=\"variable\">jdkProxy</span> <span class=\"operator\">=</span> (IUserManager)<span class=\"keyword\">new</span> <span class=\"title class_\">JdkProxyHandler</span>().getProxy(<span class=\"keyword\">new</span> <span class=\"title class_\">UserManager</span>());</span><br><span class=\"line\">        jdkProxy.add(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 会抛出异常，因为jdk代理只会代理接口，他是接口的实现。</span></span><br><span class=\"line\">        ((UserManager)jdkProxy).noITest(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGLIB debugging enabled, writing to &#x27;D:\\resouces\\code\\java\\note\\cglib&#x27;</span><br><span class=\"line\">CGLib代理开始</span><br><span class=\"line\">add: test</span><br><span class=\"line\">CGLib代理开始</span><br><span class=\"line\">updata: test</span><br><span class=\"line\">CGLib代理结束</span><br><span class=\"line\">CGLib代理结束</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CGLib代理开始</span><br><span class=\"line\">noITest: test</span><br><span class=\"line\">CGLib代理结束</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">h:io.github.xweiba.proxy.JdkProxyHandler@72b6cbcc</span><br><span class=\"line\">jdkProxy invoke: proxyClassObject.super.h == this -&gt; true</span><br><span class=\"line\">JDK代理开始</span><br><span class=\"line\">add: test</span><br><span class=\"line\">updata: test</span><br><span class=\"line\">JDK代理结束</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.ClassCastException: com.sun.proxy.$Proxy0 cannot be cast to io.github.xweiba.proxy.impl.UserManager</span><br><span class=\"line\">\tat io.github.xweiba.proxy.ProxyTestDemo.main(ProxyTestDemo.java:41)</span><br></pre></td></tr></table></figure>\n","text":"JDK代理特点： 目标类必须为实现了某个接口的实例，因为他生成的 class 文件就是一个实现了实例接口并继承了java.lang.reflect.Proxy类...","permalink":"/post/JDK代理与CGLib代理","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"}],"tags":[{"name":"CGLib","slug":"CGLib","count":1,"path":"api/tags/CGLib.json"},{"name":"JDK代理","slug":"JDK代理","count":1,"path":"api/tags/JDK代理.json"},{"name":"反射","slug":"反射","count":1,"path":"api/tags/反射.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDK%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">JDK代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">特点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">缺点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E7%9A%84%E5%8C%BF%E5%90%8D%E7%B1%BB-Proxy0-class%EF%BC%9A\"><span class=\"toc-text\">生成的匿名类$Proxy0.class：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CGLib-%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">CGLib 代理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9%EF%BC%9A-1\"><span class=\"toc-text\">特点：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A-1\"><span class=\"toc-text\">缺点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E7%9A%84%E5%8C%BF%E5%90%8D%E7%B1%BB-UserManager-EnhancerByCGLIB-ddf60d63%EF%BC%9A\"><span class=\"toc-text\">生成的匿名类 UserManager$$EnhancerByCGLIB$$ddf60d63：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">反射相关方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95Demo\"><span class=\"toc-text\">测试Demo:</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 启动源码解析","uid":"477ffac67edf916373cde4892b84e3f3","slug":"SpringBoot 启动源码解析","date":"2021-04-15T04:27:17.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/SpringBoot 启动源码解析.json","keywords":null,"cover":null,"text":"1.启动1234public static void main(String[] args) { // 静态方法启动 SpringApplication.run...","permalink":"/post/SpringBoot 启动源码解析","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":12,"path":"api/tags/SpringBoot.json"},{"name":"源码","slug":"源码","count":1,"path":"api/tags/源码.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux 常用命令","uid":"b312b6d7635ef172fb071e9c891a0e3d","slug":"Linux 常用命令","date":"2021-02-25T05:09:32.000Z","updated":"2025-04-30T08:11:18.861Z","comments":true,"path":"api/articles/Linux 常用命令.json","keywords":null,"cover":null,"text":"内存查看内存 1free -m 回收内存 1234# 将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件sync ...","permalink":"/post/Linux 常用命令","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"常用命令","slug":"常用命令","count":10,"path":"api/tags/常用命令.json"},{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}