{"title":"设计模式-桥接模式","uid":"8a95a847ba41df9a0cdac0faf9ed7ebe","slug":"设计模式-桥接模式","date":"2025-04-29T14:11:58.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-桥接模式.json","keywords":null,"cover":null,"content":"<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>桥接模式（Bridge Pattern）是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们都可以独立地变化。这种模式通过组合的方式，将类的抽象与实现解耦，使得两者可以独立地进行变化和扩展。<mcreference link=\"https://howtodoinjava.com/design-patterns/structural/bridge-design-pattern/\" index=\"1\">1</mcreference></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>桥接模式适用于以下场景：</p>\n<ol>\n<li>需要在运行时切换不同的实现方式</li>\n<li>需要跨平台开发时，处理不同平台的实现差异</li>\n<li>需要将抽象与实现解耦，使它们可以独立变化</li>\n<li>处理多维度变化的系统，如不同的数据库服务器、不同的操作系统等 <mcreference link=\"https://refactoring.guru/design-patterns/bridge/java/example\" index=\"5\">5</mcreference></li>\n</ol>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><h3 id=\"1-基本结构\"><a href=\"#1-基本结构\" class=\"headerlink\" title=\"1. 基本结构\"></a>1. 基本结构</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DrawAPI</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">drawCircle</span><span class=\"params\">(<span class=\"type\">int</span> radius, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DrawAPI</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawCircle</span><span class=\"params\">(<span class=\"type\">int</span> radius, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Drawing Circle[ color: red, radius: &quot;</span> + radius + <span class=\"string\">&quot;, x: &quot;</span> + x + <span class=\"string\">&quot;, y: &quot;</span> + y + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BlueCircle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DrawAPI</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">drawCircle</span><span class=\"params\">(<span class=\"type\">int</span> radius, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Drawing Circle[ color: blue, radius: &quot;</span> + radius + <span class=\"string\">&quot;, x: &quot;</span> + x + <span class=\"string\">&quot;, y: &quot;</span> + y + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DrawAPI drawAPI;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"title function_\">Shape</span><span class=\"params\">(DrawAPI drawAPI)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> x, y, radius;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Circle</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> radius, DrawAPI drawAPI)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(drawAPI);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.radius = radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">draw</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        drawAPI.drawCircle(radius, x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用示例\"><a href=\"#2-使用示例\" class=\"headerlink\" title=\"2. 使用示例\"></a>2. 使用示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BridgePatternDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Shape</span> <span class=\"variable\">redCircle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RedCircle</span>());</span><br><span class=\"line\">        <span class=\"type\">Shape</span> <span class=\"variable\">blueCircle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">20</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BlueCircle</span>());</span><br><span class=\"line\">        </span><br><span class=\"line\">        redCircle.draw();</span><br><span class=\"line\">        blueCircle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现要点\"><a href=\"#实现要点\" class=\"headerlink\" title=\"实现要点\"></a>实现要点</h2><ol>\n<li>将抽象与实现分离，使它们可以独立变化 <mcreference link=\"https://www.geeksforgeeks.org/bridge-design-pattern/\" index=\"2\">2</mcreference></li>\n<li>使用组合而不是继承来实现解耦</li>\n<li>确保接口的设计足够抽象，以适应未来的变化</li>\n<li>实现类和抽象类可以独立扩展，不会互相影响</li>\n</ol>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>实现平台独立性，提高系统的可扩展性</li>\n<li>抽象和实现可以独立进行改变，不会相互影响</li>\n<li>可以在运行时切换不同的实现</li>\n<li>有利于系统的分层设计 <mcreference link=\"https://www.tutorialspoint.com/design_pattern/bridge_pattern.htm\" index=\"3\">3</mcreference></li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>增加了系统的复杂度</li>\n<li>需要正确识别系统中的两个独立变化的维度</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>在设计之初就需要考虑抽象和实现的分离</li>\n<li>确保抽象和实现的接口设计合理，避免后期难以扩展</li>\n<li>不要过度使用桥接模式，只在必要时才使用</li>\n</ol>\n","feature":true,"text":"模式定义桥接模式（Bridge Pattern）是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们都可以独立地变化。这种模式通过组合的方式，将类的抽象与...","permalink":"/post/设计模式-桥接模式","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"桥接模式","slug":"桥接模式","count":1,"path":"api/tags/桥接模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">模式定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">实现方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">1. 基本结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">2. 使用示例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E8%A6%81%E7%82%B9\"><span class=\"toc-text\">实现要点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Mysql-事务与MVCC","uid":"3ea889d0200adbef6f577008a7289f16","slug":"Mysql-事务与MVCC","date":"2025-04-30T04:20:26.000Z","updated":"2025-04-30T08:11:18.862Z","comments":true,"path":"api/articles/Mysql-事务与MVCC.json","keywords":null,"cover":null,"text":"Mysql ACID 特性 原子性: 事务是最小的执行单位，不允许分割。要么全部成功，要么全部失败。 一致性: 执行事务前后，数据保持一致，例如转账业务中，无论...","permalink":"/post/Mysql-事务与MVCC","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"},{"name":"事务","slug":"事务","count":2,"path":"api/tags/事务.json"},{"name":"MVCC","slug":"MVCC","count":1,"path":"api/tags/MVCC.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"设计模式-建造者模式","uid":"c6662e642ba385f9913bf17f12cb4f9e","slug":"设计模式-建造者模式","date":"2025-04-29T13:52:20.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/设计模式-建造者模式.json","keywords":null,"cover":null,"text":"模式定义建造者模式(Builder Pattern)是一种创建型设计模式，它允许你分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。1...","permalink":"/post/设计模式-建造者模式","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"编程","slug":"编程","count":8,"path":"api/categories/编程.json"},{"name":"设计模式","slug":"编程/设计模式","count":8,"path":"api/categories/编程/设计模式.json"}],"tags":[{"name":"Java","slug":"Java","count":11,"path":"api/tags/Java.json"},{"name":"设计模式","slug":"设计模式","count":8,"path":"api/tags/设计模式.json"},{"name":"建造者模式","slug":"建造者模式","count":1,"path":"api/tags/建造者模式.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}