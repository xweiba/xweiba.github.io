{"title":"Explain详解与索引最佳实践","uid":"09e148cac22e494cb9e5253096017f87","slug":"Explain详解与索引最佳实践","date":"2022-12-23T06:11:54.000Z","updated":"2025-04-30T08:11:18.833Z","comments":true,"path":"api/articles/Explain详解与索引最佳实践.json","keywords":null,"cover":[],"content":"<h1 id=\"索引使用总结：\"><a href=\"#索引使用总结：\" class=\"headerlink\" title=\"索引使用总结：\"></a><strong>索引使用总结：</strong></h1><img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223143028986.png\" class=\"\" title=\"image-20221223143028986\">\n\n<p>like KK%相当于&#x3D;常量，%KK和%KK% 相当于范围</p>\n<h1 id=\"Explain详解与索引最佳实践\"><a href=\"#Explain详解与索引最佳实践\" class=\"headerlink\" title=\"Explain详解与索引最佳实践\"></a>Explain详解与索引最佳实践</h1><p><strong>Mysql安装文档参考</strong>：<a href=\"https://blog.csdn.net/yougoule/article/details/56680952\">https://blog.csdn.net/yougoule/article/details/56680952</a></p>\n<h2 id=\"Explain工具介绍\"><a href=\"#Explain工具介绍\" class=\"headerlink\" title=\"Explain工具介绍\"></a><strong>Explain工具介绍</strong></h2><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈  </p>\n<p>在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL</p>\n<p>注意：如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中</p>\n<h2 id=\"Explain分析示例\"><a href=\"#Explain分析示例\" class=\"headerlink\" title=\"Explain分析示例\"></a><strong>Explain分析示例</strong></h2><p>参考官方文档：<a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html\">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a></p>\n<p>示例表： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例表：</span><br><span class=\"line\">DROP TABLE IF EXISTS `actor`; </span><br><span class=\"line\">CREATE TABLE `actor` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `name` varchar(45) DEFAULT NULL,</span><br><span class=\"line\">  `update_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `actor` (`id`, `name`, `update_time`) VALUES (1,&#x27;a&#x27;,&#x27;2017-12-22 15:27:18&#x27;), (2,&#x27;b&#x27;,&#x27;2017-12-22 15:27:18&#x27;), (3,&#x27;c&#x27;,&#x27;2017-12-22 15:27:18&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `film`;</span><br><span class=\"line\">CREATE TABLE `film` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(10) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `idx_name` (`name`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `film` (`id`, `name`) VALUES (3,&#x27;film0&#x27;),(1,&#x27;film1&#x27;),(2,&#x27;film2&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `film_actor`;</span><br><span class=\"line\">CREATE TABLE `film_actor` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `film_id` int(11) NOT NULL,</span><br><span class=\"line\">  `actor_id` int(11) NOT NULL,</span><br><span class=\"line\">  `remark` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `idx_film_actor_id` (`film_id`,`actor_id`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`) VALUES (1,1,1),(2,1,2),(3,2,1);</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141333793.png\" class=\"\" title=\"image-20221223141333793\">\n\n<p>​    <img src=\"https://note.youdao.com/yws/res/20693/294230300075490AAA5AC52FE0A27B1E\" alt=\"0\"></p>\n<p>在查询中的每个表会输出一行，如果有两个表通过 join 连接查询，那么会输出两行</p>\n<h2 id=\"explain-两个变种\"><a href=\"#explain-两个变种\" class=\"headerlink\" title=\"explain 两个变种\"></a><strong>explain 两个变种</strong></h2><p>1）<strong>explain extended</strong>：会在 explain 的基础上额外提供一些查询优化的信息。紧随其后通过 show warnings 命令可以得到优化后的查询语句，从而看出优化器优化了什么。额外还有 filtered 列，是一个半分比的值，rows * filtered&#x2F;100 可以<strong>估算</strong>出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain extended select * from film where id = 1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141420510-1671776061624-72.png\" class=\"\" title=\"image-20221223141420510\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show warnings;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141437900.png\" class=\"\" title=\"image-20221223141437900\">\n\n\n\n<h2 id=\"explain中的列\"><a href=\"#explain中的列\" class=\"headerlink\" title=\"explain中的列\"></a><strong>explain中的列</strong></h2><p>接下来我们将展示 explain 中每个列的信息。</p>\n<p><strong>1. id列</strong></p>\n<p>id列的编号是 select 的序列号，有几个 select 就有几个id，并且id的顺序是按 select 出现的顺序增长的。</p>\n<p>id列越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。</p>\n<p><strong>2. select_type列</strong></p>\n<p>select_type 表示对应行是简单还是复杂的查询。</p>\n<p>1）simple：简单查询。查询不包含子查询和union</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film where id = 2;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141525831.png\" class=\"\" title=\"image-20221223141525831\">\n\n<p>2）primary：复杂查询中最外层的 select</p>\n<p>3）subquery：包含在 select 中的子查询（不在 from 子句中）</p>\n<p>4）derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表（derived的英文含义）</p>\n<p>用这个例子来了解 primary、subquery 和 derived 类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set session optimizer_switch=&#x27;derived_merge=off&#x27;;   #关闭mysql5.7新特性对衍生表的合并优化</span><br><span class=\"line\">mysql&gt; explain select (select 1 from actor where id = 1) from (select * from film where id = 1) der;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141549656.png\" class=\"\" title=\"image-20221223141549656\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set session optimizer_switch=&#x27;derived_merge=on&#x27;;\t#还原默认配置</span><br></pre></td></tr></table></figure>\n\n<p>5）union：在 union 中的第二个和随后的 select</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select 1 union all select 1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141614886.png\" class=\"\" title=\"image-20221223141614886\">\n\n<p><strong>3. table列</strong></p>\n<p>这一列表示 explain 的一行正在访问哪个表。</p>\n<p>当 from 子句中有子查询时，table列是 格式，表示当前查询依赖 id&#x3D;N 的查询，于是先执行 id&#x3D;N 的查询。</p>\n<p>当有 union 时，UNION RESULT 的 table 列的值为，1和2表示参与 union 的 select 行id。</p>\n<p><strong>4. type列</strong></p>\n<p>这一列表示<strong>关联类型或访问类型</strong>，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。</p>\n<p>依次从最优到最差分别为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p>\n<p>一般来说，<strong>得保证查询达到range级别，最好达到ref</strong></p>\n<p><strong>NULL</strong>：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select min(id) from film;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141635428.png\" class=\"\" title=\"image-20221223141635428\">\n\n<p><strong>const, system</strong>：mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show warnings 的结果）。用于 primary key 或 unique key 的所有列与常数比较时，所以表最多有一个匹配行，读取1次，速度比较快。<strong>system是const的特例</strong>，表里只有一条元组匹配时为system</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain extended select * from (select * from film where id = 1) tmp;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141657342.png\" class=\"\" title=\"image-20221223141657342\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show warnings;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141709038.png\" class=\"\" title=\"image-20221223141709038\">\n\n<p><strong>eq_ref</strong>：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film_actor left join film on film_actor.film_id = film.id;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141728837.png\" class=\"\" title=\"image-20221223141728837\">\n\n<p><strong>ref</strong>：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。</p>\n<p>1.简单 select 查询，name是普通索引（非唯一索引）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film where name = &#x27;film1&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141811460.png\" class=\"\" title=\"image-20221223141811460\">\n\n<p>2.关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor的左边前缀film_id部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select film_id from film left join film_actor on film.id = film_actor.film_id;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141824831-1671776305492-74.png\" class=\"\" title=\"image-20221223141824831\">\n\n<p><strong>range</strong>：范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;&#x3D; 等操作中。使用一个索引来检索给定范围的行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor where id &gt; 1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141842089.png\" class=\"\" title=\"image-20221223141842089\">\n\n<p><strong>index</strong>：扫描全索引就能拿到结果，一般是扫描某个二级索引，这种扫描不会从索引树根节点开始快速查找，而是直接对二级索引的叶子节点遍历和扫描，速度还是比较慢的，这种查询一般为使用覆盖索引，二级索引一般比较小，所以这种通常比ALL快一些。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141857308.png\" class=\"\" title=\"image-20221223141857308\">\n\n<p><strong>ALL</strong>：即全表扫描，扫描你的聚簇索引的所有叶子节点。通常情况下这需要增加索引来进行优化了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141912980.png\" class=\"\" title=\"image-20221223141912980\">\n\n<p><strong>5. possible_keys列</strong></p>\n<p>这一列显示查询可能使用哪些索引来查找。 </p>\n<p>explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。 </p>\n<p>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p>\n<p><strong>6. key列</strong></p>\n<p>这一列显示mysql实际采用哪个索引来优化对该表的访问。</p>\n<p>如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。</p>\n<p><strong>7. key_len列</strong></p>\n<p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。 </p>\n<p>举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。通过结果中的key_len&#x3D;4可推断出查询使用了第一个列：film_id列来执行索引查找。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film_actor where film_id = 2;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141931206.png\" class=\"\" title=\"image-20221223141931206\">\n\n<p>key_len计算规则如下：</p>\n<ul>\n<li><p>字符串，char(n)和varchar(n)，5.0.3以后版本中，<strong>n均代表字符数，而不是字节数，</strong>如果是utf-8，一个数字或字母占1个字节，一个汉字占3个字节</p>\n</li>\n<li><ul>\n<li>char(n)：如果存汉字长度就是 3n 字节</li>\n<li>varchar(n)：如果存汉字则长度是 3n + 2 字节，加的2字节用来存储字符串长度，因为varchar是变长字符串</li>\n</ul>\n</li>\n<li><p>数值类型</p>\n</li>\n<li><ul>\n<li>tinyint：1字节</li>\n<li>smallint：2字节</li>\n<li>int：4字节</li>\n<li>bigint：8字节</li>\n</ul>\n<p>　　</p>\n</li>\n<li><p>时间类型　</p>\n</li>\n<li><ul>\n<li>date：3字节</li>\n<li>timestamp：4字节</li>\n<li>datetime：8字节</li>\n</ul>\n</li>\n<li><p>如果字段允许为 NULL，需要1字节记录是否为 NULL</p>\n</li>\n</ul>\n<p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p>\n<p><strong>8. ref列</strong></p>\n<p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：film.id）</p>\n<p><strong>9. rows列</strong></p>\n<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>\n<p><strong>10. Extra列</strong></p>\n<p>这一列展示的是额外信息。常见的重要值如下： </p>\n<p>1）<strong>Using index</strong>：使用覆盖索引</p>\n<p><strong>覆盖索引定义</strong>：mysql执行计划explain结果里的key有使用索引，如果select后面查询的字段都可以从这个索引的树中获取，这种情况一般可以说是用到了覆盖索引，extra里一般都有using index；覆盖索引一般针对的是辅助索引，整个查询结果只通过辅助索引就能拿到结果，不需要通过辅助索引树找到主键，再通过主键去主键索引树里获取其它字段值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select film_id from film_actor where film_id = 1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223141957481.png\" class=\"\" title=\"image-20221223141957481\">\n\n<p>2）<strong>Using where</strong>：使用 where 语句来处理结果，并且查询的列未被索引覆盖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor where name = &#x27;a&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142011438-1671776411966-76.png\" class=\"\" title=\"image-20221223142011438\">\n\n<p>3）<strong>Using index condition</strong>：查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film_actor where film_id &gt; 1;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142027178.png\" class=\"\" title=\"image-20221223142027178\">\n\n<p>4）<strong>Using temporary</strong>：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p>\n<p>1.actor.name没有索引，此时创建了张临时表来distinct</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select distinct name from actor;</span><br></pre></td></tr></table></figure>\n\n<p>2.film.name建立了idx_name索引，此时查询时extra是using index,没有用临时表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select distinct name from film;</span><br></pre></td></tr></table></figure>\n\n<p>5）<strong>Using filesort</strong>：将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。</p>\n<p>1.actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor order by name;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142117886-1671776479066-78.png\" class=\"\" title=\"image-20221223142117886\">\n\n<p>2.film.name建立了idx_name索引,此时查询时extra是using index</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from film order by name;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142138635.png\" class=\"\" title=\"image-20221223142138635\">\n\n<p>6）<strong>Select tables optimized away</strong>：使用某些聚合函数（比如 max、min）来访问存在索引的某个字段是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select min(id) from film;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142154588-1671776515126-80.png\" class=\"\" title=\"image-20221223142154588\">\n\n\n\n<h2 id=\"索引最佳实践\"><a href=\"#索引最佳实践\" class=\"headerlink\" title=\"索引最佳实践\"></a><strong>索引最佳实践</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例表：</span><br><span class=\"line\">CREATE TABLE `employees` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(24) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class=\"line\">  `age` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class=\"line\">  `position` varchar(20) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;职位&#x27;,</span><br><span class=\"line\">  `hire_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;入职时间&#x27;,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `idx_name_age_position` (`name`,`age`,`position`) USING BTREE</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT=&#x27;员工记录表&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO employees(name,age,position,hire_time) VALUES(&#x27;LiLei&#x27;,22,&#x27;manager&#x27;,NOW());</span><br><span class=\"line\">INSERT INTO employees(name,age,position,hire_time) VALUES(&#x27;HanMeimei&#x27;, 23,&#x27;dev&#x27;,NOW());</span><br><span class=\"line\">INSERT INTO employees(name,age,position,hire_time) VALUES(&#x27;Lucy&#x27;,23,&#x27;dev&#x27;,NOW());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-全值匹配\"><a href=\"#1-全值匹配\" class=\"headerlink\" title=\"1.全值匹配\"></a><strong>1.全值匹配</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142244548.png\" class=\"\" title=\"image-20221223142244548\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27; AND age = 22;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142257587.png\" class=\"\" title=\"image-20221223142257587\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE  name= &#x27;LiLei&#x27; AND  age = 22 AND position =&#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142313305.png\" class=\"\" title=\"image-20221223142313305\">\n\n<h3 id=\"2-最左前缀法则\"><a href=\"#2-最左前缀法则\" class=\"headerlink\" title=\"2.最左前缀法则\"></a><strong>2.最左前缀法则</strong></h3><p> 如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name = &#x27;Bill&#x27; and age = 31;</span><br><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE age = 30 AND position = &#x27;dev&#x27;;</span><br><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE position = &#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142353342.png\" class=\"\" title=\"image-20221223142353342\">\n\n<h3 id=\"3-不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描\"><a href=\"#3-不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描\" class=\"headerlink\" title=\"3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描\"></a><strong>3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name = &#x27;LiLei&#x27;;</span><br><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE left(name,3) = &#x27;LiLei&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142413463.png\" class=\"\" title=\"image-20221223142413463\">\n\n<p>给hire_time增加一个普通索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `employees` ADD INDEX `idx_hire_time` (`hire_time`) USING BTREE ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN  select * from employees where date(hire_time) =&#x27;2018-09-30&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142438184.png\" class=\"\" title=\"image-20221223142438184\">\n\n<p>转化为日期范围查询，有可能会走索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN  select * from employees where hire_time &gt;=&#x27;2018-09-30 00:00:00&#x27;  and  hire_time &lt;=&#x27;2018-09-30 23:59:59&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142455278.png\" class=\"\" title=\"image-20221223142455278\">\n\n<p>还原最初索引状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `employees` DROP INDEX `idx_hire_time`;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-存储引擎不能使用索引中范围条件右边的列\"><a href=\"#4-存储引擎不能使用索引中范围条件右边的列\" class=\"headerlink\" title=\"4.存储引擎不能使用索引中范围条件右边的列\"></a><strong>4.存储引擎不能使用索引中范围条件右边的列</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27; AND age = 22 AND position =&#x27;manager&#x27;;</span><br><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27; AND age &gt; 22 AND position =&#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142521551.png\" class=\"\" title=\"image-20221223142521551\">\n\n<h3 id=\"5-尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少-select-语句\"><a href=\"#5-尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少-select-语句\" class=\"headerlink\" title=\"5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句\"></a><strong>5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT name,age FROM employees WHERE name= &#x27;LiLei&#x27; AND age = 23 AND position =&#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142556883.png\" class=\"\" title=\"image-20221223142556883\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name= &#x27;LiLei&#x27; AND age = 23 AND position =&#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142607632.png\" class=\"\" title=\"image-20221223142607632\">\n\n<h3 id=\"6-mysql在使用不等于（！-或者），-not-in-，not-exists-的时候无法使用索引会导致全表扫描\"><a href=\"#6-mysql在使用不等于（！-或者），-not-in-，not-exists-的时候无法使用索引会导致全表扫描\" class=\"headerlink\" title=\"6.mysql在使用不等于（！&#x3D;或者&lt;&gt;），****not in ，not exists 的时候无法使用索引会导致全表扫描\"></a><strong>6.mysql在使用不等于（！&#x3D;或者&lt;&gt;），****not in ，not exists</strong> <strong>的时候无法使用索引会导致全表扫描</strong></h3><p>&lt; 小于、 &gt; 大于、 &lt;&#x3D;、&gt;&#x3D; 这些，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name != &#x27;LiLei&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142701733.png\" class=\"\" title=\"image-20221223142701733\">\n\n<h3 id=\"7-is-null-is-not-null-一般情况下也无法使用索引\"><a href=\"#7-is-null-is-not-null-一般情况下也无法使用索引\" class=\"headerlink\" title=\"7.is null,is not null 一般情况下也无法使用索引\"></a><strong>7.is null,is not null 一般情况下也无法使用索引</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name is null</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142721526.png\" class=\"\" title=\"image-20221223142721526\">\n\n<h3 id=\"8-like以通配符开头（’-abc…’）mysql索引失效会变成全表扫描操作\"><a href=\"#8-like以通配符开头（’-abc…’）mysql索引失效会变成全表扫描操作\" class=\"headerlink\" title=\"8.like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作\"></a><strong>8.like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name like &#x27;%Lei&#x27;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142738544.png\" class=\"\" title=\"image-20221223142738544\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name like &#x27;Lei%&#x27;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142750542.png\" class=\"\" title=\"image-20221223142750542\">\n\n<p>问题：解决like’%字符串%’索引不被使用的方法？</p>\n<p>a）使用覆盖索引，查询字段必须是建立覆盖索引字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT name,age,position FROM employees WHERE name like &#x27;%Lei%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142825601.png\" class=\"\" title=\"image-20221223142825601\">\n\n<p>b）如果不能使用覆盖索引则可能需要借助搜索引擎</p>\n<h3 id=\"9-字符串不加单引号索引失效\"><a href=\"#9-字符串不加单引号索引失效\" class=\"headerlink\" title=\"9.字符串不加单引号索引失效\"></a><strong>9.字符串不加单引号索引失效</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name = &#x27;1000&#x27;;</span><br><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name = 1000;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142850899.png\" class=\"\" title=\"image-20221223142850899\">\n\n<h3 id=\"10-少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化\"><a href=\"#10-少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化\" class=\"headerlink\" title=\"10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化\"></a><strong>10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN SELECT * FROM employees WHERE name = &#x27;LiLei&#x27; or name = &#x27;HanMeimei&#x27;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142915542.png\" class=\"\" title=\"image-20221223142915542\">\n\n<h3 id=\"11-范围查询优化\"><a href=\"#11-范围查询优化\" class=\"headerlink\" title=\"11.范围查询优化\"></a><strong>11.范围查询优化</strong></h3><p>给年龄添加单值索引</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `employees` ADD INDEX `idx_age` (`age`) USING BTREE ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain select * from employees where age &gt;=1 and age &lt;=2000;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223142946312.png\" class=\"\" title=\"image-20221223142946312\">\n\n<p>没走索引原因：mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引。比如这个例子，可能是由于单次数据量查询过大导致优化器最终选择不走索引</p>\n<p>优化方法：可以将大的范围拆分成多个小范围</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explain select * from employees where age &gt;=1 and age &lt;=1000;</span><br><span class=\"line\">explain select * from employees where age &gt;=1001 and age &lt;=2000;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/image-20221223143005491.png\" class=\"\" title=\"image-20221223143005491\">\n\n<p>还原最初索引状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE `employees` DROP INDEX `idx_age`;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- mysql5.7关闭ONLY_FULL_GROUP_BY报错</span><br><span class=\"line\">select version(), @@sql_mode;SET sql_mode=(SELECT REPLACE(@@sql_mode,&#x27;ONLY_FULL_GROUP_BY&#x27;,&#x27;&#x27;));</span><br></pre></td></tr></table></figure>\n\n","feature":true,"text":"索引使用总结： like KK%相当于=常量，%KK和%KK% 相当于范围 Explain详解与索引最佳实践Mysql安装文档参考：https://blog.c...","permalink":"/post/Explain详解与索引最佳实践","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":4,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Explain","slug":"Explain","count":1,"path":"api/tags/Explain.json"},{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"},{"name":"索引","slug":"索引","count":1,"path":"api/tags/索引.json"},{"name":"Mysql优化","slug":"Mysql优化","count":1,"path":"api/tags/Mysql优化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">索引使用总结：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">Explain详解与索引最佳实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Explain%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Explain工具介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Explain%E5%88%86%E6%9E%90%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">Explain分析示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#explain-%E4%B8%A4%E4%B8%AA%E5%8F%98%E7%A7%8D\"><span class=\"toc-text\">explain 两个变种</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#explain%E4%B8%AD%E7%9A%84%E5%88%97\"><span class=\"toc-text\">explain中的列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">索引最佳实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E5%80%BC%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">1.全值匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E6%B3%95%E5%88%99\"><span class=\"toc-text\">2.最左前缀法则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%8D%E5%9C%A8%E7%B4%A2%E5%BC%95%E5%88%97%E4%B8%8A%E5%81%9A%E4%BB%BB%E4%BD%95%E6%93%8D%E4%BD%9C%EF%BC%88%E8%AE%A1%E7%AE%97%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%EF%BC%88%E8%87%AA%E5%8A%A8or%E6%89%8B%E5%8A%A8%EF%BC%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%89%EF%BC%8C%E4%BC%9A%E5%AF%BC%E8%87%B4%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E8%80%8C%E8%BD%AC%E5%90%91%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%B8%AD%E8%8C%83%E5%9B%B4%E6%9D%A1%E4%BB%B6%E5%8F%B3%E8%BE%B9%E7%9A%84%E5%88%97\"><span class=\"toc-text\">4.存储引擎不能使用索引中范围条件右边的列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95%EF%BC%88%E5%8F%AA%E8%AE%BF%E9%97%AE%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9F%A5%E8%AF%A2%EF%BC%88%E7%B4%A2%E5%BC%95%E5%88%97%E5%8C%85%E5%90%AB%E6%9F%A5%E8%AF%A2%E5%88%97%EF%BC%89%EF%BC%89%EF%BC%8C%E5%87%8F%E5%B0%91-select-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-mysql%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%8D%E7%AD%89%E4%BA%8E%EF%BC%88%EF%BC%81-%E6%88%96%E8%80%85%EF%BC%89%EF%BC%8C-not-in-%EF%BC%8Cnot-exists-%E7%9A%84%E6%97%B6%E5%80%99%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">6.mysql在使用不等于（！&#x3D;或者&lt;&gt;），****not in ，not exists 的时候无法使用索引会导致全表扫描</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-is-null-is-not-null-%E4%B8%80%E8%88%AC%E6%83%85%E5%86%B5%E4%B8%8B%E4%B9%9F%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">7.is null,is not null 一般情况下也无法使用索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-like%E4%BB%A5%E9%80%9A%E9%85%8D%E7%AC%A6%E5%BC%80%E5%A4%B4%EF%BC%88%E2%80%99-abc%E2%80%A6%E2%80%99%EF%BC%89mysql%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E4%BC%9A%E5%8F%98%E6%88%90%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">8.like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E5%8A%A0%E5%8D%95%E5%BC%95%E5%8F%B7%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88\"><span class=\"toc-text\">9.字符串不加单引号索引失效</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%B0%91%E7%94%A8or%E6%88%96in%EF%BC%8C%E7%94%A8%E5%AE%83%E6%9F%A5%E8%AF%A2%E6%97%B6%EF%BC%8Cmysql%E4%B8%8D%E4%B8%80%E5%AE%9A%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%8Cmysql%E5%86%85%E9%83%A8%E4%BC%98%E5%8C%96%E5%99%A8%E4%BC%9A%E6%A0%B9%E6%8D%AE%E6%A3%80%E7%B4%A2%E6%AF%94%E4%BE%8B%E3%80%81%E8%A1%A8%E5%A4%A7%E5%B0%8F%E7%AD%89%E5%A4%9A%E4%B8%AA%E5%9B%A0%E7%B4%A0%E6%95%B4%E4%BD%93%E8%AF%84%E4%BC%B0%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%AF%A6%E8%A7%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">11.范围查询优化</span></a></li></ol></li></ol></li></ol>","author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"豆瓣API接口","uid":"de7c4fb9583e9a4d0dcb141dc613fb16","slug":"豆瓣API接口","date":"2022-12-23T06:32:27.000Z","updated":"2025-04-30T08:11:18.902Z","comments":true,"path":"api/articles/豆瓣API接口.json","keywords":null,"cover":null,"text":"豆瓣API接口搜索接口 [GET] https://m.douban.com/j/search/?q=%E5%96%9C%E6%AC%A2%E4%BD%A0&t...","permalink":"/post/豆瓣API接口","photos":[],"count_time":{"symbolsCount":414,"symbolsTime":"1 mins."},"categories":[{"name":"公共API","slug":"公共API","count":1,"path":"api/categories/公共API.json"}],"tags":[{"name":"API","slug":"API","count":2,"path":"api/tags/API.json"},{"name":"豆瓣","slug":"豆瓣","count":1,"path":"api/tags/豆瓣.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Windows Mysql 安装","uid":"15601dddd5cc4a20478d4adb8f79cdea","slug":"Windows Mysql 安装","date":"2022-12-23T06:11:01.000Z","updated":"2025-04-30T08:11:18.865Z","comments":true,"path":"api/articles/Windows Mysql 安装.json","keywords":null,"cover":null,"text":"mysql 安装基础配置 官网下载: Download MySQL Community Server, 选好版本点击 download, 新页面点击No tha...","permalink":"/post/Windows Mysql 安装","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Windows","slug":"Windows","count":1,"path":"api/categories/Windows.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":6,"path":"api/tags/Mysql.json"},{"name":"Windows","slug":"Windows","count":1,"path":"api/tags/Windows.json"}],"author":{"name":"Weiba","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/24520686?v=4","link":"/","description":"啊 又忘了更新了！","socials":{"github":"https://github.com/xweiba","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}